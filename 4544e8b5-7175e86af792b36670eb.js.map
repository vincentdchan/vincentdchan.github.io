{"version":3,"sources":["webpack:///./node_modules/matter-js/build/matter.js"],"names":["module","exports","r","e","n","t","o","i","f","u","a","Error","code","p","call","length","1","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","3","World","gravity","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pair","isActive","collision","collides","collided","filterA","filterB","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairId","pairKeys","keys","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","14","global","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","Object","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","isFunction","isPlainObject","isString","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","this","self","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","16","eventNames","callback","name","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","width","clientHeight","height","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","clearTimeout","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","run","time","tick","stop","start","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","acos","sort","flag","upper","lower","pop","30","RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","c","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage"],"mappings":"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","file":"4544e8b5-7175e86af792b36670eb.js","sourcesContent":["/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.Matter = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Body` module contains methods for creating and manipulating body models.\n      * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n      * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      \n      * @class Body\n      */\n      var Body = {};\n      module.exports = Body;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Render = _dereq_('../render/Render');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Axes = _dereq_('../geometry/Axes');\n\n      (function () {\n        Body._inertiaScale = 4;\n        Body._nextCollidingGroupId = 1;\n        Body._nextNonCollidingGroupId = -1;\n        Body._nextCategory = 0x0001;\n        /**\n         * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * Vertices must be specified in clockwise order.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {body} body\n         */\n\n        Body.create = function (options) {\n          var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: {\n              x: 0,\n              y: 0\n            },\n            force: {\n              x: 0,\n              y: 0\n            },\n            torque: 0,\n            positionImpulse: {\n              x: 0,\n              y: 0\n            },\n            constraintImpulse: {\n              x: 0,\n              y: 0,\n              angle: 0\n            },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: {\n              x: 0,\n              y: 0\n            },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n              visible: true,\n              opacity: 1,\n              sprite: {\n                xScale: 1,\n                yScale: 1,\n                xOffset: 0,\n                yOffset: 0\n              },\n              lineWidth: 0\n            }\n          };\n          var body = Common.extend(defaults, options);\n\n          _initProperties(body, options);\n\n          return body;\n        };\n        /**\n         * Returns the next unique group index for which bodies will collide.\n         * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n         * See `body.collisionFilter` for more information.\n         * @method nextGroup\n         * @param {bool} [isNonColliding=false]\n         * @return {Number} Unique group index\n         */\n\n\n        Body.nextGroup = function (isNonColliding) {\n          if (isNonColliding) return Body._nextNonCollidingGroupId--;\n          return Body._nextCollidingGroupId++;\n        };\n        /**\n         * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n         * There are 32 available. See `body.collisionFilter` for more information.\n         * @method nextCategory\n         * @return {Number} Unique category bitfield\n         */\n\n\n        Body.nextCategory = function () {\n          Body._nextCategory = Body._nextCategory << 1;\n          return Body._nextCategory;\n        };\n        /**\n         * Initialises body properties.\n         * @method _initProperties\n         * @private\n         * @param {body} body\n         * @param {} [options]\n         */\n\n\n        var _initProperties = function _initProperties(body, options) {\n          options = options || {}; // init required properties (order is important)\n\n          Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n          });\n          Vertices.rotate(body.vertices, body.angle, body.position);\n          Axes.rotate(body.axes, body.angle);\n          Bounds.update(body.bounds, body.vertices, body.velocity); // allow options to override the automatically calculated properties\n\n          Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n          }); // render properties\n\n          var defaultFillStyle = body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56']),\n              defaultStrokeStyle = '#000';\n          body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n          body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n          body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n          body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n        };\n        /**\n         * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n         * Prefer to use the actual setter functions in performance critical situations.\n         * @method set\n         * @param {body} body\n         * @param {} settings A property name (or map of properties and values) to set on the body.\n         * @param {} value The value to set if `settings` is a single property name.\n         */\n\n\n        Body.set = function (body, settings, value) {\n          var property;\n\n          if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n          }\n\n          for (property in settings) {\n            value = settings[property];\n            if (!settings.hasOwnProperty(property)) continue;\n\n            switch (property) {\n              case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n\n              case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n\n              case 'mass':\n                Body.setMass(body, value);\n                break;\n\n              case 'density':\n                Body.setDensity(body, value);\n                break;\n\n              case 'inertia':\n                Body.setInertia(body, value);\n                break;\n\n              case 'vertices':\n                Body.setVertices(body, value);\n                break;\n\n              case 'position':\n                Body.setPosition(body, value);\n                break;\n\n              case 'angle':\n                Body.setAngle(body, value);\n                break;\n\n              case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n\n              case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n\n              case 'parts':\n                Body.setParts(body, value);\n                break;\n\n              default:\n                body[property] = value;\n            }\n          }\n        };\n        /**\n         * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n         * @method setStatic\n         * @param {body} body\n         * @param {bool} isStatic\n         */\n\n\n        Body.setStatic = function (body, isStatic) {\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n              part.restitution = 0;\n              part.friction = 1;\n              part.mass = part.inertia = part.density = Infinity;\n              part.inverseMass = part.inverseInertia = 0;\n              part.positionPrev.x = part.position.x;\n              part.positionPrev.y = part.position.y;\n              part.anglePrev = part.angle;\n              part.angularVelocity = 0;\n              part.speed = 0;\n              part.angularSpeed = 0;\n              part.motion = 0;\n            } else if (part._original) {\n              part.restitution = part._original.restitution;\n              part.friction = part._original.friction;\n              part.mass = part._original.mass;\n              part.inertia = part._original.inertia;\n              part.density = part._original.density;\n              part.inverseMass = part._original.inverseMass;\n              part.inverseInertia = part._original.inverseInertia;\n              delete part._original;\n            }\n          }\n        };\n        /**\n         * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n         * @method setMass\n         * @param {body} body\n         * @param {number} mass\n         */\n\n\n        Body.setMass = function (body, mass) {\n          var moment = body.inertia / (body.mass / 6);\n          body.inertia = moment * (mass / 6);\n          body.inverseInertia = 1 / body.inertia;\n          body.mass = mass;\n          body.inverseMass = 1 / body.mass;\n          body.density = body.mass / body.area;\n        };\n        /**\n         * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n         * @method setDensity\n         * @param {body} body\n         * @param {number} density\n         */\n\n\n        Body.setDensity = function (body, density) {\n          Body.setMass(body, density * body.area);\n          body.density = density;\n        };\n        /**\n         * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n         * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n         * @method setInertia\n         * @param {body} body\n         * @param {number} inertia\n         */\n\n\n        Body.setInertia = function (body, inertia) {\n          body.inertia = inertia;\n          body.inverseInertia = 1 / body.inertia;\n        };\n        /**\n         * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n         * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n         * They are then automatically translated to world space based on `body.position`.\n         *\n         * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n         * Vertices must form a convex hull, concave hulls are not supported.\n         *\n         * @method setVertices\n         * @param {body} body\n         * @param {vector[]} vertices\n         */\n\n\n        Body.setVertices = function (body, vertices) {\n          // change vertices\n          if (vertices[0].body === body) {\n            body.vertices = vertices;\n          } else {\n            body.vertices = Vertices.create(vertices, body);\n          } // update properties\n\n\n          body.axes = Axes.fromVertices(body.vertices);\n          body.area = Vertices.area(body.vertices);\n          Body.setMass(body, body.density * body.area); // orient vertices around the centre of mass at origin (0, 0)\n\n          var centre = Vertices.centre(body.vertices);\n          Vertices.translate(body.vertices, centre, -1); // update inertia while vertices are at origin (0, 0)\n\n          Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass)); // update geometry\n\n          Vertices.translate(body.vertices, body.position);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n        };\n        /**\n         * Sets the parts of the `body` and updates mass, inertia and centroid.\n         * Each part will have its parent set to `body`.\n         * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n         * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n         * @method setParts\n         * @param {body} body\n         * @param [body] parts\n         * @param {bool} [autoHull=true]\n         */\n\n\n        Body.setParts = function (body, parts, autoHull) {\n          var i; // add all the parts, ensuring that the first part is always the parent body\n\n          parts = parts.slice(0);\n          body.parts.length = 0;\n          body.parts.push(body);\n          body.parent = body;\n\n          for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n\n            if (part !== body) {\n              part.parent = body;\n              body.parts.push(part);\n            }\n          }\n\n          if (body.parts.length === 1) return;\n          autoHull = typeof autoHull !== 'undefined' ? autoHull : true; // find the convex hull of all parts to set on the parent body\n\n          if (autoHull) {\n            var vertices = [];\n\n            for (i = 0; i < parts.length; i++) {\n              vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n          } // sum the properties of all compound parts of the parent body\n\n\n          var total = Body._totalProperties(body);\n\n          body.area = total.area;\n          body.parent = body;\n          body.position.x = total.centre.x;\n          body.position.y = total.centre.y;\n          body.positionPrev.x = total.centre.x;\n          body.positionPrev.y = total.centre.y;\n          Body.setMass(body, total.mass);\n          Body.setInertia(body, total.inertia);\n          Body.setPosition(body, total.centre);\n        };\n        /**\n         * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n         * @method setPosition\n         * @param {body} body\n         * @param {vector} position\n         */\n\n\n        Body.setPosition = function (body, position) {\n          var delta = Vector.sub(position, body.position);\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n         * @method setAngle\n         * @param {body} body\n         * @param {number} angle\n         */\n\n\n        Body.setAngle = function (body, angle) {\n          var delta = angle - body.angle;\n          body.anglePrev += delta;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n\n            if (i > 0) {\n              Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n          }\n        };\n        /**\n         * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setVelocity\n         * @param {body} body\n         * @param {vector} velocity\n         */\n\n\n        Body.setVelocity = function (body, velocity) {\n          body.positionPrev.x = body.position.x - velocity.x;\n          body.positionPrev.y = body.position.y - velocity.y;\n          body.velocity.x = velocity.x;\n          body.velocity.y = velocity.y;\n          body.speed = Vector.magnitude(body.velocity);\n        };\n        /**\n         * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setAngularVelocity\n         * @param {body} body\n         * @param {number} velocity\n         */\n\n\n        Body.setAngularVelocity = function (body, velocity) {\n          body.anglePrev = body.angle - velocity;\n          body.angularVelocity = velocity;\n          body.angularSpeed = Math.abs(body.angularVelocity);\n        };\n        /**\n         * Moves a body by a given vector relative to its current position, without imparting any velocity.\n         * @method translate\n         * @param {body} body\n         * @param {vector} translation\n         */\n\n\n        Body.translate = function (body, translation) {\n          Body.setPosition(body, Vector.add(body.position, translation));\n        };\n        /**\n         * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n         * @method rotate\n         * @param {body} body\n         * @param {number} rotation\n         * @param {vector} [point]\n         */\n\n\n        Body.rotate = function (body, rotation, point) {\n          if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n          } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.setAngle(body, body.angle + rotation);\n          }\n        };\n        /**\n         * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n         * @method scale\n         * @param {body} body\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} [point]\n         */\n\n\n        Body.scale = function (body, scaleX, scaleY, point) {\n          var totalArea = 0,\n              totalInertia = 0;\n          point = point || body.position;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i]; // scale vertices\n\n            Vertices.scale(part.vertices, scaleX, scaleY, point); // update properties\n\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area); // update inertia (requires vertices to be at origin)\n\n            Vertices.translate(part.vertices, {\n              x: -part.position.x,\n              y: -part.position.y\n            });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, {\n              x: part.position.x,\n              y: part.position.y\n            });\n\n            if (i > 0) {\n              totalArea += part.area;\n              totalInertia += part.inertia;\n            } // scale position\n\n\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY; // update bounds\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          } // handle parent body\n\n\n          if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n              Body.setMass(body, body.density * totalArea);\n              Body.setInertia(body, totalInertia);\n            }\n          } // handle circles\n\n\n          if (body.circleRadius) {\n            if (scaleX === scaleY) {\n              body.circleRadius *= scaleX;\n            } else {\n              // body is no longer a circle\n              body.circleRadius = null;\n            }\n          }\n        };\n        /**\n         * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n         * @method update\n         * @param {body} body\n         * @param {number} deltaTime\n         * @param {number} timeScale\n         * @param {number} correction\n         */\n\n\n        Body.update = function (body, deltaTime, timeScale, correction) {\n          var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2); // from the previous step\n\n          var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n              velocityPrevX = body.position.x - body.positionPrev.x,\n              velocityPrevY = body.position.y - body.positionPrev.y; // update velocity with Verlet integration\n\n          body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n          body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.position.x += body.velocity.x;\n          body.position.y += body.velocity.y; // update angular velocity with Verlet integration\n\n          body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n          body.anglePrev = body.angle;\n          body.angle += body.angularVelocity; // track speed and acceleration\n\n          body.speed = Vector.magnitude(body.velocity);\n          body.angularSpeed = Math.abs(body.angularVelocity); // transform the body geometry\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n              part.position.x += body.velocity.x;\n              part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n              Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n              Axes.rotate(part.axes, body.angularVelocity);\n\n              if (i > 0) {\n                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n              }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Applies a force to a body from a given world-space position, including resulting torque.\n         * @method applyForce\n         * @param {body} body\n         * @param {vector} position\n         * @param {vector} force\n         */\n\n\n        Body.applyForce = function (body, position, force) {\n          body.force.x += force.x;\n          body.force.y += force.y;\n          var offset = {\n            x: position.x - body.position.x,\n            y: position.y - body.position.y\n          };\n          body.torque += offset.x * force.y - offset.y * force.x;\n        };\n        /**\n         * Returns the sums of the properties of all compound parts of the parent body.\n         * @method _totalProperties\n         * @private\n         * @param {body} body\n         * @return {}\n         */\n\n\n        Body._totalProperties = function (body) {\n          // from equations at:\n          // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n          // http://output.to/sideway/default.asp?qno=121100087\n          var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: {\n              x: 0,\n              y: 0\n            }\n          }; // sum the properties of all compound parts of the parent body\n\n          for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n          }\n\n          properties.centre = Vector.div(properties.centre, properties.mass);\n          return properties;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a body starts sleeping (where `this` is the body).\n        *\n        * @event sleepStart\n        * @this {body} The body that has started sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a body ends sleeping (where `this` is the body).\n        *\n        * @event sleepEnd\n        * @this {body} The body that has ended sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"body\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Body\"\n         */\n\n        /**\n         * An array of bodies that make up this body. \n         * The first body in the array must always be a self reference to the current body instance.\n         * All bodies in the `parts` array together form a single rigid compound body.\n         * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n         * Parts themselves should never be added to a `World`, only the parent body should be.\n         * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n         *\n         * @property parts\n         * @type body[]\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * A self reference if the body is _not_ a part of another body.\n         * Otherwise this is a reference to the body that this is a part of.\n         * See `body.parts`.\n         *\n         * @property parent\n         * @type body\n         */\n\n        /**\n         * A `Number` specifying the angle of the body, in radians.\n         *\n         * @property angle\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An array of `Vector` objects that specify the convex hull of the rigid body.\n         * These should be provided about the origin `(0, 0)`. E.g.\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n         * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n         *\n         * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n         * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n         *\n         * @property vertices\n         * @type vector[]\n         */\n\n        /**\n         * A `Vector` that specifies the current world-space position of the body.\n         *\n         * @property position\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n         *\n         * @property force\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n         *\n         * @property torque\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n         *\n         * @readOnly\n         * @property speed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n         *\n         * @readOnly\n         * @property angularSpeed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property velocity\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property angularVelocity\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n         * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n         *\n         * @property isStatic\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n         *\n         * @property isSensor\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n         * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n         *\n         * @property isSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n         * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n         *\n         * @readOnly\n         * @property motion\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n         *\n         * @property sleepThreshold\n         * @type number\n         * @default 60\n         */\n\n        /**\n         * A `Number` that defines the density of the body, that is its mass per unit area.\n         * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n         * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n         *\n         * @property density\n         * @type number\n         * @default 0.001\n         */\n\n        /**\n         * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n         * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n         *\n         * @property mass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse mass of the body (`1 / mass`).\n         * If you modify this value, you must also modify the `body.mass` property.\n         *\n         * @property inverseMass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n         * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n         *\n         * @property inertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n         * If you modify this value, you must also modify the `body.inertia` property.\n         *\n         * @property inverseInertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n         * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n         * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n         *\n         *     Math.max(bodyA.restitution, bodyB.restitution)\n         *\n         * @property restitution\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means that the body may slide indefinitely.\n         * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n         *\n         * The effects of the value may be non-linear. \n         * High values may be unstable depending on the body.\n         * The engine uses a Coulomb friction model including static and kinetic friction.\n         * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n         *\n         *     Math.min(bodyA.friction, bodyB.friction)\n         *\n         * @property friction\n         * @type number\n         * @default 0.1\n         */\n\n        /**\n         * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n         * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n         * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n         * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n         *\n         * @property frictionStatic\n         * @type number\n         * @default 0.5\n         */\n\n        /**\n         * A `Number` that defines the air friction of the body (air resistance). \n         * A value of `0` means the body will never slow as it moves through space.\n         * The higher the value, the faster a body slows when moving through space.\n         * The effects of the value are non-linear. \n         *\n         * @property frictionAir\n         * @type number\n         * @default 0.01\n         */\n\n        /**\n         * An `Object` that specifies the collision filtering properties of this body.\n         *\n         * Collisions between two bodies will obey the following rules:\n         * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n         *   they will always collide if the value is positive, and they will never collide\n         *   if the value is negative.\n         * - If the two bodies have different values of `collisionFilter.group` or if one\n         *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n         *\n         * Each body belongs to a collision category, given by `collisionFilter.category`. This\n         * value is used as a bit field and the category should have only one bit set, meaning that\n         * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n         * different collision categories available.\n         *\n         * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n         * the categories it collides with (the value is the bitwise AND value of all these categories).\n         *\n         * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n         * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n         * are both true.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n        /**\n         * An Integer `Number`, that specifies the collision group this body belongs to.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.group\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * A bit field that specifies the collision category this body belongs to.\n         * The category value should have only one bit set, for example `0x0001`.\n         * This means there are up to 32 unique collision categories available.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.category\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * A bit mask that specifies the collision categories this body may collide with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.mask\n         * @type object\n         * @default -1\n         */\n\n        /**\n         * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n         * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n         * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n         *\n         * @property slop\n         * @type number\n         * @default 0.05\n         */\n\n        /**\n         * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n         *\n         * @property timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the body should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * Sets the opacity to use when rendering.\n         *\n         * @property render.opacity\n         * @type number\n         * @default 1\n        */\n\n        /**\n         * An `Object` that defines the sprite properties to use when rendering, if any.\n         *\n         * @property render.sprite\n         * @type object\n         */\n\n        /**\n         * An `String` that defines the path to the image to use as the sprite texture, if any.\n         *\n         * @property render.sprite.texture\n         * @type string\n         */\n\n        /**\n         * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n         *\n         * @property render.sprite.xScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n         *\n         * @property render.sprite.yScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n         *\n         * @property render.sprite.xOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n         *\n         * @property render.sprite.yOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.fillStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * An array of unique axis vectors (edge normals) used for collision detection.\n         * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n         * They are constantly updated by `Body.update` during the simulation.\n         *\n         * @property axes\n         * @type vector[]\n         */\n\n        /**\n         * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n         *\n         * @property area\n         * @type string\n         * @default \n         */\n\n        /**\n         * A `Bounds` object that defines the AABB region for the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31\n    }],\n    2: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n      * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n      * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n      * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composite\n      */\n      var Composite = {};\n      module.exports = Composite;\n\n      var Events = _dereq_('../core/Events');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Body = _dereq_('./Body');\n\n      (function () {\n        /**\n         * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properites section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} [options]\n         * @return {composite} A new composite\n         */\n        Composite.create = function (options) {\n          return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite',\n            plugin: {}\n          }, options);\n        };\n        /**\n         * Sets the composite's `isModified` flag. \n         * If `updateParents` is true, all parents will be set (default: false).\n         * If `updateChildren` is true, all children will be set (default: false).\n         * @method setModified\n         * @param {composite} composite\n         * @param {boolean} isModified\n         * @param {boolean} [updateParents=false]\n         * @param {boolean} [updateChildren=false]\n         */\n\n\n        Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n          composite.isModified = isModified;\n\n          if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n          }\n\n          if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              var childComposite = composite.composites[i];\n              Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n          }\n        };\n        /**\n         * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n         * @method add\n         * @param {composite} composite\n         * @param {} object\n         * @return {composite} The original composite with the objects added\n         */\n\n\n        Composite.add = function (composite, object) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeAdd', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                  Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                  break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n\n              case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n\n              case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n\n              case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterAdd', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Optionally searching its children recursively.\n         * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n         * @method remove\n         * @param {composite} composite\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the objects removed\n         */\n\n\n        Composite.remove = function (composite, object, deep) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeRemove', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n\n              case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n\n              case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n\n              case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterRemove', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Adds a composite to the given composite.\n         * @private\n         * @method addComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @return {composite} The original compositeA with the objects from compositeB added\n         */\n\n\n        Composite.addComposite = function (compositeA, compositeB) {\n          compositeA.composites.push(compositeB);\n          compositeB.parent = compositeA;\n          Composite.setModified(compositeA, true, true, false);\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @param {boolean} [deep=false]\n         * @return {composite} The original compositeA with the composite removed\n         */\n\n\n        Composite.removeComposite = function (compositeA, compositeB, deep) {\n          var position = Common.indexOf(compositeA.composites, compositeB);\n\n          if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++) {\n              Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n          }\n\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite.\n         * @private\n         * @method removeCompositeAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the composite removed\n         */\n\n\n        Composite.removeCompositeAt = function (composite, position) {\n          composite.composites.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a body to the given composite.\n         * @private\n         * @method addBody\n         * @param {composite} composite\n         * @param {body} body\n         * @return {composite} The original composite with the body added\n         */\n\n\n        Composite.addBody = function (composite, body) {\n          composite.bodies.push(body);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeBody\n         * @param {composite} composite\n         * @param {body} body\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBody = function (composite, body, deep) {\n          var position = Common.indexOf(composite.bodies, body);\n\n          if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeBody(composite.composites[i], body, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeBodyAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBodyAt = function (composite, position) {\n          composite.bodies.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a constraint to the given composite.\n         * @private\n         * @method addConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @return {composite} The original composite with the constraint added\n         */\n\n\n        Composite.addConstraint = function (composite, constraint) {\n          composite.constraints.push(constraint);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a constraint from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraint = function (composite, constraint, deep) {\n          var position = Common.indexOf(composite.constraints, constraint);\n\n          if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeConstraintAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraintAt = function (composite, position) {\n          composite.constraints.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes all bodies, constraints and composites from the given composite.\n         * Optionally clearing its children recursively.\n         * @method clear\n         * @param {composite} composite\n         * @param {boolean} keepStatic\n         * @param {boolean} [deep=false]\n         */\n\n\n        Composite.clear = function (composite, keepStatic, deep) {\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.clear(composite.composites[i], keepStatic, true);\n            }\n          }\n\n          if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function (body) {\n              return body.isStatic;\n            });\n          } else {\n            composite.bodies.length = 0;\n          }\n\n          composite.constraints.length = 0;\n          composite.composites.length = 0;\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns all bodies in the given composite, including all bodies in its children, recursively.\n         * @method allBodies\n         * @param {composite} composite\n         * @return {body[]} All the bodies\n         */\n\n\n        Composite.allBodies = function (composite) {\n          var bodies = [].concat(composite.bodies);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n          }\n\n          return bodies;\n        };\n        /**\n         * Returns all constraints in the given composite, including all constraints in its children, recursively.\n         * @method allConstraints\n         * @param {composite} composite\n         * @return {constraint[]} All the constraints\n         */\n\n\n        Composite.allConstraints = function (composite) {\n          var constraints = [].concat(composite.constraints);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n          }\n\n          return constraints;\n        };\n        /**\n         * Returns all composites in the given composite, including all composites in its children, recursively.\n         * @method allComposites\n         * @param {composite} composite\n         * @return {composite[]} All the composites\n         */\n\n\n        Composite.allComposites = function (composite) {\n          var composites = [].concat(composite.composites);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n          }\n\n          return composites;\n        };\n        /**\n         * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n         * @method get\n         * @param {composite} composite\n         * @param {number} id\n         * @param {string} type\n         * @return {object} The requested object, if found\n         */\n\n\n        Composite.get = function (composite, id, type) {\n          var objects, object;\n\n          switch (type) {\n            case 'body':\n              objects = Composite.allBodies(composite);\n              break;\n\n            case 'constraint':\n              objects = Composite.allConstraints(composite);\n              break;\n\n            case 'composite':\n              objects = Composite.allComposites(composite).concat(composite);\n              break;\n          }\n\n          if (!objects) return null;\n          object = objects.filter(function (object) {\n            return object.id.toString() === id.toString();\n          });\n          return object.length === 0 ? null : object[0];\n        };\n        /**\n         * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n         * @method move\n         * @param {compositeA} compositeA\n         * @param {object[]} objects\n         * @param {compositeB} compositeB\n         * @return {composite} Returns compositeA\n         */\n\n\n        Composite.move = function (compositeA, objects, compositeB) {\n          Composite.remove(compositeA, objects);\n          Composite.add(compositeB, objects);\n          return compositeA;\n        };\n        /**\n         * Assigns new ids for all objects in the composite, recursively.\n         * @method rebase\n         * @param {composite} composite\n         * @return {composite} Returns composite\n         */\n\n\n        Composite.rebase = function (composite) {\n          var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n\n          for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Translates all children in the composite by a given vector relative to their current positions, \n         * without imparting any velocity.\n         * @method translate\n         * @param {composite} composite\n         * @param {vector} translation\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.translate = function (composite, translation, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n         * @method rotate\n         * @param {composite} composite\n         * @param {number} rotation\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.rotate = function (composite, rotation, point, recursive) {\n          var cos = Math.cos(rotation),\n              sin = Math.sin(rotation),\n              bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.rotate(body, rotation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n         * @method scale\n         * @param {composite} composite\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + dx * scaleX,\n              y: point.y + dy * scaleY\n            });\n            Body.scale(body, scaleX, scaleY);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns the union of the bounds of all of the composite's bodies.\n         * @method bounds\n         * @param {composite} composite The composite.\n         * @returns {bounds} The composite bounds.\n         */\n\n\n        Composite.bounds = function (composite) {\n          var bodies = Composite.allBodies(composite),\n              vertices = [];\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n          }\n\n          return Bounds.create(vertices);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, before objects have been added.\n        *\n        * @event beforeAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, after objects have been added.\n        *\n        * @event afterAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, before objects have been removed.\n        *\n        * @event beforeRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, after objects have been removed.\n        *\n        * @event afterRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"composite\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage composites.\n         *\n         * @property label\n         * @type string\n         * @default \"Composite\"\n         */\n\n        /**\n         * A flag that specifies whether the composite has been modified during the current step.\n         * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n         * If you need to change it manually, you should use the `Composite.setModified` method.\n         *\n         * @property isModified\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n         *\n         * @property parent\n         * @type composite\n         * @default null\n         */\n\n        /**\n         * An array of `Body` that are _direct_ children of this composite.\n         * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n         *\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * An array of `Constraint` that are _direct_ children of this composite.\n         * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n         *\n         * @property constraints\n         * @type constraint[]\n         * @default []\n         */\n\n        /**\n         * An array of `Composite` that are _direct_ children of this composite.\n         * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n         *\n         * @property composites\n         * @type composite[]\n         * @default []\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"./Body\": 1\n    }],\n    3: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.World` module contains methods for creating and manipulating the world composite.\n      * A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n      * A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n      * It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n      * There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class World\n      * @extends Composite\n      */\n      var World = {};\n      module.exports = World;\n\n      var Composite = _dereq_('./Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @constructor\n         * @param {} options\n         * @return {world} A new world\n         */\n        World.create = function (options) {\n          var composite = Composite.create();\n          var defaults = {\n            label: 'World',\n            gravity: {\n              x: 0,\n              y: 1,\n              scale: 0.001\n            },\n            bounds: {\n              min: {\n                x: -Infinity,\n                y: -Infinity\n              },\n              max: {\n                x: Infinity,\n                y: Infinity\n              }\n            }\n          };\n          return Common.extend(composite, defaults, options);\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * The gravity to apply on the world.\n         *\n         * @property gravity\n         * @type object\n         */\n\n        /**\n         * The gravity x component.\n         *\n         * @property gravity.x\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * The gravity y component.\n         *\n         * @property gravity.y\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * The gravity scale factor.\n         *\n         * @property gravity.scale\n         * @type object\n         * @default 0.001\n         */\n\n        /**\n         * A `Bounds` object that defines the world bounds for collision detection.\n         *\n         * @property bounds\n         * @type bounds\n         * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n         */\n        // World is a Composite body\n        // see src/module/Outro.js for these aliases:\n\n        /**\n         * An alias for Composite.add\n         * @method add\n         * @param {world} world\n         * @param {} object\n         * @return {composite} The original world with the objects added\n         */\n\n        /**\n         * An alias for Composite.remove\n         * @method remove\n         * @param {world} world\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original world with the objects removed\n         */\n\n        /**\n         * An alias for Composite.clear\n         * @method clear\n         * @param {world} world\n         * @param {boolean} keepStatic\n         */\n\n        /**\n         * An alias for Composite.addComposite\n         * @method addComposite\n         * @param {world} world\n         * @param {composite} composite\n         * @return {world} The original world with the objects from composite added\n         */\n\n        /**\n         * An alias for Composite.addBody\n         * @method addBody\n         * @param {world} world\n         * @param {body} body\n         * @return {world} The original world with the body added\n         */\n\n        /**\n         * An alias for Composite.addConstraint\n         * @method addConstraint\n         * @param {world} world\n         * @param {constraint} constraint\n         * @return {world} The original world with the constraint added\n         */\n\n      })();\n    }, {\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Composite\": 2\n    }],\n    4: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n      *\n      * @class Contact\n      */\n      var Contact = {};\n      module.exports = Contact;\n\n      (function () {\n        /**\n         * Creates a new contact.\n         * @method create\n         * @param {vertex} vertex\n         * @return {contact} A new contact\n         */\n        Contact.create = function (vertex) {\n          return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n          };\n        };\n        /**\n         * Generates a contact id.\n         * @method id\n         * @param {vertex} vertex\n         * @return {string} Unique contactID\n         */\n\n\n        Contact.id = function (vertex) {\n          return vertex.body.id + '_' + vertex.index;\n        };\n      })();\n    }, {}],\n    5: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n      *\n      * @class Detector\n      */\n      // TODO: speculative contacts\n      var Detector = {};\n      module.exports = Detector;\n\n      var SAT = _dereq_('./SAT');\n\n      var Pair = _dereq_('./Pair');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        /**\n         * Finds all collisions given a list of pairs.\n         * @method collisions\n         * @param {pair[]} broadphasePairs\n         * @param {engine} engine\n         * @return {array} collisions\n         */\n        Detector.collisions = function (broadphasePairs, engine) {\n          var collisions = [],\n              pairsTable = engine.pairs.table;\n\n          for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0],\n                bodyB = broadphasePairs[i][1];\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping)) continue;\n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) continue; // mid phase\n\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n              for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                var partA = bodyA.parts[j];\n\n                for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                  var partB = bodyB.parts[k];\n\n                  if (partA === bodyA && partB === bodyB || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                    // find a previous collision we could reuse\n                    var pairId = Pair.id(partA, partB),\n                        pair = pairsTable[pairId],\n                        previousCollision;\n\n                    if (pair && pair.isActive) {\n                      previousCollision = pair.collision;\n                    } else {\n                      previousCollision = null;\n                    } // narrow phase\n\n\n                    var collision = SAT.collides(partA, partB, previousCollision);\n\n                    if (collision.collided) {\n                      collisions.push(collision);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns `true` if both supplied collision filters will allow a collision to occur.\n         * See `body.collisionFilter` for more information.\n         * @method canCollide\n         * @param {} filterA\n         * @param {} filterB\n         * @return {bool} `true` if collision can occur\n         */\n\n\n        Detector.canCollide = function (filterA, filterB) {\n          if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n          return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n        };\n      })();\n    }, {\n      \"../geometry/Bounds\": 26,\n      \"./Pair\": 7,\n      \"./SAT\": 11\n    }],\n    6: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n      *\n      * @class Grid\n      */\n      var Grid = {};\n      module.exports = Grid;\n\n      var Pair = _dereq_('./Pair');\n\n      var Detector = _dereq_('./Detector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new grid.\n         * @method create\n         * @param {} options\n         * @return {grid} A new grid\n         */\n        Grid.create = function (options) {\n          var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * The width of a single grid bucket.\n         *\n         * @property bucketWidth\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * The height of a single grid bucket.\n         *\n         * @property bucketHeight\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * Updates the grid.\n         * @method update\n         * @param {grid} grid\n         * @param {body[]} bodies\n         * @param {engine} engine\n         * @param {boolean} forceUpdate\n         */\n\n\n        Grid.update = function (grid, bodies, engine, forceUpdate) {\n          var i,\n              col,\n              row,\n              world = engine.world,\n              buckets = grid.buckets,\n              bucket,\n              bucketId,\n              gridChanged = false;\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isSleeping && !forceUpdate) continue; // don't update out of world bodies\n\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y) continue;\n\n            var newRegion = Grid._getRegion(grid, body); // if the body has changed grid region\n\n\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n              if (!body.region || forceUpdate) body.region = newRegion;\n\n              var union = Grid._regionUnion(newRegion, body.region); // update grid buckets affected by region change\n              // iterate over the union of both regions\n\n\n              for (col = union.startCol; col <= union.endCol; col++) {\n                for (row = union.startRow; row <= union.endRow; row++) {\n                  bucketId = Grid._getBucketId(col, row);\n                  bucket = buckets[bucketId];\n                  var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                  var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow; // remove from old region buckets\n\n                  if (!isInsideNewRegion && isInsideOldRegion) {\n                    if (isInsideOldRegion) {\n                      if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                    }\n                  } // add to new region buckets\n\n\n                  if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n\n                    Grid._bucketAddBody(grid, bucket, body);\n                  }\n                }\n              } // set the new region\n\n\n              body.region = newRegion; // flag changes so we can update pairs\n\n              gridChanged = true;\n            }\n          } // update pairs list only if pairs changed (i.e. a body changed region)\n\n\n          if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n        };\n        /**\n         * Clears the grid.\n         * @method clear\n         * @param {grid} grid\n         */\n\n\n        Grid.clear = function (grid) {\n          grid.buckets = {};\n          grid.pairs = {};\n          grid.pairsList = [];\n        };\n        /**\n         * Finds the union of two regions.\n         * @method _regionUnion\n         * @private\n         * @param {} regionA\n         * @param {} regionB\n         * @return {} region\n         */\n\n\n        Grid._regionUnion = function (regionA, regionB) {\n          var startCol = Math.min(regionA.startCol, regionB.startCol),\n              endCol = Math.max(regionA.endCol, regionB.endCol),\n              startRow = Math.min(regionA.startRow, regionB.startRow),\n              endRow = Math.max(regionA.endRow, regionB.endRow);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Gets the region a given body falls in for a given grid.\n         * @method _getRegion\n         * @private\n         * @param {} grid\n         * @param {} body\n         * @return {} region\n         */\n\n\n        Grid._getRegion = function (grid, body) {\n          var bounds = body.bounds,\n              startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n              endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n              startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n              endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Creates a region.\n         * @method _createRegion\n         * @private\n         * @param {} startCol\n         * @param {} endCol\n         * @param {} startRow\n         * @param {} endRow\n         * @return {} region\n         */\n\n\n        Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n          return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n          };\n        };\n        /**\n         * Gets the bucket id at the given position.\n         * @method _getBucketId\n         * @private\n         * @param {} column\n         * @param {} row\n         * @return {string} bucket id\n         */\n\n\n        Grid._getBucketId = function (column, row) {\n          return 'C' + column + 'R' + row;\n        };\n        /**\n         * Creates a bucket.\n         * @method _createBucket\n         * @private\n         * @param {} buckets\n         * @param {} bucketId\n         * @return {} bucket\n         */\n\n\n        Grid._createBucket = function (buckets, bucketId) {\n          var bucket = buckets[bucketId] = [];\n          return bucket;\n        };\n        /**\n         * Adds a body to a bucket.\n         * @method _bucketAddBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketAddBody = function (grid, bucket, body) {\n          // add new pairs\n          for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n            if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue; // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n              pair[2] += 1;\n            } else {\n              grid.pairs[pairId] = [body, bodyB, 1];\n            }\n          } // add to bodies (after pairs, otherwise pairs with self)\n\n\n          bucket.push(body);\n        };\n        /**\n         * Removes a body from a bucket.\n         * @method _bucketRemoveBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketRemoveBody = function (grid, bucket, body) {\n          // remove from bucket\n          bucket.splice(Common.indexOf(bucket, body), 1); // update pair counts\n\n          for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n            if (pair) pair[2] -= 1;\n          }\n        };\n        /**\n         * Generates a list of the active pairs in the grid.\n         * @method _createActivePairsList\n         * @private\n         * @param {} grid\n         * @return [] pairs\n         */\n\n\n        Grid._createActivePairsList = function (grid) {\n          var pairKeys,\n              pair,\n              pairs = []; // grid.pairs is used as a hashmap\n\n          pairKeys = Common.keys(grid.pairs); // iterate over grid.pairs\n\n          for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]]; // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n\n            if (pair[2] > 0) {\n              pairs.push(pair);\n            } else {\n              delete grid.pairs[pairKeys[k]];\n            }\n          }\n\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Detector\": 5,\n      \"./Pair\": 7\n    }],\n    7: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n      *\n      * @class Pair\n      */\n      var Pair = {};\n      module.exports = Pair;\n\n      var Contact = _dereq_('./Contact');\n\n      (function () {\n        /**\n         * Creates a pair.\n         * @method create\n         * @param {collision} collision\n         * @param {number} timestamp\n         * @return {pair} A new pair\n         */\n        Pair.create = function (collision, timestamp) {\n          var bodyA = collision.bodyA,\n              bodyB = collision.bodyB,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n          };\n          Pair.update(pair, collision, timestamp);\n          return pair;\n        };\n        /**\n         * Updates a pair given a collision.\n         * @method update\n         * @param {pair} pair\n         * @param {collision} collision\n         * @param {number} timestamp\n         */\n\n\n        Pair.update = function (pair, collision, timestamp) {\n          var contacts = pair.contacts,\n              supports = collision.supports,\n              activeContacts = pair.activeContacts,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          pair.collision = collision;\n          pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n          pair.friction = Math.min(parentA.friction, parentB.friction);\n          pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n          pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n          pair.slop = Math.max(parentA.slop, parentB.slop);\n          activeContacts.length = 0;\n\n          if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n              var support = supports[i],\n                  contactId = Contact.id(support),\n                  contact = contacts[contactId];\n\n              if (contact) {\n                activeContacts.push(contact);\n              } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n              }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n          } else {\n            if (pair.isActive === true) Pair.setActive(pair, false, timestamp);\n          }\n        };\n        /**\n         * Set a pair as active or inactive.\n         * @method setActive\n         * @param {pair} pair\n         * @param {bool} isActive\n         * @param {number} timestamp\n         */\n\n\n        Pair.setActive = function (pair, isActive, timestamp) {\n          if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n          } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n          }\n        };\n        /**\n         * Get the id for the given pair.\n         * @method id\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {string} Unique pairId\n         */\n\n\n        Pair.id = function (bodyA, bodyB) {\n          if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n          } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n          }\n        };\n      })();\n    }, {\n      \"./Contact\": 4\n    }],\n    8: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n      *\n      * @class Pairs\n      */\n      var Pairs = {};\n      module.exports = Pairs;\n\n      var Pair = _dereq_('./Pair');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        Pairs._pairMaxIdleLife = 1000;\n        /**\n         * Creates a new pairs structure.\n         * @method create\n         * @param {object} options\n         * @return {pairs} A new pairs structure\n         */\n\n        Pairs.create = function (options) {\n          return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n          }, options);\n        };\n        /**\n         * Updates pairs given a list of collisions.\n         * @method update\n         * @param {object} pairs\n         * @param {collision[]} collisions\n         * @param {number} timestamp\n         */\n\n\n        Pairs.update = function (pairs, collisions, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              collisionStart = pairs.collisionStart,\n              collisionEnd = pairs.collisionEnd,\n              collisionActive = pairs.collisionActive,\n              activePairIds = [],\n              collision,\n              pairId,\n              pair,\n              i; // clear collision state arrays, but maintain old reference\n\n          collisionStart.length = 0;\n          collisionEnd.length = 0;\n          collisionActive.length = 0;\n\n          for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n              pairId = Pair.id(collision.bodyA, collision.bodyB);\n              activePairIds.push(pairId);\n              pair = pairsTable[pairId];\n\n              if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                  // pair exists and is active\n                  collisionActive.push(pair);\n                } else {\n                  // pair exists but was inactive, so a collision has just started again\n                  collisionStart.push(pair);\n                } // update the pair\n\n\n                Pair.update(pair, collision, timestamp);\n              } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pairId] = pair; // push the new pair\n\n                collisionStart.push(pair);\n                pairsList.push(pair);\n              }\n            }\n          } // deactivate previously active pairs that are now inactive\n\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n              Pair.setActive(pair, false, timestamp);\n              collisionEnd.push(pair);\n            }\n          }\n        };\n        /**\n         * Finds and removes pairs that have been inactive for a set amount of time.\n         * @method removeOld\n         * @param {object} pairs\n         * @param {number} timestamp\n         */\n\n\n        Pairs.removeOld = function (pairs, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              indexesToRemove = [],\n              pair,\n              collision,\n              pairIndex,\n              i;\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision; // never remove sleeping pairs\n\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n              pair.timeUpdated = timestamp;\n              continue;\n            } // if pair is inactive for too long, mark it to be removed\n\n\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n              indexesToRemove.push(i);\n            }\n          } // remove marked pairs\n\n\n          for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n          }\n        };\n        /**\n         * Clears the given pairs structure.\n         * @method clear\n         * @param {pairs} pairs\n         * @return {pairs} pairs\n         */\n\n\n        Pairs.clear = function (pairs) {\n          pairs.table = {};\n          pairs.list.length = 0;\n          pairs.collisionStart.length = 0;\n          pairs.collisionActive.length = 0;\n          pairs.collisionEnd.length = 0;\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Pair\": 7\n    }],\n    9: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Query` module contains methods for performing collision queries.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Query\n      */\n      var Query = {};\n      module.exports = Query;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var SAT = _dereq_('./SAT');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Bodies = _dereq_('../factory/Bodies');\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      (function () {\n        /**\n         * Returns a list of collisions between `body` and `bodies`.\n         * @method collides\n         * @param {body} body\n         * @param {body[]} bodies\n         * @return {object[]} Collisions\n         */\n        Query.collides = function (body, bodies) {\n          var collisions = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n\n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n              for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                var part = bodyA.parts[j];\n\n                if (Bounds.overlaps(part.bounds, body.bounds)) {\n                  var collision = SAT.collides(part, body);\n\n                  if (collision.collided) {\n                    collisions.push(collision);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n         * @method ray\n         * @param {body[]} bodies\n         * @param {vector} startPoint\n         * @param {vector} endPoint\n         * @param {number} [rayWidth]\n         * @return {object[]} Collisions\n         */\n\n\n        Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n          rayWidth = rayWidth || 1e-100;\n          var rayAngle = Vector.angle(startPoint, endPoint),\n              rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n              rayX = (endPoint.x + startPoint.x) * 0.5,\n              rayY = (endPoint.y + startPoint.y) * 0.5,\n              ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n              collisions = Query.collides(ray, bodies);\n\n          for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n         * @method region\n         * @param {body[]} bodies\n         * @param {bounds} bounds\n         * @param {bool} [outside=false]\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.region = function (bodies, bounds, outside) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if (overlaps && !outside || !overlaps && outside) result.push(body);\n          }\n\n          return result;\n        };\n        /**\n         * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n         * @method point\n         * @param {body[]} bodies\n         * @param {vector} point\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.point = function (bodies, point) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n              for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                  result.push(body);\n                  break;\n                }\n              }\n            }\n          }\n\n          return result;\n        };\n      })();\n    }, {\n      \"../factory/Bodies\": 23,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"./SAT\": 11\n    }],\n    10: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Resolver` module contains methods for resolving collision pairs.\n      *\n      * @class Resolver\n      */\n      var Resolver = {};\n      module.exports = Resolver;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        Resolver._restingThresh = 4;\n        Resolver._restingThreshTangent = 6;\n        Resolver._positionDampen = 0.9;\n        Resolver._positionWarming = 0.8;\n        Resolver._frictionNormalMultiplier = 5;\n        /**\n         * Prepare pairs for position solving.\n         * @method preSolvePosition\n         * @param {pair[]} pairs\n         */\n\n        Resolver.preSolvePosition = function (pairs) {\n          var i, pair, activeCount; // find total contacts on each body\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n          }\n        };\n        /**\n         * Find a solution for pair positions.\n         * @method solvePosition\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solvePosition = function (pairs, timeScale) {\n          var i,\n              pair,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              bodyBtoA,\n              contactShare,\n              positionImpulse,\n              contactCount = {},\n              tempA = Vector._temp[0],\n              tempB = Vector._temp[1],\n              tempC = Vector._temp[2],\n              tempD = Vector._temp[3]; // find impulses required to resolve penetration\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal; // get current separation between body edges involved in collision\n\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), Vector.add(bodyA.positionImpulse, Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n            pair.separation = Vector.dot(normal, bodyBtoA);\n          }\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n            if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyA.totalContacts;\n              bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n              bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyB.totalContacts;\n              bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n              bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n          }\n        };\n        /**\n         * Apply position resolution.\n         * @method postSolvePosition\n         * @param {body[]} bodies\n         */\n\n\n        Resolver.postSolvePosition = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset contact count\n\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n              // update body geometry\n              for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                Vertices.translate(part.vertices, body.positionImpulse);\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n                part.position.x += body.positionImpulse.x;\n                part.position.y += body.positionImpulse.y;\n              } // move the body without changing velocity\n\n\n              body.positionPrev.x += body.positionImpulse.x;\n              body.positionPrev.y += body.positionImpulse.y;\n\n              if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                // reset cached impulse if the body has velocity along it\n                body.positionImpulse.x = 0;\n                body.positionImpulse.y = 0;\n              } else {\n                // warm the next iteration\n                body.positionImpulse.x *= Resolver._positionWarming;\n                body.positionImpulse.y *= Resolver._positionWarming;\n              }\n            }\n          }\n        };\n        /**\n         * Prepare pairs for velocity solving.\n         * @method preSolveVelocity\n         * @param {pair[]} pairs\n         */\n\n\n        Resolver.preSolveVelocity = function (pairs) {\n          var i,\n              j,\n              pair,\n              contacts,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              tangent,\n              contact,\n              contactVertex,\n              normalImpulse,\n              tangentImpulse,\n              offset,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1];\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent; // resolve each contact\n\n            for (j = 0; j < contacts.length; j++) {\n              contact = contacts[j];\n              contactVertex = contact.vertex;\n              normalImpulse = contact.normalImpulse;\n              tangentImpulse = contact.tangentImpulse;\n\n              if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                // total impulse from contact\n                impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n                impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                  bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                  bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                  bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                  bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                  bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                  bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                }\n              }\n            }\n          }\n        };\n        /**\n         * Find a solution for pair velocities.\n         * @method solveVelocity\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solveVelocity = function (pairs, timeScale) {\n          var timeScaleSquared = timeScale * timeScale,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1],\n              tempB = Vector._temp[2],\n              tempC = Vector._temp[3],\n              tempD = Vector._temp[4],\n              tempE = Vector._temp[5];\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length; // update body velocities\n\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev; // resolve each contact\n\n            for (var j = 0; j < contacts.length; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex,\n                  offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                  offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                  velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                  velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD),\n                  relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                  normalVelocity = Vector.dot(normal, relativeVelocity);\n              var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                  tangentSpeed = Math.abs(tangentVelocity),\n                  tangentVelocityDirection = Common.sign(tangentVelocity); // raw impulses\n\n              var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                  normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier; // coulomb friction\n\n\n              var tangentImpulse = tangentVelocity,\n                  maxFriction = Infinity;\n\n              if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                maxFriction = tangentSpeed;\n                tangentImpulse = Common.clamp(pair.friction * tangentVelocityDirection * timeScaleSquared, -maxFriction, maxFriction);\n              } // modify impulses accounting for mass, inertia and offset\n\n\n              var oAcN = Vector.cross(offsetA, normal),\n                  oBcN = Vector.cross(offsetB, normal),\n                  share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n              normalImpulse *= share;\n              tangentImpulse *= share; // handle high velocity and resting collisions separately\n\n              if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                // high normal velocity so clear cached contact normal impulse\n                contact.normalImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // impulse constraint tends to 0\n                var contactNormalImpulse = contact.normalImpulse;\n                contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n              } // handle high velocity and resting collisions separately\n\n\n              if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                // high tangent velocity so clear cached contact tangent impulse\n                contact.tangentImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                var contactTangentImpulse = contact.tangentImpulse;\n                contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n              } // total impulse from contact\n\n\n              impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n              impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n              }\n\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    11: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n      *\n      * @class SAT\n      */\n      // TODO: true circles and curves\n      var SAT = {};\n      module.exports = SAT;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      (function () {\n        /**\n         * Detect collision between two bodies using the Separating Axis Theorem.\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {collision} previousCollision\n         * @return {collision} collision\n         */\n        SAT.collides = function (bodyA, bodyB, previousCollision) {\n          var overlapAB,\n              overlapBA,\n              minOverlap,\n              collision,\n              canReusePrevCol = false;\n\n          if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed; // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2; // reuse collision object\n\n            collision = previousCollision;\n          } else {\n            collision = {\n              collided: false,\n              bodyA: bodyA,\n              bodyB: bodyB\n            };\n          }\n\n          if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n          } else {\n            // if we can't reuse a result, perform a full SAT test\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n              minOverlap = overlapAB;\n              collision.axisBody = bodyA;\n            } else {\n              minOverlap = overlapBA;\n              collision.axisBody = bodyB;\n            } // important for reuse later\n\n\n            collision.axisNumber = minOverlap.axisNumber;\n          }\n\n          collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n          collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n          collision.collided = true;\n          collision.depth = minOverlap.overlap;\n          collision.parentA = collision.bodyA.parent;\n          collision.parentB = collision.bodyB.parent;\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB; // ensure normal is facing away from bodyA\n\n          if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n              x: minOverlap.axis.x,\n              y: minOverlap.axis.y\n            };\n          } else {\n            collision.normal = {\n              x: -minOverlap.axis.x,\n              y: -minOverlap.axis.y\n            };\n          }\n\n          collision.tangent = Vector.perp(collision.normal);\n          collision.penetration = collision.penetration || {};\n          collision.penetration.x = collision.normal.x * collision.depth;\n          collision.penetration.y = collision.normal.y * collision.depth; // find support points, there is always either exactly one or two\n\n          var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n              supports = []; // find the supports from bodyB that are inside bodyA\n\n\n          if (Vertices.contains(bodyA.vertices, verticesB[0])) supports.push(verticesB[0]);\n          if (Vertices.contains(bodyA.vertices, verticesB[1])) supports.push(verticesB[1]); // find the supports from bodyA that are inside bodyB\n\n          if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n\n            if (Vertices.contains(bodyB.vertices, verticesA[0])) supports.push(verticesA[0]);\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1])) supports.push(verticesA[1]);\n          } // account for the edge case of overlapping but no vertex containment\n\n\n          if (supports.length < 1) supports = [verticesB[0]];\n          collision.supports = supports;\n          return collision;\n        };\n        /**\n         * Find the overlap between two sets of vertices.\n         * @method _overlapAxes\n         * @private\n         * @param {} verticesA\n         * @param {} verticesB\n         * @param {} axes\n         * @return result\n         */\n\n\n        SAT._overlapAxes = function (verticesA, verticesB, axes) {\n          var projectionA = Vector._temp[0],\n              projectionB = Vector._temp[1],\n              result = {\n            overlap: Number.MAX_VALUE\n          },\n              overlap,\n              axis;\n\n          for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n              result.overlap = overlap;\n              return result;\n            }\n\n            if (overlap < result.overlap) {\n              result.overlap = overlap;\n              result.axis = axis;\n              result.axisNumber = i;\n            }\n          }\n\n          return result;\n        };\n        /**\n         * Projects vertices on an axis and returns an interval.\n         * @method _projectToAxis\n         * @private\n         * @param {} projection\n         * @param {} vertices\n         * @param {} axis\n         */\n\n\n        SAT._projectToAxis = function (projection, vertices, axis) {\n          var min = Vector.dot(vertices[0], axis),\n              max = min;\n\n          for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) {\n              max = dot;\n            } else if (dot < min) {\n              min = dot;\n            }\n          }\n\n          projection.min = min;\n          projection.max = max;\n        };\n        /**\n         * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n         * @method _findSupports\n         * @private\n         * @param {} bodyA\n         * @param {} bodyB\n         * @param {} normal\n         * @return [vector]\n         */\n\n\n        SAT._findSupports = function (bodyA, bodyB, normal) {\n          var nearestDistance = Number.MAX_VALUE,\n              vertexToBody = Vector._temp[0],\n              vertices = bodyB.vertices,\n              bodyAPosition = bodyA.position,\n              distance,\n              vertex,\n              vertexA,\n              vertexB; // find closest vertex on bodyB\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n              nearestDistance = distance;\n              vertexA = vertex;\n            }\n          } // find next closest vertex using the two connected to it\n\n\n          var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n          vertex = vertices[prevIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          nearestDistance = -Vector.dot(normal, vertexToBody);\n          vertexB = vertex;\n          var nextIndex = (vertexA.index + 1) % vertices.length;\n          vertex = vertices[nextIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          distance = -Vector.dot(normal, vertexToBody);\n\n          if (distance < nearestDistance) {\n            vertexB = vertex;\n          }\n\n          return [vertexA, vertexB];\n        };\n      })();\n    }, {\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    12: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n      * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n      * The stiffness of constraints can be modified to create springs or elastic.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Constraint\n      */\n      var Constraint = {};\n      module.exports = Constraint;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Axes = _dereq_('../geometry/Axes');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        Constraint._warming = 0.4;\n        Constraint._torqueDampen = 1;\n        Constraint._minLength = 0.000001;\n        /**\n         * Creates a new constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n         * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n         * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {constraint} constraint\n         */\n\n        Constraint.create = function (options) {\n          var constraint = options; // if bodies defined but no points, use body centre\n\n          if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n            x: 0,\n            y: 0\n          };\n          if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n            x: 0,\n            y: 0\n          }; // calculate static length using initial world space points\n\n          var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n              initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n              length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n          constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n          constraint.id = constraint.id || Common.nextId();\n          constraint.label = constraint.label || 'Constraint';\n          constraint.type = 'constraint';\n          constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n          constraint.damping = constraint.damping || 0;\n          constraint.angularStiffness = constraint.angularStiffness || 0;\n          constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n          constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n          constraint.plugin = {}; // render\n\n          var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n          };\n\n          if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n          } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n          }\n\n          constraint.render = Common.extend(render, constraint.render);\n          return constraint;\n        };\n        /**\n         * Prepares for solving by constraint warming.\n         * @private\n         * @method preSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.preSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n          }\n        };\n        /**\n         * Solves all constraints in a list of collisions.\n         * @private\n         * @method solveAll\n         * @param {constraint[]} constraints\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solveAll = function (constraints, timeScale) {\n          // Solve fixed constraints first.\n          for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n                fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (fixedA || fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          } // Solve free constraints last.\n\n\n          for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (!fixedA && !fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n        };\n        /**\n         * Solves a distance constraint with Gauss-Siedel method.\n         * @private\n         * @method solve\n         * @param {constraint} constraint\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solve = function (constraint, timeScale) {\n          var bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB;\n          if (!bodyA && !bodyB) return; // update reference angle\n\n          if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n          } // update reference angle\n\n\n          if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n          }\n\n          var pointAWorld = pointA,\n              pointBWorld = pointB;\n          if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n          if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n          if (!pointAWorld || !pointBWorld) return;\n          var delta = Vector.sub(pointAWorld, pointBWorld),\n              currentLength = Vector.magnitude(delta); // prevent singularity\n\n          if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n          } // solve distance constraint with Gauss-Siedel method\n\n\n          var difference = (currentLength - constraint.length) / currentLength,\n              stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n              force = Vector.mult(delta, difference * stiffness),\n              massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n              inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n              resistanceTotal = massTotal + inertiaTotal,\n              torque,\n              share,\n              normal,\n              normalVelocity,\n              relativeVelocity;\n\n          if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n            relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n          }\n\n          if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n              bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n          }\n\n          if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n              bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n          }\n        };\n        /**\n         * Performs body updates required after solving constraints.\n         * @private\n         * @method postSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.postSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            Sleeping.set(body, false); // update geometry and reset\n\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              Vertices.translate(part.vertices, impulse);\n\n              if (j > 0) {\n                part.position.x += impulse.x;\n                part.position.y += impulse.y;\n              }\n\n              if (impulse.angle !== 0) {\n                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                Axes.rotate(part.axes, impulse.angle);\n\n                if (j > 0) {\n                  Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                }\n              }\n\n              Bounds.update(part.bounds, part.vertices, body.velocity);\n            } // dampen the cached impulse for warming next step\n\n\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n          }\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Constraint\"\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the constraint should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the constraint outline.\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the constraint outline.\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the constraint rendering type. \n         * The possible values are 'line', 'pin', 'spring'.\n         * An appropriate render type will be automatically chosen unless one is given in options.\n         *\n         * @property render.type\n         * @type string\n         * @default 'line'\n         */\n\n        /**\n         * A `Boolean` that defines if the constraint's anchor points should be rendered.\n         *\n         * @property render.anchors\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * The first possible `Body` that this constraint is attached to.\n         *\n         * @property bodyA\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The second possible `Body` that this constraint is attached to.\n         *\n         * @property bodyB\n         * @type body\n         * @default null\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n         *\n         * @property pointA\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n         *\n         * @property pointB\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n         * A value of `1` means the constraint should be very stiff.\n         * A value of `0.2` means the constraint acts like a soft spring.\n         *\n         * @property stiffness\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the damping of the constraint, \n         * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n         * Damping will only be apparent when the constraint also has a very low `stiffness`.\n         * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n         * A value of `0` means the constraint will apply no damping.\n         *\n         * @property damping\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that specifies the target resting length of the constraint. \n         * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n         *\n         * @property length\n         * @type number\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    13: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n      * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class MouseConstraint\n      */\n      var MouseConstraint = {};\n      module.exports = MouseConstraint;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Mouse = _dereq_('../core/Mouse');\n\n      var Events = _dereq_('../core/Events');\n\n      var Detector = _dereq_('../collision/Detector');\n\n      var Constraint = _dereq_('./Constraint');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        /**\n         * Creates a new mouse constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {engine} engine\n         * @param {} options\n         * @return {MouseConstraint} A new MouseConstraint\n         */\n        MouseConstraint.create = function (engine, options) {\n          var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n          if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n              mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n              mouse = Mouse.create(options.element);\n            } else {\n              mouse = Mouse.create();\n              Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n          }\n\n          var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: {\n              x: 0,\n              y: 0\n            },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n              strokeStyle: '#90EE90',\n              lineWidth: 3\n            }\n          });\n          var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            }\n          };\n          var mouseConstraint = Common.extend(defaults, options);\n          Events.on(engine, 'beforeUpdate', function () {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n\n            MouseConstraint._triggerEvents(mouseConstraint);\n          });\n          return mouseConstraint;\n        };\n        /**\n         * Updates the given mouse constraint.\n         * @private\n         * @method update\n         * @param {MouseConstraint} mouseConstraint\n         * @param {body[]} bodies\n         */\n\n\n        MouseConstraint.update = function (mouseConstraint, bodies) {\n          var mouse = mouseConstraint.mouse,\n              constraint = mouseConstraint.constraint,\n              body = mouseConstraint.body;\n\n          if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n              for (var i = 0; i < bodies.length; i++) {\n                body = bodies[i];\n\n                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                  for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Vertices.contains(part.vertices, mouse.position)) {\n                      constraint.pointA = mouse.position;\n                      constraint.bodyB = mouseConstraint.body = body;\n                      constraint.pointB = {\n                        x: mouse.position.x - body.position.x,\n                        y: mouse.position.y - body.position.y\n                      };\n                      constraint.angleB = body.angle;\n                      Sleeping.set(body, false);\n                      Events.trigger(mouseConstraint, 'startdrag', {\n                        mouse: mouse,\n                        body: body\n                      });\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              Sleeping.set(constraint.bodyB, false);\n              constraint.pointA = mouse.position;\n            }\n          } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n            if (body) Events.trigger(mouseConstraint, 'enddrag', {\n              mouse: mouse,\n              body: body\n            });\n          }\n        };\n        /**\n         * Triggers mouse constraint events.\n         * @method _triggerEvents\n         * @private\n         * @param {mouse} mouseConstraint\n         */\n\n\n        MouseConstraint._triggerEvents = function (mouseConstraint) {\n          var mouse = mouseConstraint.mouse,\n              mouseEvents = mouse.sourceEvents;\n          if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n            mouse: mouse\n          });\n          if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n            mouse: mouse\n          });\n          if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n            mouse: mouse\n          }); // reset the mouse state ready for the next step\n\n          Mouse.clearSourceEvents(mouse);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when the mouse has moved (or a touch moves) during the last step\n        *\n        * @event mousemove\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is down (or a touch has started) during the last step\n        *\n        * @event mousedown\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is up (or a touch has ended) during the last step\n        *\n        * @event mouseup\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user starts dragging a body\n        *\n        * @event startdrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user ends dragging a body\n        *\n        * @event enddrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body that has stopped being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n         *\n         * @property mouse\n         * @type mouse\n         * @default mouse\n         */\n\n        /**\n         * The `Body` that is currently being moved by the user, or `null` if no body.\n         *\n         * @property body\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The `Constraint` object that is used to move the body during interaction.\n         *\n         * @property constraint\n         * @type constraint\n         */\n\n        /**\n         * An `Object` that specifies the collision filter properties.\n         * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Detector\": 5,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vertices\": 29,\n      \"./Constraint\": 12\n    }],\n    14: [function (_dereq_, module, exports) {\n      (function (global) {\n        /**\n        * The `Matter.Common` module contains utility functions that are common to all modules.\n        *\n        * @class Common\n        */\n        var Common = {};\n        module.exports = Common;\n\n        (function () {\n          Common._nextId = 0;\n          Common._seed = 0;\n          Common._nowStartTime = +new Date();\n          /**\n           * Extends the object in the first argument using the object in the second argument.\n           * @method extend\n           * @param {} obj\n           * @param {boolean} deep\n           * @return {} obj extended\n           */\n\n          Common.extend = function (obj, deep) {\n            var argsStart, args, deepClone;\n\n            if (typeof deep === 'boolean') {\n              argsStart = 2;\n              deepClone = deep;\n            } else {\n              argsStart = 1;\n              deepClone = true;\n            }\n\n            for (var i = argsStart; i < arguments.length; i++) {\n              var source = arguments[i];\n\n              if (source) {\n                for (var prop in source) {\n                  if (deepClone && source[prop] && source[prop].constructor === Object) {\n                    if (!obj[prop] || obj[prop].constructor === Object) {\n                      obj[prop] = obj[prop] || {};\n                      Common.extend(obj[prop], deepClone, source[prop]);\n                    } else {\n                      obj[prop] = source[prop];\n                    }\n                  } else {\n                    obj[prop] = source[prop];\n                  }\n                }\n              }\n            }\n\n            return obj;\n          };\n          /**\n           * Creates a new clone of the object, if deep is true references will also be cloned.\n           * @method clone\n           * @param {} obj\n           * @param {bool} deep\n           * @return {} obj cloned\n           */\n\n\n          Common.clone = function (obj, deep) {\n            return Common.extend({}, deep, obj);\n          };\n          /**\n           * Returns the list of keys for the given object.\n           * @method keys\n           * @param {} obj\n           * @return {string[]} keys\n           */\n\n\n          Common.keys = function (obj) {\n            if (Object.keys) return Object.keys(obj); // avoid hasOwnProperty for performance\n\n            var keys = [];\n\n            for (var key in obj) {\n              keys.push(key);\n            }\n\n            return keys;\n          };\n          /**\n           * Returns the list of values for the given object.\n           * @method values\n           * @param {} obj\n           * @return {array} Array of the objects property values\n           */\n\n\n          Common.values = function (obj) {\n            var values = [];\n\n            if (Object.keys) {\n              var keys = Object.keys(obj);\n\n              for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n              }\n\n              return values;\n            } // avoid hasOwnProperty for performance\n\n\n            for (var key in obj) {\n              values.push(obj[key]);\n            }\n\n            return values;\n          };\n          /**\n           * Gets a value from `base` relative to the `path` string.\n           * @method get\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} The object at the given path\n           */\n\n\n          Common.get = function (obj, path, begin, end) {\n            path = path.split('.').slice(begin, end);\n\n            for (var i = 0; i < path.length; i += 1) {\n              obj = obj[path[i]];\n            }\n\n            return obj;\n          };\n          /**\n           * Sets a value on `base` relative to the given `path` string.\n           * @method set\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {} val The value to set\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} Pass through `val` for chaining\n           */\n\n\n          Common.set = function (obj, path, val, begin, end) {\n            var parts = path.split('.').slice(begin, end);\n            Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n            return val;\n          };\n          /**\n           * Shuffles the given array in-place.\n           * The function uses a seeded random generator.\n           * @method shuffle\n           * @param {array} array\n           * @return {array} array shuffled randomly\n           */\n\n\n          Common.shuffle = function (array) {\n            for (var i = array.length - 1; i > 0; i--) {\n              var j = Math.floor(Common.random() * (i + 1));\n              var temp = array[i];\n              array[i] = array[j];\n              array[j] = temp;\n            }\n\n            return array;\n          };\n          /**\n           * Randomly chooses a value from a list with equal probability.\n           * The function uses a seeded random generator.\n           * @method choose\n           * @param {array} choices\n           * @return {object} A random choice object from the array\n           */\n\n\n          Common.choose = function (choices) {\n            return choices[Math.floor(Common.random() * choices.length)];\n          };\n          /**\n           * Returns true if the object is a HTMLElement, otherwise false.\n           * @method isElement\n           * @param {object} obj\n           * @return {boolean} True if the object is a HTMLElement, otherwise false\n           */\n\n\n          Common.isElement = function (obj) {\n            if (typeof HTMLElement !== 'undefined') {\n              return obj instanceof HTMLElement;\n            }\n\n            return !!(obj && obj.nodeType && obj.nodeName);\n          };\n          /**\n           * Returns true if the object is an array.\n           * @method isArray\n           * @param {object} obj\n           * @return {boolean} True if the object is an array, otherwise false\n           */\n\n\n          Common.isArray = function (obj) {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n          };\n          /**\n           * Returns true if the object is a function.\n           * @method isFunction\n           * @param {object} obj\n           * @return {boolean} True if the object is a function, otherwise false\n           */\n\n\n          Common.isFunction = function (obj) {\n            return typeof obj === \"function\";\n          };\n          /**\n           * Returns true if the object is a plain object.\n           * @method isPlainObject\n           * @param {object} obj\n           * @return {boolean} True if the object is a plain object, otherwise false\n           */\n\n\n          Common.isPlainObject = function (obj) {\n            return typeof obj === 'object' && obj.constructor === Object;\n          };\n          /**\n           * Returns true if the object is a string.\n           * @method isString\n           * @param {object} obj\n           * @return {boolean} True if the object is a string, otherwise false\n           */\n\n\n          Common.isString = function (obj) {\n            return toString.call(obj) === '[object String]';\n          };\n          /**\n           * Returns the given value clamped between a minimum and maximum value.\n           * @method clamp\n           * @param {number} value\n           * @param {number} min\n           * @param {number} max\n           * @return {number} The value clamped between min and max inclusive\n           */\n\n\n          Common.clamp = function (value, min, max) {\n            if (value < min) return min;\n            if (value > max) return max;\n            return value;\n          };\n          /**\n           * Returns the sign of the given value.\n           * @method sign\n           * @param {number} value\n           * @return {number} -1 if negative, +1 if 0 or positive\n           */\n\n\n          Common.sign = function (value) {\n            return value < 0 ? -1 : 1;\n          };\n          /**\n           * Returns the current timestamp since the time origin (e.g. from page load).\n           * The result will be high-resolution including decimal places if available.\n           * @method now\n           * @return {number} the current timestamp\n           */\n\n\n          Common.now = function () {\n            if (window.performance) {\n              if (window.performance.now) {\n                return window.performance.now();\n              } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n              }\n            }\n\n            return new Date() - Common._nowStartTime;\n          };\n          /**\n           * Returns a random value between a minimum and a maximum value inclusive.\n           * The function uses a seeded random generator.\n           * @method random\n           * @param {number} min\n           * @param {number} max\n           * @return {number} A random number between min and max inclusive\n           */\n\n\n          Common.random = function (min, max) {\n            min = typeof min !== \"undefined\" ? min : 0;\n            max = typeof max !== \"undefined\" ? max : 1;\n            return min + _seededRandom() * (max - min);\n          };\n\n          var _seededRandom = function _seededRandom() {\n            // https://en.wikipedia.org/wiki/Linear_congruential_generator\n            Common._seed = (Common._seed * 9301 + 49297) % 233280;\n            return Common._seed / 233280;\n          };\n          /**\n           * Converts a CSS hex colour string into an integer.\n           * @method colorToNumber\n           * @param {string} colorString\n           * @return {number} An integer representing the CSS hex string\n           */\n\n\n          Common.colorToNumber = function (colorString) {\n            colorString = colorString.replace('#', '');\n\n            if (colorString.length == 3) {\n              colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n            }\n\n            return parseInt(colorString, 16);\n          };\n          /**\n           * The console logging level to use, where each level includes all levels above and excludes the levels below.\n           * The default level is 'debug' which shows all console messages.  \n           *\n           * Possible level values are:\n           * - 0 = None\n           * - 1 = Debug\n           * - 2 = Info\n           * - 3 = Warn\n           * - 4 = Error\n           * @property Common.logLevel\n           * @type {Number}\n           * @default 1\n           */\n\n\n          Common.logLevel = 1;\n          /**\n           * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method log\n           * @param ...objs {} The objects to log.\n           */\n\n          Common.log = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method info\n           * @param ...objs {} The objects to log.\n           */\n\n\n          Common.info = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n              console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method warn\n           * @param ...objs {} The objects to log.\n           */\n\n\n          Common.warn = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Returns the next unique sequential ID.\n           * @method nextId\n           * @return {Number} Unique sequential ID\n           */\n\n\n          Common.nextId = function () {\n            return Common._nextId++;\n          };\n          /**\n           * A cross browser compatible indexOf implementation.\n           * @method indexOf\n           * @param {array} haystack\n           * @param {object} needle\n           * @return {number} The position of needle in haystack, otherwise -1.\n           */\n\n\n          Common.indexOf = function (haystack, needle) {\n            if (haystack.indexOf) return haystack.indexOf(needle);\n\n            for (var i = 0; i < haystack.length; i++) {\n              if (haystack[i] === needle) return i;\n            }\n\n            return -1;\n          };\n          /**\n           * A cross browser compatible array map implementation.\n           * @method map\n           * @param {array} list\n           * @param {function} func\n           * @return {array} Values from list transformed by func.\n           */\n\n\n          Common.map = function (list, func) {\n            if (list.map) {\n              return list.map(func);\n            }\n\n            var mapped = [];\n\n            for (var i = 0; i < list.length; i += 1) {\n              mapped.push(func(list[i]));\n            }\n\n            return mapped;\n          };\n          /**\n           * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n           * Circular dependencies are allowed.\n           * @method topologicalSort\n           * @param {object} graph\n           * @return {array} Partially ordered set of vertices in topological order.\n           */\n\n\n          Common.topologicalSort = function (graph) {\n            // https://github.com/mgechev/javascript-algorithms\n            // Copyright (c) Minko Gechev (MIT license)\n            // Modifications: tidy formatting and naming\n            var result = [],\n                visited = [],\n                temp = [];\n\n            for (var node in graph) {\n              if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n              }\n            }\n\n            return result;\n          };\n\n          Common._topologicalSort = function (node, visited, temp, graph, result) {\n            var neighbors = graph[node] || [];\n            temp[node] = true;\n\n            for (var i = 0; i < neighbors.length; i += 1) {\n              var neighbor = neighbors[i];\n\n              if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n              }\n\n              if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n              }\n            }\n\n            temp[node] = false;\n            visited[node] = true;\n            result.push(node);\n          };\n          /**\n           * Takes _n_ functions as arguments and returns a new function that calls them in order.\n           * The arguments applied when calling the new function will also be applied to every function passed.\n           * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n           * Therefore if a passed function does not return a value, the previously returned value is maintained.\n           * After all passed functions have been called the new function returns the last returned value (if any).\n           * If any of the passed functions are a chain, then the chain will be flattened.\n           * @method chain\n           * @param ...funcs {function} The functions to chain.\n           * @return {function} A new function that calls the passed functions in order.\n           */\n\n\n          Common.chain = function () {\n            var funcs = [];\n\n            for (var i = 0; i < arguments.length; i += 1) {\n              var func = arguments[i];\n\n              if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n              } else {\n                funcs.push(func);\n              }\n            }\n\n            var chain = function chain() {\n              // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n              var lastResult,\n                  args = new Array(arguments.length);\n\n              for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n              }\n\n              for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                  lastResult = result;\n                }\n              }\n\n              return lastResult;\n            };\n\n            chain._chained = funcs;\n            return chain;\n          };\n          /**\n           * Chains a function to excute before the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathBefore\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain before the original\n           * @return {function} The chained function that replaced the original\n           */\n\n\n          Common.chainPathBefore = function (base, path, func) {\n            return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n          };\n          /**\n           * Chains a function to excute after the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathAfter\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain after the original\n           * @return {function} The chained function that replaced the original\n           */\n\n\n          Common.chainPathAfter = function (base, path, func) {\n            return Common.set(base, path, Common.chain(Common.get(base, path), func));\n          };\n          /**\n           * Used to require external libraries outside of the bundle.\n           * It first looks for the `globalName` on the environment's global namespace.\n           * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n           * @private\n           * @method _requireGlobal\n           * @param {string} globalName The global module name\n           * @param {string} moduleName The fallback CommonJS module name\n           * @return {} The loaded module\n           */\n\n\n          Common._requireGlobal = function (globalName, moduleName) {\n            var obj = typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null;\n            return obj || _dereq_(moduleName);\n          };\n        })();\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    15: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Engine` module contains methods for creating and manipulating engines.\n      * An engine is a controller that manages updating the simulation of the world.\n      * See `Matter.Runner` for an optional game loop utility.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Engine\n      */\n      var Engine = {};\n      module.exports = Engine;\n\n      var World = _dereq_('../body/World');\n\n      var Sleeping = _dereq_('./Sleeping');\n\n      var Resolver = _dereq_('../collision/Resolver');\n\n      var Render = _dereq_('../render/Render');\n\n      var Pairs = _dereq_('../collision/Pairs');\n\n      var Metrics = _dereq_('./Metrics');\n\n      var Grid = _dereq_('../collision/Grid');\n\n      var Events = _dereq_('./Events');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('./Common');\n\n      var Body = _dereq_('../body/Body');\n\n      (function () {\n        /**\n         * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {engine} engine\n         */\n        Engine.create = function (element, options) {\n          // options may be passed as the first (and only) argument\n          options = Common.isElement(element) ? options : element;\n          element = Common.isElement(element) ? element : null;\n          options = options || {};\n\n          if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n          }\n\n          var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n              timestamp: 0,\n              timeScale: 1\n            },\n            broadphase: {\n              controller: Grid\n            }\n          };\n          var engine = Common.extend(defaults, options); // @deprecated\n\n          if (element || engine.render) {\n            var renderDefaults = {\n              element: element,\n              controller: Render\n            };\n            engine.render = Common.extend(renderDefaults, engine.render);\n          } // @deprecated\n\n\n          if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n          } // @deprecated\n\n\n          if (engine.render) {\n            engine.render.engine = engine;\n          }\n\n          engine.world = options.world || World.create(engine.world);\n          engine.pairs = Pairs.create();\n          engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n          engine.metrics = engine.metrics || {\n            extended: false\n          };\n          return engine;\n        };\n        /**\n         * Moves the simulation forward in time by `delta` ms.\n         * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n         * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n         * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n         * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n         * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n         *\n         * Triggers `beforeUpdate` and `afterUpdate` events.\n         * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n         * @method update\n         * @param {engine} engine\n         * @param {number} [delta=16.666]\n         * @param {number} [correction=1]\n         */\n\n\n        Engine.update = function (engine, delta, correction) {\n          delta = delta || 1000 / 60;\n          correction = correction || 1;\n          var world = engine.world,\n              timing = engine.timing,\n              broadphase = engine.broadphase,\n              broadphasePairs = [],\n              i; // increment timestamp\n\n          timing.timestamp += delta * timing.timeScale; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(engine, 'beforeUpdate', event); // get lists of all bodies and constraints, no matter what composites they are in\n\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world); // if sleeping enabled, call the sleeping controller\n\n          if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale); // applies gravity to all bodies\n\n          Engine._bodiesApplyGravity(allBodies, world.gravity); // update all body position and rotation by integration\n\n\n          Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds); // update all constraints (first pass)\n\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // broadphase pass: find potential collision pairs\n\n          if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified) broadphase.controller.clear(broadphase); // update the grid buckets based on current bodies\n\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n          } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n          } // clear all composite modified flags\n\n\n          if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n          } // narrowphase pass: find actual collisions, then create or update collision pairs\n\n\n          var collisions = broadphase.detector(broadphasePairs, engine); // update collision pairs\n\n          var pairs = engine.pairs,\n              timestamp = timing.timestamp;\n          Pairs.update(pairs, collisions, timestamp);\n          Pairs.removeOld(pairs, timestamp); // wake up bodies involved in collisions\n\n          if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale); // trigger collision events\n\n          if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart\n          }); // iteratively resolve position between collisions\n\n          Resolver.preSolvePosition(pairs.list);\n\n          for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n          }\n\n          Resolver.postSolvePosition(allBodies); // update all constraints (second pass)\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // iteratively resolve velocity between collisions\n\n          Resolver.preSolveVelocity(pairs.list);\n\n          for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n          } // trigger collision events\n\n\n          if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive\n          });\n          if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd\n          }); // clear force buffers\n\n          Engine._bodiesClearForces(allBodies);\n\n          Events.trigger(engine, 'afterUpdate', event);\n          return engine;\n        };\n        /**\n         * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n         * @method merge\n         * @param {engine} engineA\n         * @param {engine} engineB\n         */\n\n\n        Engine.merge = function (engineA, engineB) {\n          Common.extend(engineA, engineB);\n\n          if (engineB.world) {\n            engineA.world = engineB.world;\n            Engine.clear(engineA);\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              Sleeping.set(body, false);\n              body.id = Common.nextId();\n            }\n          }\n        };\n        /**\n         * Clears the engine including the world, pairs and broadphase.\n         * @method clear\n         * @param {engine} engine\n         */\n\n\n        Engine.clear = function (engine) {\n          var world = engine.world;\n          Pairs.clear(engine.pairs);\n          var broadphase = engine.broadphase;\n\n          if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n          }\n        };\n        /**\n         * Zeroes the `body.force` and `body.torque` force buffers.\n         * @method _bodiesClearForces\n         * @private\n         * @param {body[]} bodies\n         */\n\n\n        Engine._bodiesClearForces = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset force buffers\n\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n          }\n        };\n        /**\n         * Applys a mass dependant force to all given bodies.\n         * @method _bodiesApplyGravity\n         * @private\n         * @param {body[]} bodies\n         * @param {vector} gravity\n         */\n\n\n        Engine._bodiesApplyGravity = function (bodies, gravity) {\n          var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n          if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n            return;\n          }\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue; // apply gravity\n\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n          }\n        };\n        /**\n         * Applys `Body.update` to all given `bodies`.\n         * @method _bodiesUpdate\n         * @private\n         * @param {body[]} bodies\n         * @param {number} deltaTime \n         * The amount of time elapsed between updates\n         * @param {number} timeScale\n         * @param {number} correction \n         * The Verlet correction factor (deltaTime / lastDeltaTime)\n         * @param {bounds} worldBounds\n         */\n\n\n        Engine._bodiesUpdate = function (bodies, deltaTime, timeScale, correction, worldBounds) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n            Body.update(body, deltaTime, timeScale, correction);\n          }\n        };\n        /**\n         * An alias for `Runner.run`, see `Matter.Runner` for more information.\n         * @method run\n         * @param {engine} engine\n         */\n\n        /**\n        * Fired just before an update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update and all collision events\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n        *\n        * @event collisionStart\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n        *\n        * @event collisionActive\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n        *\n        * @event collisionEnd\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` that specifies the number of position iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property positionIterations\n         * @type number\n         * @default 6\n         */\n\n        /**\n         * An integer `Number` that specifies the number of velocity iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property velocityIterations\n         * @type number\n         * @default 4\n         */\n\n        /**\n         * An integer `Number` that specifies the number of constraint iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         * The default value of `2` is usually very adequate.\n         *\n         * @property constraintIterations\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n         * Sleeping can improve stability and performance, but often at the expense of accuracy.\n         *\n         * @property enableSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * An `Object` containing properties regarding the timing systems of the engine. \n         *\n         * @property timing\n         * @type object\n         */\n\n        /**\n         * A `Number` that specifies the global scaling factor of time for all bodies.\n         * A value of `0` freezes the simulation.\n         * A value of `0.1` gives a slow-motion effect.\n         * A value of `1.2` gives a speed-up effect.\n         *\n         * @property timing.timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n         * It is incremented on every `Engine.update` by the given `delta` argument. \n         *\n         * @property timing.timestamp\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n         * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n         *\n         * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n         * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n         *\n         * @property render\n         * @type render\n         * @deprecated see Demo.js for an example of creating a renderer\n         * @default a Matter.Render instance\n         */\n\n        /**\n         * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n         *\n         * @property broadphase\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * A `World` composite object that will contain all simulated bodies and constraints.\n         *\n         * @property world\n         * @type world\n         * @default a Matter.World instance\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Grid\": 6,\n      \"../collision/Pairs\": 8,\n      \"../collision/Resolver\": 10,\n      \"../constraint/Constraint\": 12,\n      \"../render/Render\": 31,\n      \"./Common\": 14,\n      \"./Events\": 16,\n      \"./Metrics\": 18,\n      \"./Sleeping\": 22\n    }],\n    16: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Events\n      */\n      var Events = {};\n      module.exports = Events;\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        /**\n         * Subscribes a callback function to the given object's `eventName`.\n         * @method on\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.on = function (object, eventNames, callback) {\n          var names = eventNames.split(' '),\n              name;\n\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n          }\n\n          return callback;\n        };\n        /**\n         * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n         * @method off\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n\n\n        Events.off = function (object, eventNames, callback) {\n          if (!eventNames) {\n            object.events = {};\n            return;\n          } // handle Events.off(object, callback)\n\n\n          if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n          }\n\n          var names = eventNames.split(' ');\n\n          for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n              for (var j = 0; j < callbacks.length; j++) {\n                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n              }\n            }\n\n            object.events[names[i]] = newCallbacks;\n          }\n        };\n        /**\n         * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n         * @method trigger\n         * @param {} object\n         * @param {string} eventNames\n         * @param {} event\n         */\n\n\n        Events.trigger = function (object, eventNames, event) {\n          var names, name, callbacks, eventClone;\n\n          if (object.events) {\n            if (!event) event = {};\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n              name = names[i];\n              callbacks = object.events[name];\n\n              if (callbacks) {\n                eventClone = Common.clone(event, false);\n                eventClone.name = name;\n                eventClone.source = object;\n\n                for (var j = 0; j < callbacks.length; j++) {\n                  callbacks[j].apply(object, [eventClone]);\n                }\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    17: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n      *\n      * @class Matter\n      */\n      var Matter = {};\n      module.exports = Matter;\n\n      var Plugin = _dereq_('./Plugin');\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        /**\n         * The library name.\n         * @property name\n         * @readOnly\n         * @type {String}\n         */\n        Matter.name = 'matter-js';\n        /**\n         * The library version.\n         * @property version\n         * @readOnly\n         * @type {String}\n         */\n\n        Matter.version = '0.14.2';\n        /**\n         * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n         * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n         * @property uses\n         * @type {Array}\n         */\n\n        Matter.uses = [];\n        /**\n         * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n         * @property used\n         * @readOnly\n         * @type {Array}\n         */\n\n        Matter.used = [];\n        /**\n         * Installs the given plugins on the `Matter` namespace.\n         * This is a short-hand for `Plugin.use`, see it for more information.\n         * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n         * Avoid calling this function multiple times unless you intend to manually control installation order.\n         * @method use\n         * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n         */\n\n        Matter.use = function () {\n          Plugin.use(Matter, Array.prototype.slice.call(arguments));\n        };\n        /**\n         * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method before\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain before the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Matter.before = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathBefore(Matter, path, func);\n        };\n        /**\n         * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method after\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain after the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Matter.after = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathAfter(Matter, path, func);\n        };\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Plugin\": 20\n    }],\n    18: [function (_dereq_, module, exports) {}, {\n      \"../body/Composite\": 2,\n      \"./Common\": 14\n    }],\n    19: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n      *\n      * @class Mouse\n      */\n      var Mouse = {};\n      module.exports = Mouse;\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a mouse input.\n         * @method create\n         * @param {HTMLElement} element\n         * @return {mouse} A new mouse\n         */\n        Mouse.create = function (element) {\n          var mouse = {};\n\n          if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n          }\n\n          mouse.element = element || document.body;\n          mouse.absolute = {\n            x: 0,\n            y: 0\n          };\n          mouse.position = {\n            x: 0,\n            y: 0\n          };\n          mouse.mousedownPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.mouseupPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.offset = {\n            x: 0,\n            y: 0\n          };\n          mouse.scale = {\n            x: 1,\n            y: 1\n          };\n          mouse.wheelDelta = 0;\n          mouse.button = -1;\n          mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n          mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n          };\n\n          mouse.mousemove = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n          };\n\n          mouse.mousedown = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            } else {\n              mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n          };\n\n          mouse.mouseup = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n          };\n\n          mouse.mousewheel = function (event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n          };\n\n          Mouse.setElement(mouse, mouse.element);\n          return mouse;\n        };\n        /**\n         * Sets the element the mouse is bound to (and relative to).\n         * @method setElement\n         * @param {mouse} mouse\n         * @param {HTMLElement} element\n         */\n\n\n        Mouse.setElement = function (mouse, element) {\n          mouse.element = element;\n          element.addEventListener('mousemove', mouse.mousemove);\n          element.addEventListener('mousedown', mouse.mousedown);\n          element.addEventListener('mouseup', mouse.mouseup);\n          element.addEventListener('mousewheel', mouse.mousewheel);\n          element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n          element.addEventListener('touchmove', mouse.mousemove);\n          element.addEventListener('touchstart', mouse.mousedown);\n          element.addEventListener('touchend', mouse.mouseup);\n        };\n        /**\n         * Clears all captured source events.\n         * @method clearSourceEvents\n         * @param {mouse} mouse\n         */\n\n\n        Mouse.clearSourceEvents = function (mouse) {\n          mouse.sourceEvents.mousemove = null;\n          mouse.sourceEvents.mousedown = null;\n          mouse.sourceEvents.mouseup = null;\n          mouse.sourceEvents.mousewheel = null;\n          mouse.wheelDelta = 0;\n        };\n        /**\n         * Sets the mouse position offset.\n         * @method setOffset\n         * @param {mouse} mouse\n         * @param {vector} offset\n         */\n\n\n        Mouse.setOffset = function (mouse, offset) {\n          mouse.offset.x = offset.x;\n          mouse.offset.y = offset.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Sets the mouse position scale.\n         * @method setScale\n         * @param {mouse} mouse\n         * @param {vector} scale\n         */\n\n\n        Mouse.setScale = function (mouse, scale) {\n          mouse.scale.x = scale.x;\n          mouse.scale.y = scale.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Gets the mouse position relative to an element given a screen pixel ratio.\n         * @method _getRelativeMousePosition\n         * @private\n         * @param {} event\n         * @param {} element\n         * @param {number} pixelRatio\n         * @return {}\n         */\n\n\n        Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n          var elementBounds = element.getBoundingClientRect(),\n              rootNode = document.documentElement || document.body.parentNode || document.body,\n              scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n              scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n              touches = event.changedTouches,\n              x,\n              y;\n\n          if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n          } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n          }\n\n          return {\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n          };\n        };\n      })();\n    }, {\n      \"../core/Common\": 14\n    }],\n    20: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n      *\n      * @class Plugin\n      */\n      var Plugin = {};\n      module.exports = Plugin;\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        Plugin._registry = {};\n        /**\n         * Registers a plugin object so it can be resolved later by name.\n         * @method register\n         * @param plugin {} The plugin to register.\n         * @return {object} The plugin.\n         */\n\n        Plugin.register = function (plugin) {\n          if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n          }\n\n          if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n              Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n              Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n          } else {\n            Plugin._registry[plugin.name] = plugin;\n          }\n\n          return plugin;\n        };\n        /**\n         * Resolves a dependency to a plugin object from the registry if it exists. \n         * The `dependency` may contain a version, but only the name matters when resolving.\n         * @method resolve\n         * @param dependency {string} The dependency.\n         * @return {object} The plugin if resolved, otherwise `undefined`.\n         */\n\n\n        Plugin.resolve = function (dependency) {\n          return Plugin._registry[Plugin.dependencyParse(dependency).name];\n        };\n        /**\n         * Returns a pretty printed plugin name and version.\n         * @method toString\n         * @param plugin {} The plugin.\n         * @return {string} Pretty printed plugin name and version.\n         */\n\n\n        Plugin.toString = function (plugin) {\n          return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n        };\n        /**\n         * Returns `true` if the object meets the minimum standard to be considered a plugin.\n         * This means it must define the following properties:\n         * - `name`\n         * - `version`\n         * - `install`\n         * @method isPlugin\n         * @param obj {} The obj to test.\n         * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n         */\n\n\n        Plugin.isPlugin = function (obj) {\n          return obj && obj.name && obj.version && obj.install;\n        };\n        /**\n         * Returns `true` if a plugin with the given `name` been installed on `module`.\n         * @method isUsed\n         * @param module {} The module.\n         * @param name {string} The plugin name.\n         * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n         */\n\n\n        Plugin.isUsed = function (module, name) {\n          return module.used.indexOf(name) > -1;\n        };\n        /**\n         * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n         * If `plugin.for` is not specified then it is assumed to be applicable.\n         * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n         * @method isFor\n         * @param plugin {} The plugin.\n         * @param module {} The module.\n         * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n         */\n\n\n        Plugin.isFor = function (plugin, module) {\n          var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n          return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n        };\n        /**\n         * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n         * For installing plugins on `Matter` see the convenience function `Matter.use`.\n         * Plugins may be specified either by their name or a reference to the plugin object.\n         * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n         * Order is important, a topological sort is performed to find the best resulting order of installation.\n         * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n         * This function logs the resulting status of each dependency in the console, along with any warnings.\n         * - A green tick ✅ indicates a dependency was resolved and installed.\n         * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n         * - A red cross ❌ indicates a dependency could not be resolved.\n         * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n         * @method use\n         * @param module {} The module install plugins on.\n         * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n         */\n\n\n        Plugin.use = function (module, plugins) {\n          module.uses = (module.uses || []).concat(plugins || []);\n\n          if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n          }\n\n          var dependencies = Plugin.dependencies(module),\n              sortedDependencies = Common.topologicalSort(dependencies),\n              status = [];\n\n          for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n              continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n              status.push('❌ ' + sortedDependencies[i]);\n              continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n              continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n              plugin._warned = true;\n            }\n\n            if (plugin.install) {\n              plugin.install(module);\n            } else {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n              plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n              status.push('🔶 ' + Plugin.toString(plugin));\n              delete plugin._warned;\n            } else {\n              status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n          }\n\n          if (status.length > 0) {\n            Common.info(status.join('  '));\n          }\n        };\n        /**\n         * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n         * @method dependencies\n         * @param module {} The module.\n         * @return {object} A dependency graph.\n         */\n\n\n        Plugin.dependencies = function (module, tracked) {\n          var parsedBase = Plugin.dependencyParse(module),\n              name = parsedBase.name;\n          tracked = tracked || {};\n\n          if (name in tracked) {\n            return;\n          }\n\n          module = Plugin.resolve(module) || module;\n          tracked[name] = Common.map(module.uses || [], function (dependency) {\n            if (Plugin.isPlugin(dependency)) {\n              Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n              resolved._warned = true;\n              module._warned = true;\n            } else if (!resolved) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n              module._warned = true;\n            }\n\n            return parsed.name;\n          });\n\n          for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n          }\n\n          return tracked;\n        };\n        /**\n         * Parses a dependency string into its components.\n         * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * This function can also handle dependencies that are already resolved (e.g. a module object).\n         * @method dependencyParse\n         * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n         * @return {object} The dependency parsed into its components.\n         */\n\n\n        Plugin.dependencyParse = function (dependency) {\n          if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n              Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n              name: dependency.split('@')[0],\n              range: dependency.split('@')[1] || '*'\n            };\n          }\n\n          return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n          };\n        };\n        /**\n         * Parses a version string into its components.  \n         * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n         * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n         * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n         * Only the following range types are supported:\n         * - Tilde ranges e.g. `~1.2.3`\n         * - Caret ranges e.g. `^1.2.3`\n         * - Exact version e.g. `1.2.3`\n         * - Any version `*`\n         * @method versionParse\n         * @param range {string} The version string.\n         * @return {object} The version range parsed into its components.\n         */\n\n\n        Plugin.versionParse = function (range) {\n          var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n          if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n          }\n\n          var identifiers = range.split('-');\n          range = identifiers[0];\n          var isRange = isNaN(Number(range[0])),\n              version = isRange ? range.substr(1) : range,\n              parts = Common.map(version.split('.'), function (part) {\n            return Number(part);\n          });\n          return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n          };\n        };\n        /**\n         * Returns `true` if `version` satisfies the given `range`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n         * @method versionSatisfies\n         * @param version {string} The version string.\n         * @param range {string} The range string.\n         * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n         */\n\n\n        Plugin.versionSatisfies = function (version, range) {\n          range = range || '*';\n          var rangeParsed = Plugin.versionParse(range),\n              rangeParts = rangeParsed.parts,\n              versionParsed = Plugin.versionParse(version),\n              versionParts = versionParsed.parts;\n\n          if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n              return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n              return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n              if (rangeParts[0] > 0) {\n                return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n              }\n\n              if (rangeParts[1] > 0) {\n                return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n              }\n\n              return versionParts[2] === rangeParts[2];\n            }\n          }\n\n          return version === range || version === '*';\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    21: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Runner` module is an optional utility which provides a game loop, \n      * that handles continuously updating a `Matter.Engine` for you within a browser.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n      * Instead just call `Engine.update(engine, delta)` in your own loop.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Runner\n      */\n      var Runner = {};\n      module.exports = Runner;\n\n      var Events = _dereq_('./Events');\n\n      var Engine = _dereq_('./Engine');\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        if (!_requestAnimationFrame) {\n          var _frameTimeout;\n\n          _requestAnimationFrame = function _requestAnimationFrame(callback) {\n            _frameTimeout = setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = function _cancelAnimationFrame() {\n            clearTimeout(_frameTimeout);\n          };\n        }\n        /**\n         * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * @method create\n         * @param {} options\n         */\n\n\n        Runner.create = function (options) {\n          var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n          };\n          var runner = Common.extend(defaults, options);\n          runner.delta = runner.delta || 1000 / runner.fps;\n          runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n          runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n          runner.fps = 1000 / runner.delta;\n          return runner;\n        };\n        /**\n         * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n         * @method run\n         * @param {engine} engine\n         */\n\n\n        Runner.run = function (runner, engine) {\n          // create runner if engine is first argument\n          if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n          }\n\n          (function render(time) {\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n              Runner.tick(runner, engine, time);\n            }\n          })();\n\n          return runner;\n        };\n        /**\n         * A game loop utility that updates the engine and renderer by one step (a 'tick').\n         * Features delta smoothing, time correction and fixed or dynamic timing.\n         * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n         * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n         * @method tick\n         * @param {runner} runner\n         * @param {engine} engine\n         * @param {number} time\n         */\n\n\n        Runner.tick = function (runner, engine, time) {\n          var timing = engine.timing,\n              correction = 1,\n              delta; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(runner, 'beforeTick', event);\n          Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n          if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n          } else {\n            // dynamic timestep based on wall clock between calls\n            delta = time - runner.timePrev || runner.delta;\n            runner.timePrev = time; // optimistically filter delta over a few frames, to improve stability\n\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory); // limit delta\n\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta; // correction for delta\n\n            correction = delta / runner.delta; // update engine timing object\n\n            runner.delta = delta;\n          } // time correction for time scaling\n\n\n          if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n          if (timing.timeScale === 0) correction = 0;\n          runner.timeScalePrev = timing.timeScale;\n          runner.correction = correction; // fps counter\n\n          runner.frameCounter += 1;\n\n          if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n          }\n\n          Events.trigger(runner, 'tick', event);\n          Events.trigger(engine, 'tick', event); // @deprecated\n          // if world has been modified, clear the render scene graph\n\n          if (engine.world.isModified && engine.render && engine.render.controller && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n          } // update\n\n\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, delta, correction);\n          Events.trigger(runner, 'afterUpdate', event); // render\n          // @deprecated\n\n          if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n          }\n\n          Events.trigger(runner, 'afterTick', event);\n          Events.trigger(engine, 'afterTick', event); // @deprecated\n        };\n        /**\n         * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n         * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n         * @method stop\n         * @param {runner} runner\n         */\n\n\n        Runner.stop = function (runner) {\n          _cancelAnimationFrame(runner.frameRequestId);\n        };\n        /**\n         * Alias for `Runner.run`.\n         * @method start\n         * @param {runner} runner\n         * @param {engine} engine\n         */\n\n\n        Runner.start = function (runner, engine) {\n          Runner.run(runner, engine);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired at the start of a tick, before any updates to the engine or timing\n        *\n        * @event beforeTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine timing updated, but just before update\n        *\n        * @event tick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired at the end of a tick, after engine update and after rendering\n        *\n        * @event afterTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after update\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A flag that specifies whether the runner is running or not.\n         *\n         * @property enabled\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n         * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n         * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n         *\n         * @property isFixed\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that specifies the time step between updates in milliseconds.\n         * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n         * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n         *\n         * @property delta\n         * @type number\n         * @default 1000 / 60\n         */\n\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Engine\": 15,\n      \"./Events\": 16\n    }],\n    22: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n      *\n      * @class Sleeping\n      */\n      var Sleeping = {};\n      module.exports = Sleeping;\n\n      var Events = _dereq_('./Events');\n\n      (function () {\n        Sleeping._motionWakeThreshold = 0.18;\n        Sleeping._motionSleepThreshold = 0.08;\n        Sleeping._minBias = 0.9;\n        /**\n         * Puts bodies to sleep or wakes them up depending on their motion.\n         * @method update\n         * @param {body[]} bodies\n         * @param {number} timeScale\n         */\n\n        Sleeping.update = function (bodies, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // update bodies sleeping status\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed; // wake up bodies if they have a force applied\n\n            if (body.force.x !== 0 || body.force.y !== 0) {\n              Sleeping.set(body, false);\n              continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion); // biased average motion estimation between frames\n\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n              body.sleepCounter += 1;\n              if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n              body.sleepCounter -= 1;\n            }\n          }\n        };\n        /**\n         * Given a set of colliding pairs, wakes the sleeping bodies involved.\n         * @method afterCollisions\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Sleeping.afterCollisions = function (pairs, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // wake up bodies involved in collisions\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i]; // don't wake inactive pairs\n\n            if (!pair.isActive) continue;\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent; // don't wake if at least one body is static\n\n            if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n              var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n                  movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n              if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                Sleeping.set(sleepingBody, false);\n              }\n            }\n          }\n        };\n        /**\n         * Set a body as sleeping or awake.\n         * @method set\n         * @param {body} body\n         * @param {boolean} isSleeping\n         */\n\n\n        Sleeping.set = function (body, isSleeping) {\n          var wasSleeping = body.isSleeping;\n\n          if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n              Events.trigger(body, 'sleepStart');\n            }\n          } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n              Events.trigger(body, 'sleepEnd');\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Events\": 16\n    }],\n    23: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bodies` module contains factory methods for creating rigid body models \n      * with commonly used body configurations (such as rectangles, circles and other polygons).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Bodies\n      */\n      // TODO: true circle bodies\n      var Bodies = {};\n      module.exports = Bodies;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Common = _dereq_('../core/Common');\n\n      var Body = _dereq_('../body/Body');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var decomp;\n\n      (function () {\n        /**\n         * Creates a new rigid body model with a rectangle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method rectangle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {object} [options]\n         * @return {body} A new rectangle body\n         */\n        Bodies.rectangle = function (x, y, width, height, options) {\n          options = options || {};\n          var rectangle = {\n            label: 'Rectangle Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, rectangle, options));\n        };\n        /**\n         * Creates a new rigid body model with a trapezoid hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method trapezoid\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} slope\n         * @param {object} [options]\n         * @return {body} A new trapezoid body\n         */\n\n\n        Bodies.trapezoid = function (x, y, width, height, slope, options) {\n          options = options || {};\n          slope *= 0.5;\n          var roof = (1 - slope * 2) * width;\n          var x1 = width * slope,\n              x2 = x1 + roof,\n              x3 = x2 + x1,\n              verticesPath;\n\n          if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          }\n\n          var trapezoid = {\n            label: 'Trapezoid Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(verticesPath)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, trapezoid, options));\n        };\n        /**\n         * Creates a new rigid body model with a circle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method circle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} radius\n         * @param {object} [options]\n         * @param {number} [maxSides]\n         * @return {body} A new circle body\n         */\n\n\n        Bodies.circle = function (x, y, radius, options, maxSides) {\n          options = options || {};\n          var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n          }; // approximate circles with polygons until true circles implemented in SAT\n\n          maxSides = maxSides || 25;\n          var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius))); // optimisation: always use even number of sides (half the number of unique axes)\n\n          if (sides % 2 === 1) sides += 1;\n          return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n        };\n        /**\n         * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method polygon\n         * @param {number} x\n         * @param {number} y\n         * @param {number} sides\n         * @param {number} radius\n         * @param {object} [options]\n         * @return {body} A new regular polygon body\n         */\n\n\n        Bodies.polygon = function (x, y, sides, radius, options) {\n          options = options || {};\n          if (sides < 3) return Bodies.circle(x, y, radius, options);\n          var theta = 2 * Math.PI / sides,\n              path = '',\n              offset = theta * 0.5;\n\n          for (var i = 0; i < sides; i += 1) {\n            var angle = offset + i * theta,\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n          }\n\n          var polygon = {\n            label: 'Polygon Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(path)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, polygon, options));\n        };\n        /**\n         * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n         * If the vertices are convex, they will pass through as supplied.\n         * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n         * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n         * By default the decomposition will discard collinear edges (to improve performance).\n         * It can also optionally discard any parts that have an area less than `minimumArea`.\n         * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n         * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method fromVertices\n         * @param {number} x\n         * @param {number} y\n         * @param [[vector]] vertexSets\n         * @param {object} [options]\n         * @param {bool} [flagInternal=false]\n         * @param {number} [removeCollinear=0.01]\n         * @param {number} [minimumArea=10]\n         * @return {body}\n         */\n\n\n        Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n          if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n          }\n\n          var body, parts, isConvex, vertices, i, j, k, v, z;\n          options = options || {};\n          parts = [];\n          flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n          removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n          minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n          if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n          } // ensure vertexSets is an array of arrays\n\n\n          if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n          }\n\n          for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n              if (isConvex) {\n                vertices = Vertices.clockwiseSort(vertices);\n              } else {\n                // fallback to convex hull when decomposition is not possible\n                vertices = Vertices.hull(vertices);\n              }\n\n              parts.push({\n                position: {\n                  x: x,\n                  y: y\n                },\n                vertices: vertices\n              });\n            } else {\n              // initialise a decomposition\n              var concave = vertices.map(function (vertex) {\n                return [vertex.x, vertex.y];\n              }); // vertices are concave and simple, we can decompose into parts\n\n              decomp.makeCCW(concave);\n              if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear); // use the quick decomposition algorithm (Bayazit)\n\n              var decomposed = decomp.quickDecomp(concave); // for each decomposed chunk\n\n              for (i = 0; i < decomposed.length; i++) {\n                var chunk = decomposed[i]; // convert vertices into the correct structure\n\n                var chunkVertices = chunk.map(function (vertices) {\n                  return {\n                    x: vertices[0],\n                    y: vertices[1]\n                  };\n                }); // skip small chunks\n\n                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue; // create a compound part\n\n                parts.push({\n                  position: Vertices.centre(chunkVertices),\n                  vertices: chunkVertices\n                });\n              }\n            }\n          } // create body parts\n\n\n          for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n          } // flag internal edges (coincident part edges)\n\n\n          if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n              var partA = parts[i];\n\n              for (j = i + 1; j < parts.length; j++) {\n                var partB = parts[j];\n\n                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                  var pav = partA.vertices,\n                      pbv = partB.vertices; // iterate vertices of both parts\n\n                  for (k = 0; k < partA.vertices.length; k++) {\n                    for (z = 0; z < partB.vertices.length; z++) {\n                      // find distances between the vertices\n                      var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                          db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length])); // if both vertices are very close, consider the edge concident (internal)\n\n                      if (da < coincident_max_dist && db < coincident_max_dist) {\n                        pav[k].isInternal = true;\n                        pbv[z].isInternal = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({\n              parts: parts.slice(0)\n            }, options));\n            Body.setPosition(body, {\n              x: x,\n              y: y\n            });\n            return body;\n          } else {\n            return parts[0];\n          }\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    24: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composites` module contains factory methods for creating composite bodies\n      * with commonly used configurations (such as stacks and chains).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composites\n      */\n      var Composites = {};\n      module.exports = Composites;\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('../core/Common');\n\n      var Body = _dereq_('../body/Body');\n\n      var Bodies = _dereq_('./Bodies');\n\n      (function () {\n        /**\n         * Create a new composite containing bodies created in the callback in a grid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method stack\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.stack = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          var stack = Composite.create({\n            label: 'Stack'\n          }),\n              x = xx,\n              y = yy,\n              lastBody,\n              i = 0;\n\n          for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n              var body = callback(x, y, column, row, lastBody, i);\n\n              if (body) {\n                var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                    bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                Body.translate(body, {\n                  x: bodyWidth * 0.5,\n                  y: bodyHeight * 0.5\n                });\n                x = body.bounds.max.x + columnGap;\n                Composite.addBody(stack, body);\n                lastBody = body;\n                i += 1;\n              } else {\n                x += columnGap;\n              }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n          }\n\n          return stack;\n        };\n        /**\n         * Chains all bodies in the given composite together using constraints.\n         * @method chain\n         * @param {composite} composite\n         * @param {number} xOffsetA\n         * @param {number} yOffsetA\n         * @param {number} xOffsetB\n         * @param {number} yOffsetB\n         * @param {object} options\n         * @return {composite} A new composite containing objects chained together with constraints\n         */\n\n\n        Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n          var bodies = composite.bodies;\n\n          for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n            var defaults = {\n              bodyA: bodyA,\n              pointA: {\n                x: bodyAWidth * xOffsetA,\n                y: bodyAHeight * yOffsetA\n              },\n              bodyB: bodyB,\n              pointB: {\n                x: bodyBWidth * xOffsetB,\n                y: bodyBHeight * yOffsetB\n              }\n            };\n            var constraint = Common.extend(defaults, options);\n            Composite.addConstraint(composite, Constraint.create(constraint));\n          }\n\n          composite.label += ' Chain';\n          return composite;\n        };\n        /**\n         * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n         * @method mesh\n         * @param {composite} composite\n         * @param {number} columns\n         * @param {number} rows\n         * @param {boolean} crossBrace\n         * @param {object} options\n         * @return {composite} The composite containing objects meshed together with constraints\n         */\n\n\n        Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n          var bodies = composite.bodies,\n              row,\n              col,\n              bodyA,\n              bodyB,\n              bodyC;\n\n          for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n              bodyA = bodies[col - 1 + row * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n            }\n\n            if (row > 0) {\n              for (col = 0; col < columns; col++) {\n                bodyA = bodies[col + (row - 1) * columns];\n                bodyB = bodies[col + row * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyA,\n                  bodyB: bodyB\n                }, options)));\n\n                if (crossBrace && col > 0) {\n                  bodyC = bodies[col - 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n\n                if (crossBrace && col < columns - 1) {\n                  bodyC = bodies[col + 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n              }\n            }\n          }\n\n          composite.label += ' Mesh';\n          return composite;\n        };\n        /**\n         * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method pyramid\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n\n\n        Composites.pyramid = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            if (row > actualRows) return; // reverse row order\n\n            row = actualRows - row;\n            var start = row,\n                end = columns - 1 - row;\n            if (column < start || column > end) return; // retroactively fix the first body's position, since width was unknown\n\n            if (i === 1) {\n              Body.translate(lastBody, {\n                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                y: 0\n              });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n          });\n        };\n        /**\n         * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n         * @method newtonsCradle\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} number\n         * @param {number} size\n         * @param {number} length\n         * @return {composite} A new composite newtonsCradle body\n         */\n\n\n        Composites.newtonsCradle = function (xx, yy, number, size, length) {\n          var newtonsCradle = Composite.create({\n            label: 'Newtons Cradle'\n          });\n\n          for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n                constraint = Constraint.create({\n              pointA: {\n                x: xx + i * (size * separation),\n                y: yy\n              },\n              bodyB: circle\n            });\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n          }\n\n          return newtonsCradle;\n        };\n        /**\n         * Creates a composite with simple car setup of bodies and constraints.\n         * @method car\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} width\n         * @param {number} height\n         * @param {number} wheelSize\n         * @return {composite} A new composite car body\n         */\n\n\n        Composites.car = function (xx, yy, width, height, wheelSize) {\n          var group = Body.nextGroup(true),\n              wheelBase = 20,\n              wheelAOffset = -width * 0.5 + wheelBase,\n              wheelBOffset = width * 0.5 - wheelBase,\n              wheelYOffset = 0;\n          var car = Composite.create({\n            label: 'Car'\n          }),\n              body = Bodies.rectangle(xx, yy, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n          var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var axelA = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelAOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n          });\n          var axelB = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelBOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n          });\n          Composite.addBody(car, body);\n          Composite.addBody(car, wheelA);\n          Composite.addBody(car, wheelB);\n          Composite.addConstraint(car, axelA);\n          Composite.addConstraint(car, axelB);\n          return car;\n        };\n        /**\n         * Creates a simple soft body like object.\n         * @method softBody\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {boolean} crossBrace\n         * @param {number} particleRadius\n         * @param {} particleOptions\n         * @param {} constraintOptions\n         * @return {composite} A new composite softBody\n         */\n\n\n        Composites.softBody = function (xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n          particleOptions = Common.extend({\n            inertia: Infinity\n          }, particleOptions);\n          constraintOptions = Common.extend({\n            stiffness: 0.2,\n            render: {\n              type: 'line',\n              anchors: false\n            }\n          }, constraintOptions);\n          var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n          });\n          Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n          softBody.label = 'Soft Body';\n          return softBody;\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Bodies\": 23\n    }],\n    25: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n      *\n      * @class Axes\n      */\n      var Axes = {};\n      module.exports = Axes;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new set of axes from the given vertices.\n         * @method fromVertices\n         * @param {vertices} vertices\n         * @return {axes} A new axes from the given vertices\n         */\n        Axes.fromVertices = function (vertices) {\n          var axes = {}; // find the unique axes, using edge normal gradients\n\n          for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n                gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n          }\n\n          return Common.values(axes);\n        };\n        /**\n         * Rotates a set of axes by the given angle.\n         * @method rotate\n         * @param {axes} axes\n         * @param {number} angle\n         */\n\n\n        Axes.rotate = function (axes, angle) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    26: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n      *\n      * @class Bounds\n      */\n      var Bounds = {};\n      module.exports = Bounds;\n\n      (function () {\n        /**\n         * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n         * @method create\n         * @param {vertices} vertices\n         * @return {bounds} A new bounds object\n         */\n        Bounds.create = function (vertices) {\n          var bounds = {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: 0,\n              y: 0\n            }\n          };\n          if (vertices) Bounds.update(bounds, vertices);\n          return bounds;\n        };\n        /**\n         * Updates bounds using the given vertices and extends the bounds given a velocity.\n         * @method update\n         * @param {bounds} bounds\n         * @param {vertices} vertices\n         * @param {vector} velocity\n         */\n\n\n        Bounds.update = function (bounds, vertices, velocity) {\n          bounds.min.x = Infinity;\n          bounds.max.x = -Infinity;\n          bounds.min.y = Infinity;\n          bounds.max.y = -Infinity;\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n          }\n\n          if (velocity) {\n            if (velocity.x > 0) {\n              bounds.max.x += velocity.x;\n            } else {\n              bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n              bounds.max.y += velocity.y;\n            } else {\n              bounds.min.y += velocity.y;\n            }\n          }\n        };\n        /**\n         * Returns true if the bounds contains the given point.\n         * @method contains\n         * @param {bounds} bounds\n         * @param {vector} point\n         * @return {boolean} True if the bounds contain the point, otherwise false\n         */\n\n\n        Bounds.contains = function (bounds, point) {\n          return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n        };\n        /**\n         * Returns true if the two bounds intersect.\n         * @method overlaps\n         * @param {bounds} boundsA\n         * @param {bounds} boundsB\n         * @return {boolean} True if the bounds overlap, otherwise false\n         */\n\n\n        Bounds.overlaps = function (boundsA, boundsB) {\n          return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n        };\n        /**\n         * Translates the bounds by the given vector.\n         * @method translate\n         * @param {bounds} bounds\n         * @param {vector} vector\n         */\n\n\n        Bounds.translate = function (bounds, vector) {\n          bounds.min.x += vector.x;\n          bounds.max.x += vector.x;\n          bounds.min.y += vector.y;\n          bounds.max.y += vector.y;\n        };\n        /**\n         * Shifts the bounds to the given position.\n         * @method shift\n         * @param {bounds} bounds\n         * @param {vector} position\n         */\n\n\n        Bounds.shift = function (bounds, position) {\n          var deltaX = bounds.max.x - bounds.min.x,\n              deltaY = bounds.max.y - bounds.min.y;\n          bounds.min.x = position.x;\n          bounds.max.x = position.x + deltaX;\n          bounds.min.y = position.y;\n          bounds.max.y = position.y + deltaY;\n        };\n      })();\n    }, {}],\n    27: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n      *\n      * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Svg\n      */\n      var Svg = {};\n      module.exports = Svg;\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Converts an SVG path into an array of vector points.\n         * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n         * See `Bodies.fromVertices` which provides support for this.\n         * Note that this function is not guaranteed to support complex paths (such as those with holes).\n         * You must load the `pathseg.js` polyfill on newer browsers.\n         * @method pathToVertices\n         * @param {SVGPathElement} path\n         * @param {Number} [sampleLength=15]\n         * @return {Vector[]} points\n         */\n        Svg.pathToVertices = function (path, sampleLength) {\n          if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n          } // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n\n\n          var i,\n              il,\n              total,\n              point,\n              segment,\n              segments,\n              segmentsQueue,\n              lastSegment,\n              lastPoint,\n              segmentIndex,\n              points = [],\n              lx,\n              ly,\n              length = 0,\n              x = 0,\n              y = 0;\n          sampleLength = sampleLength || 15;\n\n          var addPoint = function addPoint(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1; // when the last point doesn't equal the current point add the current point\n\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n              if (lastPoint && isRelative) {\n                lx = lastPoint.x;\n                ly = lastPoint.y;\n              } else {\n                lx = 0;\n                ly = 0;\n              }\n\n              var point = {\n                x: lx + px,\n                y: ly + py\n              }; // set last point\n\n              if (isRelative || !lastPoint) {\n                lastPoint = point;\n              }\n\n              points.push(point);\n              x = lx + px;\n              y = ly + py;\n            }\n          };\n\n          var addSegmentPoint = function addSegmentPoint(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase(); // skip path ends\n\n            if (segType === 'Z') return; // map segment to x and y\n\n            switch (segType) {\n              case 'M':\n              case 'L':\n              case 'T':\n              case 'C':\n              case 'S':\n              case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n\n              case 'H':\n                x = segment.x;\n                break;\n\n              case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n          }; // ensure path is absolute\n\n\n          Svg._svgPathToAbsolute(path); // get total length\n\n\n          total = path.getTotalLength(); // queue segments\n\n          segments = [];\n\n          for (i = 0; i < path.pathSegList.numberOfItems; i += 1) {\n            segments.push(path.pathSegList.getItem(i));\n          }\n\n          segmentsQueue = segments.concat(); // sample through path\n\n          while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex]; // new segment\n\n            if (segment != lastSegment) {\n              while (segmentsQueue.length && segmentsQueue[0] != segment) {\n                addSegmentPoint(segmentsQueue.shift());\n              }\n\n              lastSegment = segment;\n            } // add points in between when curving\n            // TODO: adaptive sampling\n\n\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n              case 'C':\n              case 'T':\n              case 'S':\n              case 'Q':\n              case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n            } // increment by sample value\n\n\n            length += sampleLength;\n          } // add remaining segments not passed by sampling\n\n\n          for (i = 0, il = segmentsQueue.length; i < il; ++i) {\n            addSegmentPoint(segmentsQueue[i]);\n          }\n\n          return points;\n        };\n\n        Svg._svgPathToAbsolute = function (path) {\n          // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n          // Copyright (c) Gavin Kistner\n          // http://phrogz.net/js/_ReuseLicense.txt\n          // Modifications: tidy formatting and naming\n          var x0,\n              y0,\n              x1,\n              y1,\n              x2,\n              y2,\n              segs = path.pathSegList,\n              x = 0,\n              y = 0,\n              len = segs.numberOfItems;\n\n          for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n              if ('x' in seg) x = seg.x;\n              if ('y' in seg) y = seg.y;\n            } else {\n              if ('x1' in seg) x1 = x + seg.x1;\n              if ('x2' in seg) x2 = x + seg.x2;\n              if ('y1' in seg) y1 = y + seg.y1;\n              if ('y2' in seg) y2 = y + seg.y2;\n              if ('x' in seg) x += seg.x;\n              if ('y' in seg) y += seg.y;\n\n              switch (segType) {\n                case 'm':\n                  segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                  break;\n\n                case 'l':\n                  segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                  break;\n\n                case 'h':\n                  segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                  break;\n\n                case 'v':\n                  segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                  break;\n\n                case 'c':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                  break;\n\n                case 's':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                  break;\n\n                case 'q':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                  break;\n\n                case 't':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                  break;\n\n                case 'a':\n                  segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                  break;\n\n                case 'z':\n                case 'Z':\n                  x = x0;\n                  y = y0;\n                  break;\n              }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n              x0 = x;\n              y0 = y;\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26\n    }],\n    28: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n      * Vectors are the basis of all the geometry related operations in the engine.\n      * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vector\n      */\n      // TODO: consider params for reusing vector objects\n      var Vector = {};\n      module.exports = Vector;\n\n      (function () {\n        /**\n         * Creates a new vector.\n         * @method create\n         * @param {number} x\n         * @param {number} y\n         * @return {vector} A new vector\n         */\n        Vector.create = function (x, y) {\n          return {\n            x: x || 0,\n            y: y || 0\n          };\n        };\n        /**\n         * Returns a new vector with `x` and `y` copied from the given `vector`.\n         * @method clone\n         * @param {vector} vector\n         * @return {vector} A new cloned vector\n         */\n\n\n        Vector.clone = function (vector) {\n          return {\n            x: vector.x,\n            y: vector.y\n          };\n        };\n        /**\n         * Returns the magnitude (length) of a vector.\n         * @method magnitude\n         * @param {vector} vector\n         * @return {number} The magnitude of the vector\n         */\n\n\n        Vector.magnitude = function (vector) {\n          return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        };\n        /**\n         * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n         * @method magnitudeSquared\n         * @param {vector} vector\n         * @return {number} The squared magnitude of the vector\n         */\n\n\n        Vector.magnitudeSquared = function (vector) {\n          return vector.x * vector.x + vector.y * vector.y;\n        };\n        /**\n         * Rotates the vector about (0, 0) by specified angle.\n         * @method rotate\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} [output]\n         * @return {vector} The vector rotated about (0, 0)\n         */\n\n\n        Vector.rotate = function (vector, angle, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = vector.x * cos - vector.y * sin;\n          output.y = vector.x * sin + vector.y * cos;\n          output.x = x;\n          return output;\n        };\n        /**\n         * Rotates the vector about a specified point by specified angle.\n         * @method rotateAbout\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} point\n         * @param {vector} [output]\n         * @return {vector} A new vector rotated about the point\n         */\n\n\n        Vector.rotateAbout = function (vector, angle, point, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n          output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n          output.x = x;\n          return output;\n        };\n        /**\n         * Normalises a vector (such that its magnitude is `1`).\n         * @method normalise\n         * @param {vector} vector\n         * @return {vector} A new vector normalised\n         */\n\n\n        Vector.normalise = function (vector) {\n          var magnitude = Vector.magnitude(vector);\n          if (magnitude === 0) return {\n            x: 0,\n            y: 0\n          };\n          return {\n            x: vector.x / magnitude,\n            y: vector.y / magnitude\n          };\n        };\n        /**\n         * Returns the dot-product of two vectors.\n         * @method dot\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The dot product of the two vectors\n         */\n\n\n        Vector.dot = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n        };\n        /**\n         * Returns the cross-product of two vectors.\n         * @method cross\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The cross product of the two vectors\n         */\n\n\n        Vector.cross = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n        };\n        /**\n         * Returns the cross-product of three vectors.\n         * @method cross3\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} vectorC\n         * @return {number} The cross product of the three vectors\n         */\n\n\n        Vector.cross3 = function (vectorA, vectorB, vectorC) {\n          return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n        };\n        /**\n         * Adds the two vectors.\n         * @method add\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB added\n         */\n\n\n        Vector.add = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x + vectorB.x;\n          output.y = vectorA.y + vectorB.y;\n          return output;\n        };\n        /**\n         * Subtracts the two vectors.\n         * @method sub\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB subtracted\n         */\n\n\n        Vector.sub = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x - vectorB.x;\n          output.y = vectorA.y - vectorB.y;\n          return output;\n        };\n        /**\n         * Multiplies a vector and a scalar.\n         * @method mult\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector multiplied by scalar\n         */\n\n\n        Vector.mult = function (vector, scalar) {\n          return {\n            x: vector.x * scalar,\n            y: vector.y * scalar\n          };\n        };\n        /**\n         * Divides a vector and a scalar.\n         * @method div\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector divided by scalar\n         */\n\n\n        Vector.div = function (vector, scalar) {\n          return {\n            x: vector.x / scalar,\n            y: vector.y / scalar\n          };\n        };\n        /**\n         * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n         * @method perp\n         * @param {vector} vector\n         * @param {bool} [negate=false]\n         * @return {vector} The perpendicular vector\n         */\n\n\n        Vector.perp = function (vector, negate) {\n          negate = negate === true ? -1 : 1;\n          return {\n            x: negate * -vector.y,\n            y: negate * vector.x\n          };\n        };\n        /**\n         * Negates both components of a vector such that it points in the opposite direction.\n         * @method neg\n         * @param {vector} vector\n         * @return {vector} The negated vector\n         */\n\n\n        Vector.neg = function (vector) {\n          return {\n            x: -vector.x,\n            y: -vector.y\n          };\n        };\n        /**\n         * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n         * @method angle\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The angle in radians\n         */\n\n\n        Vector.angle = function (vectorA, vectorB) {\n          return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n        };\n        /**\n         * Temporary vector pool (not thread-safe).\n         * @property _temp\n         * @type {vector[]}\n         * @private\n         */\n\n\n        Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n      })();\n    }, {}],\n    29: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n      * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n      * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vertices\n      */\n      var Vertices = {};\n      module.exports = Vertices;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new set of `Matter.Body` compatible vertices.\n         * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n         * but with some additional references required for efficient collision detection routines.\n         *\n         * Vertices must be specified in clockwise order.\n         *\n         * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n         *\n         * @method create\n         * @param {vector[]} points\n         * @param {body} body\n         */\n        Vertices.create = function (points, body) {\n          var vertices = [];\n\n          for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n            vertices.push(vertex);\n          }\n\n          return vertices;\n        };\n        /**\n         * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n         * into a `Matter.Vertices` object for the given `Matter.Body`.\n         * For parsing SVG paths, see `Svg.pathToVertices`.\n         * @method fromPath\n         * @param {string} path\n         * @param {body} body\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.fromPath = function (path, body) {\n          var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n              points = [];\n          path.replace(pathPattern, function (match, x, y) {\n            points.push({\n              x: parseFloat(x),\n              y: parseFloat(y)\n            });\n          });\n          return Vertices.create(points, body);\n        };\n        /**\n         * Returns the centre (centroid) of the set of vertices.\n         * @method centre\n         * @param {vertices} vertices\n         * @return {vector} The centre point\n         */\n\n\n        Vertices.centre = function (vertices) {\n          var area = Vertices.area(vertices, true),\n              centre = {\n            x: 0,\n            y: 0\n          },\n              cross,\n              temp,\n              j;\n\n          for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n          }\n\n          return Vector.div(centre, 6 * area);\n        };\n        /**\n         * Returns the average (mean) of the set of vertices.\n         * @method mean\n         * @param {vertices} vertices\n         * @return {vector} The average point\n         */\n\n\n        Vertices.mean = function (vertices) {\n          var average = {\n            x: 0,\n            y: 0\n          };\n\n          for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n          }\n\n          return Vector.div(average, vertices.length);\n        };\n        /**\n         * Returns the area of the set of vertices.\n         * @method area\n         * @param {vertices} vertices\n         * @param {bool} signed\n         * @return {number} The area\n         */\n\n\n        Vertices.area = function (vertices, signed) {\n          var area = 0,\n              j = vertices.length - 1;\n\n          for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n          }\n\n          if (signed) return area / 2;\n          return Math.abs(area) / 2;\n        };\n        /**\n         * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n         * @method inertia\n         * @param {vertices} vertices\n         * @param {number} mass\n         * @return {number} The polygon's moment of inertia\n         */\n\n\n        Vertices.inertia = function (vertices, mass) {\n          var numerator = 0,\n              denominator = 0,\n              v = vertices,\n              cross,\n              j; // find the polygon's moment of inertia, using second moment of area\n          // from equations at http://www.physicsforums.com/showthread.php?t=25293\n\n          for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n          }\n\n          return mass / 6 * (numerator / denominator);\n        };\n        /**\n         * Translates the set of vertices in-place.\n         * @method translate\n         * @param {vertices} vertices\n         * @param {vector} vector\n         * @param {number} scalar\n         */\n\n\n        Vertices.translate = function (vertices, vector, scalar) {\n          var i;\n\n          if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x * scalar;\n              vertices[i].y += vector.y * scalar;\n            }\n          } else {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x;\n              vertices[i].y += vector.y;\n            }\n          }\n\n          return vertices;\n        };\n        /**\n         * Rotates the set of vertices in-place.\n         * @method rotate\n         * @param {vertices} vertices\n         * @param {number} angle\n         * @param {vector} point\n         */\n\n\n        Vertices.rotate = function (vertices, angle, point) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n          }\n\n          return vertices;\n        };\n        /**\n         * Returns `true` if the `point` is inside the set of `vertices`.\n         * @method contains\n         * @param {vertices} vertices\n         * @param {vector} point\n         * @return {boolean} True if the vertices contains point, otherwise false\n         */\n\n\n        Vertices.contains = function (vertices, point) {\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n        /**\n         * Scales the vertices from a point (default is centre) in-place.\n         * @method scale\n         * @param {vertices} vertices\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         */\n\n\n        Vertices.scale = function (vertices, scaleX, scaleY, point) {\n          if (scaleX === 1 && scaleY === 1) return vertices;\n          point = point || Vertices.centre(vertices);\n          var vertex, delta;\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n         * The radius parameter is a single number or an array to specify the radius for each vertex.\n         * @method chamfer\n         * @param {vertices} vertices\n         * @param {number[]} radius\n         * @param {number} quality\n         * @param {number} qualityMin\n         * @param {number} qualityMax\n         */\n\n\n        Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n          if (typeof radius === 'number') {\n            radius = [radius];\n          } else {\n            radius = radius || [8];\n          } // quality defaults to -1, which is auto\n\n\n          quality = typeof quality !== 'undefined' ? quality : -1;\n          qualityMin = qualityMin || 2;\n          qualityMax = qualityMax || 14;\n          var newVertices = [];\n\n          for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n              newVertices.push(vertex);\n              continue;\n            }\n\n            var prevNormal = Vector.normalise({\n              x: vertex.y - prevVertex.y,\n              y: prevVertex.x - vertex.x\n            });\n            var nextNormal = Vector.normalise({\n              x: nextVertex.y - vertex.y,\n              y: vertex.x - nextVertex.x\n            });\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n            var precision = quality;\n\n            if (quality === -1) {\n              // automatically decide precision\n              precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax); // use an even value for precision, more likely to reduce axes by using symmetry\n\n            if (precision % 2 === 1) precision += 1;\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n              newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n          }\n\n          return newVertices;\n        };\n        /**\n         * Sorts the input vertices into clockwise order in place.\n         * @method clockwiseSort\n         * @param {vertices} vertices\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.clockwiseSort = function (vertices) {\n          var centre = Vertices.mean(vertices);\n          vertices.sort(function (vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n          });\n          return vertices;\n        };\n        /**\n         * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n         * @method isConvex\n         * @param {vertices} vertices\n         * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n         */\n\n\n        Vertices.isConvex = function (vertices) {\n          // http://paulbourke.net/geometry/polygonmesh/\n          // Copyright (c) Paul Bourke (use permitted)\n          var flag = 0,\n              n = vertices.length,\n              i,\n              j,\n              k,\n              z;\n          if (n < 3) return null;\n\n          for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n              flag |= 1;\n            } else if (z > 0) {\n              flag |= 2;\n            }\n\n            if (flag === 3) {\n              return false;\n            }\n          }\n\n          if (flag !== 0) {\n            return true;\n          } else {\n            return null;\n          }\n        };\n        /**\n         * Returns the convex hull of the input vertices as a new array of points.\n         * @method hull\n         * @param {vertices} vertices\n         * @return [vertex] vertices\n         */\n\n\n        Vertices.hull = function (vertices) {\n          // http://geomalgorithms.com/a10-_hull-1.html\n          var upper = [],\n              lower = [],\n              vertex,\n              i; // sort vertices on x-axis (y-axis for ties)\n\n          vertices = vertices.slice(0);\n          vertices.sort(function (vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n          }); // build lower hull\n\n          for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n              lower.pop();\n            }\n\n            lower.push(vertex);\n          } // build upper hull\n\n\n          for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n              upper.pop();\n            }\n\n            upper.push(vertex);\n          } // concatenation of the lower and upper hulls gives the convex hull\n          // omit last points because they are repeated at the beginning of the other list\n\n\n          upper.pop();\n          lower.pop();\n          return upper.concat(lower);\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    30: [function (_dereq_, module, exports) {\n      var Matter = module.exports = _dereq_('../core/Matter');\n\n      Matter.Body = _dereq_('../body/Body');\n      Matter.Composite = _dereq_('../body/Composite');\n      Matter.World = _dereq_('../body/World');\n      Matter.Contact = _dereq_('../collision/Contact');\n      Matter.Detector = _dereq_('../collision/Detector');\n      Matter.Grid = _dereq_('../collision/Grid');\n      Matter.Pairs = _dereq_('../collision/Pairs');\n      Matter.Pair = _dereq_('../collision/Pair');\n      Matter.Query = _dereq_('../collision/Query');\n      Matter.Resolver = _dereq_('../collision/Resolver');\n      Matter.SAT = _dereq_('../collision/SAT');\n      Matter.Constraint = _dereq_('../constraint/Constraint');\n      Matter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n      Matter.Common = _dereq_('../core/Common');\n      Matter.Engine = _dereq_('../core/Engine');\n      Matter.Events = _dereq_('../core/Events');\n      Matter.Mouse = _dereq_('../core/Mouse');\n      Matter.Runner = _dereq_('../core/Runner');\n      Matter.Sleeping = _dereq_('../core/Sleeping');\n      Matter.Plugin = _dereq_('../core/Plugin');\n      Matter.Bodies = _dereq_('../factory/Bodies');\n      Matter.Composites = _dereq_('../factory/Composites');\n      Matter.Axes = _dereq_('../geometry/Axes');\n      Matter.Bounds = _dereq_('../geometry/Bounds');\n      Matter.Svg = _dereq_('../geometry/Svg');\n      Matter.Vector = _dereq_('../geometry/Vector');\n      Matter.Vertices = _dereq_('../geometry/Vertices');\n      Matter.Render = _dereq_('../render/Render');\n      Matter.RenderPixi = _dereq_('../render/RenderPixi'); // aliases\n\n      Matter.World.add = Matter.Composite.add;\n      Matter.World.remove = Matter.Composite.remove;\n      Matter.World.addComposite = Matter.Composite.addComposite;\n      Matter.World.addBody = Matter.Composite.addBody;\n      Matter.World.addConstraint = Matter.Composite.addConstraint;\n      Matter.World.clear = Matter.Composite.clear;\n      Matter.Engine.run = Matter.Runner.run;\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Contact\": 4,\n      \"../collision/Detector\": 5,\n      \"../collision/Grid\": 6,\n      \"../collision/Pair\": 7,\n      \"../collision/Pairs\": 8,\n      \"../collision/Query\": 9,\n      \"../collision/Resolver\": 10,\n      \"../collision/SAT\": 11,\n      \"../constraint/Constraint\": 12,\n      \"../constraint/MouseConstraint\": 13,\n      \"../core/Common\": 14,\n      \"../core/Engine\": 15,\n      \"../core/Events\": 16,\n      \"../core/Matter\": 17,\n      \"../core/Metrics\": 18,\n      \"../core/Mouse\": 19,\n      \"../core/Plugin\": 20,\n      \"../core/Runner\": 21,\n      \"../core/Sleeping\": 22,\n      \"../factory/Bodies\": 23,\n      \"../factory/Composites\": 24,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Svg\": 27,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31,\n      \"../render/RenderPixi\": 32\n    }],\n    31: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n      *\n      * @class Render\n      */\n      var Render = {};\n      module.exports = Render;\n\n      var Common = _dereq_('../core/Common');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Events = _dereq_('../core/Events');\n\n      var Grid = _dereq_('../collision/Grid');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Mouse = _dereq_('../core/Mouse');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {render} A new renderer\n         */\n\n\n        Render.create = function (options) {\n          var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n              width: 800,\n              height: 600,\n              pixelRatio: 1,\n              background: '#18181d',\n              wireframeBackground: '#0f0f13',\n              hasBounds: !!options.bounds,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showSeparations: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false,\n              showVertexNumbers: false,\n              showConvexHulls: false,\n              showInternalEdges: false,\n              showMousePosition: false\n            }\n          };\n          var render = Common.extend(defaults, options);\n\n          if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n          }\n\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n          render.context = render.canvas.getContext('2d');\n          render.textures = {};\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.canvas.width,\n              y: render.canvas.height\n            }\n          };\n\n          if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n          }\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n          }\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         */\n\n\n        Render.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         */\n\n\n        Render.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Sets the pixel ratio of the renderer and updates the canvas.\n         * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n         * @method setPixelRatio\n         * @param {render} render\n         * @param {number} pixelRatio\n         */\n\n\n        Render.setPixelRatio = function (render, pixelRatio) {\n          var options = render.options,\n              canvas = render.canvas;\n\n          if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n          }\n\n          options.pixelRatio = pixelRatio;\n          canvas.setAttribute('data-pixel-ratio', pixelRatio);\n          canvas.width = options.width * pixelRatio;\n          canvas.height = options.height * pixelRatio;\n          canvas.style.width = options.width + 'px';\n          canvas.style.height = options.height + 'px';\n          render.context.scale(pixelRatio, pixelRatio);\n        };\n        /**\n         * Positions and sizes the viewport around the given object bounds.\n         * Objects must have at least one of the following properties:\n         * - `object.bounds`\n         * - `object.position`\n         * - `object.min` and `object.max`\n         * - `object.x` and `object.y`\n         * @method lookAt\n         * @param {render} render\n         * @param {object[]} objects\n         * @param {vector} [padding]\n         * @param {bool} [center=true]\n         */\n\n\n        Render.lookAt = function (render, objects, padding, center) {\n          center = typeof center !== 'undefined' ? center : true;\n          objects = Common.isArray(objects) ? objects : [objects];\n          padding = padding || {\n            x: 0,\n            y: 0\n          }; // find bounds of all objects\n\n          var bounds = {\n            min: {\n              x: Infinity,\n              y: Infinity\n            },\n            max: {\n              x: -Infinity,\n              y: -Infinity\n            }\n          };\n\n          for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : object.min || object.position || object,\n                max = object.bounds ? object.bounds.max : object.max || object.position || object;\n\n            if (min && max) {\n              if (min.x < bounds.min.x) bounds.min.x = min.x;\n              if (max.x > bounds.max.x) bounds.max.x = max.x;\n              if (min.y < bounds.min.y) bounds.min.y = min.y;\n              if (max.y > bounds.max.y) bounds.max.y = max.y;\n            }\n          } // find ratios\n\n\n          var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n              height = bounds.max.y - bounds.min.y + 2 * padding.y,\n              viewHeight = render.canvas.height,\n              viewWidth = render.canvas.width,\n              outerRatio = viewWidth / viewHeight,\n              innerRatio = width / height,\n              scaleX = 1,\n              scaleY = 1; // find scale factor\n\n          if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n          } else {\n            scaleX = outerRatio / innerRatio;\n          } // enable bounds\n\n\n          render.options.hasBounds = true; // position and size\n\n          render.bounds.min.x = bounds.min.x;\n          render.bounds.max.x = bounds.min.x + width * scaleX;\n          render.bounds.min.y = bounds.min.y;\n          render.bounds.max.y = bounds.min.y + height * scaleY; // center\n\n          if (center) {\n            render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n            render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n          } // padding\n\n\n          render.bounds.min.x -= padding.x;\n          render.bounds.max.x -= padding.x;\n          render.bounds.min.y -= padding.y;\n          render.bounds.max.y -= padding.y; // update mouse\n\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        };\n        /**\n         * Applies viewport transforms based on `render.bounds` to a render context.\n         * @method startViewTransform\n         * @param {render} render\n         */\n\n\n        Render.startViewTransform = function (render) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n          render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n          render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        };\n        /**\n         * Resets all transforms on the render context.\n         * @method endViewTransform\n         * @param {render} render\n         */\n\n\n        Render.endViewTransform = function (render) {\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n        };\n        /**\n         * Renders the given `engine`'s `Matter.World` object.\n         * This is the entry point for all rendering and should be called every time the scene changes.\n         * @method world\n         * @param {render} render\n         */\n\n\n        Render.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              canvas = render.canvas,\n              context = render.context,\n              options = render.options,\n              allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              background = options.wireframes ? options.wireframeBackground : options.background,\n              bodies = [],\n              constraints = [],\n              i;\n          var event = {\n            timestamp: engine.timing.timestamp\n          };\n          Events.trigger(render, 'beforeRender', event); // apply background if it has changed\n\n          if (render.currentBackground !== background) _applyBackground(render, background); // clear the canvas with a transparent fill, to allow the canvas background to show\n\n          context.globalCompositeOperation = 'source-in';\n          context.fillStyle = \"transparent\";\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.globalCompositeOperation = 'source-over'; // handle bounds\n\n          if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n              var body = allBodies[i];\n              if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            Render.startViewTransform(render); // update mouse\n\n            if (render.mouse) {\n              Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n              });\n              Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n          } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n          }\n\n          if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n          } else {\n            if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context); // optimised method for wireframes only\n\n            Render.bodyWireframes(render, bodies, context);\n          }\n\n          if (options.showBounds) Render.bodyBounds(render, bodies, context);\n          if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n          if (options.showPositions) Render.bodyPositions(render, bodies, context);\n          if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n          if (options.showIds) Render.bodyIds(render, bodies, context);\n          if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n          if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n          if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n          if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n          Render.constraints(constraints, context);\n          if (options.showBroadphase && engine.broadphase.controller === Grid) Render.grid(render, engine.broadphase, context);\n          if (options.showDebug) Render.debug(render, context);\n\n          if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n          }\n\n          Events.trigger(render, 'afterRender', event);\n        };\n        /**\n         * Description\n         * @private\n         * @method debug\n         * @param {render} render\n         * @param {RenderingContext} context\n         */\n\n\n        Render.debug = function (render, context) {\n          var c = context,\n              engine = render.engine,\n              world = engine.world,\n              metrics = engine.metrics,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              space = \"    \";\n\n          if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n              text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n          }\n\n          if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n              c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n              c.fillText(split[i], 50, 50 + i * 18);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method constraints\n         * @param {constraint[]} constraints\n         * @param {RenderingContext} context\n         */\n\n\n        Render.constraints = function (constraints, context) {\n          var c = context;\n\n          for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n              start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n              start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              if (bodyB) {\n                end = Vector.add(bodyB.position, constraint.pointB);\n              } else {\n                end = constraint.pointB;\n              }\n\n              c.beginPath();\n              c.moveTo(start.x, start.y);\n\n              if (constraint.render.type === 'spring') {\n                var delta = Vector.sub(end, start),\n                    normal = Vector.perp(Vector.normalise(delta)),\n                    coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                    offset;\n\n                for (var j = 1; j < coils; j += 1) {\n                  offset = j % 2 === 0 ? 1 : -1;\n                  c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                }\n              }\n\n              c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n              c.lineWidth = constraint.render.lineWidth;\n              c.strokeStyle = constraint.render.strokeStyle;\n              c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n              c.fillStyle = constraint.render.strokeStyle;\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n              c.fill();\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodyShadows\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyShadows = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n\n            if (body.circleRadius) {\n              c.beginPath();\n              c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              c.beginPath();\n              c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n              for (var j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n              }\n\n              c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n            c.fill();\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodies\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodies = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              showInternalEdges = options.showInternalEdges || !options.wireframes,\n              body,\n              part,\n              i,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              if (!part.render.visible) continue;\n\n              if (options.showSleeping && body.isSleeping) {\n                c.globalAlpha = 0.5 * part.render.opacity;\n              } else if (part.render.opacity !== 1) {\n                c.globalAlpha = part.render.opacity;\n              }\n\n              if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                // part sprite\n                var sprite = part.render.sprite,\n                    texture = _getTexture(render, sprite.texture);\n\n                c.translate(part.position.x, part.position.y);\n                c.rotate(part.angle);\n                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale); // revert translation, hopefully faster than save / restore\n\n                c.rotate(-part.angle);\n                c.translate(-part.position.x, -part.position.y);\n              } else {\n                // part polygon\n                if (part.circleRadius) {\n                  c.beginPath();\n                  c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                } else {\n                  c.beginPath();\n                  c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                  for (var j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                      c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                      c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                      c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                  }\n\n                  c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                  c.closePath();\n                }\n\n                if (!options.wireframes) {\n                  c.fillStyle = part.render.fillStyle;\n\n                  if (part.render.lineWidth) {\n                    c.lineWidth = part.render.lineWidth;\n                    c.strokeStyle = part.render.strokeStyle;\n                    c.stroke();\n                  }\n\n                  c.fill();\n                } else {\n                  c.lineWidth = 1;\n                  c.strokeStyle = '#bbb';\n                  c.stroke();\n                }\n              }\n\n              c.globalAlpha = 1;\n            }\n          }\n        };\n        /**\n         * Optimised method for drawing body wireframes in one pass\n         * @private\n         * @method bodyWireframes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyWireframes = function (render, bodies, context) {\n          var c = context,\n              showInternalEdges = render.options.showInternalEdges,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render all bodies\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n              for (j = 1; j < part.vertices.length; j++) {\n                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                  c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                } else {\n                  c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                }\n\n                if (part.vertices[j].isInternal && !showInternalEdges) {\n                  c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                }\n              }\n\n              c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = '#bbb';\n          c.stroke();\n        };\n        /**\n         * Optimised method for drawing body convex hull wireframes in one pass\n         * @private\n         * @method bodyConvexHulls\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyConvexHulls = function (render, bodies, context) {\n          var c = context,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render convex hulls\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible || body.parts.length === 1) continue;\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n              c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = 'rgba(255,255,255,0.2)';\n          c.stroke();\n        };\n        /**\n         * Renders body vertex numbers.\n         * @private\n         * @method vertexNumbers\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.vertexNumbers = function (render, bodies, context) {\n          var c = context,\n              i,\n              j,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n              var part = parts[k];\n\n              for (j = 0; j < part.vertices.length; j++) {\n                c.fillStyle = 'rgba(255,255,255,0.2)';\n                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n              }\n            }\n          }\n        };\n        /**\n         * Renders mouse position.\n         * @private\n         * @method mousePosition\n         * @param {render} render\n         * @param {mouse} mouse\n         * @param {RenderingContext} context\n         */\n\n\n        Render.mousePosition = function (render, mouse, context) {\n          var c = context;\n          c.fillStyle = 'rgba(255,255,255,0.8)';\n          c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n        };\n        /**\n         * Draws body bounds\n         * @private\n         * @method bodyBounds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyBounds = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n              var parts = bodies[i].parts;\n\n              for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n          } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Draws body angle indicators and axes\n         * @private\n         * @method bodyAxes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyAxes = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath();\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n            if (!body.render.visible) continue;\n\n            if (options.showAxes) {\n              // render all axes\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  var axis = part.axes[k];\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                }\n              }\n            } else {\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  // render a single axis indicator\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                }\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n          } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n          }\n\n          c.stroke();\n          c.globalCompositeOperation = 'source-over';\n        };\n        /**\n         * Draws body positions\n         * @private\n         * @method bodyPositions\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyPositions = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              body,\n              part,\n              i,\n              k;\n          c.beginPath(); // render current positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'indianred';\n          } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n          }\n\n          c.fill();\n          c.beginPath(); // render previous positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (body.render.visible) {\n              c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          c.fillStyle = 'rgba(255,165,0,0.8)';\n          c.fill();\n        };\n        /**\n         * Draws body velocity\n         * @private\n         * @method bodyVelocity\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyVelocity = function (render, bodies, context) {\n          var c = context;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n          }\n\n          c.lineWidth = 3;\n          c.strokeStyle = 'cornflowerblue';\n          c.stroke();\n        };\n        /**\n         * Draws body ids\n         * @private\n         * @method bodyIds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyIds = function (render, bodies, context) {\n          var c = context,\n              i,\n              j;\n\n          for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible) continue;\n            var parts = bodies[i].parts;\n\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.font = \"12px Arial\";\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n              c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method collisions\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.collisions = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render collision positions\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            for (j = 0; j < pair.activeContacts.length; j++) {\n              var contact = pair.activeContacts[j],\n                  vertex = contact.vertex;\n              c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n          } else {\n            c.fillStyle = 'orange';\n          }\n\n          c.fill();\n          c.beginPath(); // render collision normals\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n              var normalPosX = pair.activeContacts[0].vertex.x,\n                  normalPosY = pair.activeContacts[0].vertex.y;\n\n              if (pair.activeContacts.length === 2) {\n                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n              }\n\n              if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n              } else {\n                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n              }\n\n              c.lineTo(normalPosX, normalPosY);\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method separations\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.separations = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render separations\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n            var k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n            k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method grid\n         * @param {render} render\n         * @param {grid} grid\n         * @param {RenderingContext} context\n         */\n\n\n        Render.grid = function (render, grid, context) {\n          var c = context,\n              options = render.options;\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n          } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n          }\n\n          c.beginPath();\n          var bucketKeys = Common.keys(grid.buckets);\n\n          for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n            if (grid.buckets[bucketId].length < 2) continue;\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth, 0.5 + parseInt(region[2], 10) * grid.bucketHeight, grid.bucketWidth, grid.bucketHeight);\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method inspector\n         * @param {inspector} inspector\n         * @param {RenderingContext} context\n         */\n\n\n        Render.inspector = function (inspector, context) {\n          var engine = inspector.engine,\n              selected = inspector.selected,\n              render = inspector.render,\n              options = render.options,\n              bounds;\n\n          if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n          }\n\n          for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1, 2]);\n\n            switch (item.type) {\n              case 'body':\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n                break;\n\n              case 'constraint':\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA) point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n                break;\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n          } // render selection region\n\n\n          if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n          }\n\n          if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n        };\n        /**\n         * Description\n         * @method _createCanvas\n         * @private\n         * @param {} width\n         * @param {} height\n         * @return canvas\n         */\n\n\n        var _createCanvas = function _createCanvas(width, height) {\n          var canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n\n          canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          canvas.onselectstart = function () {\n            return false;\n          };\n\n          return canvas;\n        };\n        /**\n         * Gets the pixel ratio of the canvas.\n         * @method _getPixelRatio\n         * @private\n         * @param {HTMLElement} canvas\n         * @return {Number} pixel ratio\n         */\n\n\n        var _getPixelRatio = function _getPixelRatio(canvas) {\n          var context = canvas.getContext('2d'),\n              devicePixelRatio = window.devicePixelRatio || 1,\n              backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          return devicePixelRatio / backingStorePixelRatio;\n        };\n        /**\n         * Gets the requested texture (an Image) via its path\n         * @method _getTexture\n         * @private\n         * @param {render} render\n         * @param {string} imagePath\n         * @return {Image} texture\n         */\n\n\n        var _getTexture = function _getTexture(render, imagePath) {\n          var image = render.textures[imagePath];\n          if (image) return image;\n          image = render.textures[imagePath] = new Image();\n          image.src = imagePath;\n          return image;\n        };\n        /**\n         * Applies the background to the canvas using CSS.\n         * @method applyBackground\n         * @private\n         * @param {render} render\n         * @param {string} background\n         */\n\n\n        var _applyBackground = function _applyBackground(render, background) {\n          var cssBackground = background;\n          if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n          render.canvas.style.background = cssBackground;\n          render.canvas.style.backgroundSize = \"contain\";\n          render.currentBackground = background;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A back-reference to the `Matter.Render` module.\n         *\n         * @property controller\n         * @type render\n         */\n\n        /**\n         * A reference to the `Matter.Engine` instance to be used.\n         *\n         * @property engine\n         * @type engine\n         */\n\n        /**\n         * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n         *\n         * @property element\n         * @type HTMLElement\n         * @default null\n         */\n\n        /**\n         * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n         *\n         * @property canvas\n         * @type HTMLCanvasElement\n         * @default null\n         */\n\n        /**\n         * The configuration options of the renderer.\n         *\n         * @property options\n         * @type {}\n         */\n\n        /**\n         * The target width in pixels of the `render.canvas` to be created.\n         *\n         * @property options.width\n         * @type number\n         * @default 800\n         */\n\n        /**\n         * The target height in pixels of the `render.canvas` to be created.\n         *\n         * @property options.height\n         * @type number\n         * @default 600\n         */\n\n        /**\n         * A flag that specifies if `render.bounds` should be used when rendering.\n         *\n         * @property options.hasBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Bounds` object that specifies the drawing view region.\n         * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n         * This allows for creating views that can pan or zoom around the scene.\n         * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n        /**\n         * The 2d rendering context from the `render.canvas` element.\n         *\n         * @property context\n         * @type CanvasRenderingContext2D\n         */\n\n        /**\n         * The sprite texture cache.\n         *\n         * @property textures\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Grid\": 6,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }],\n    32: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.RenderPixi` module is an example renderer using pixi.js.\n      * See also `Matter.Render` for a canvas based renderer.\n      *\n      * @class RenderPixi\n      * @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n      * It will likely be moved to its own repository (but maintenance will be limited).\n      */\n      var RenderPixi = {};\n      module.exports = RenderPixi;\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Common = _dereq_('../core/Common');\n\n      var Events = _dereq_('../core/Events');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new Pixi.js WebGL renderer\n         * @method create\n         * @param {object} options\n         * @return {RenderPixi} A new renderer\n         * @deprecated\n         */\n\n\n        RenderPixi.create = function (options) {\n          Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n          var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n              width: 800,\n              height: 600,\n              background: '#fafafa',\n              wireframeBackground: '#222',\n              hasBounds: false,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false\n            }\n          };\n          var render = Common.extend(defaults, options),\n              transparent = !render.options.wireframes && render.options.background === 'transparent'; // init pixi\n\n          render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n          };\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n          render.container = render.container || new PIXI.Container();\n          render.spriteContainer = render.spriteContainer || new PIXI.Container();\n          render.canvas = render.canvas || render.renderer.view;\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.options.width,\n              y: render.options.height\n            }\n          }; // event listeners\n\n          Events.on(render.engine, 'beforeUpdate', function () {\n            RenderPixi.clear(render);\n          }); // caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // use a sprite batch for performance\n\n          render.container.addChild(render.spriteContainer); // insert canvas\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n          } // prevent menus on canvas\n\n\n          render.canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          render.canvas.onselectstart = function () {\n            return false;\n          };\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Clears the scene graph\n         * @method clear\n         * @param {RenderPixi} render\n         * @deprecated\n         */\n\n\n        RenderPixi.clear = function (render) {\n          var container = render.container,\n              spriteContainer = render.spriteContainer; // clear stage container\n\n          while (container.children[0]) {\n            container.removeChild(container.children[0]);\n          } // clear sprite batch\n\n\n          while (spriteContainer.children[0]) {\n            spriteContainer.removeChild(spriteContainer.children[0]);\n          }\n\n          var bgSprite = render.sprites['bg-0']; // clear caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // set background sprite\n\n          render.sprites['bg-0'] = bgSprite;\n          if (bgSprite) container.addChildAt(bgSprite, 0); // add sprite batch back into container\n\n          render.container.addChild(render.spriteContainer); // reset background state\n\n          render.currentBackground = null; // reset bounds transforms\n\n          container.scale.set(1, 1);\n          container.position.set(0, 0);\n        };\n        /**\n         * Sets the background of the canvas \n         * @method setBackground\n         * @param {RenderPixi} render\n         * @param {string} background\n         * @deprecated\n         */\n\n\n        RenderPixi.setBackground = function (render, background) {\n          if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n              // if solid background color\n              var color = Common.colorToNumber(background);\n              render.renderer.backgroundColor = color; // remove background sprite if existing\n\n              if (bgSprite) render.container.removeChild(bgSprite);\n            } else {\n              // initialise background sprite if needed\n              if (!bgSprite) {\n                var texture = _getTexture(render, background);\n\n                bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                bgSprite.position.x = 0;\n                bgSprite.position.y = 0;\n                render.container.addChildAt(bgSprite, 0);\n              }\n            }\n\n            render.currentBackground = background;\n          }\n        };\n        /**\n         * Description\n         * @method world\n         * @param {engine} engine\n         * @deprecated\n         */\n\n\n        RenderPixi.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              renderer = render.renderer,\n              container = render.container,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              constraints = [],\n              i;\n\n          if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n          } else {\n            RenderPixi.setBackground(render, options.background);\n          } // handle bounds\n\n\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n\n          if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n          } else {\n            constraints = allConstraints;\n          }\n\n          for (i = 0; i < bodies.length; i++) {\n            RenderPixi.body(render, bodies[i]);\n          }\n\n          for (i = 0; i < constraints.length; i++) {\n            RenderPixi.constraint(render, constraints[i]);\n          }\n\n          renderer.render(container);\n        };\n        /**\n         * Description\n         * @method constraint\n         * @param {engine} engine\n         * @param {constraint} constraint\n         * @deprecated\n         */\n\n\n        RenderPixi.constraint = function (render, constraint) {\n          var engine = render.engine,\n              bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB,\n              container = render.container,\n              constraintRender = constraint.render,\n              primitiveId = 'c-' + constraint.id,\n              primitive = render.primitives[primitiveId]; // initialise constraint primitive if not existing\n\n          if (!primitive) primitive = render.primitives[primitiveId] = new PIXI.Graphics(); // don't render if constraint does not have two end points\n\n          if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n          } // add to scene graph if not already there\n\n\n          if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // render the constraint on every update, since they can change dynamically\n\n          primitive.clear();\n          primitive.beginFill(0, 0);\n          primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n\n          if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n          } else {\n            primitive.moveTo(pointA.x, pointA.y);\n          }\n\n          if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n          } else {\n            primitive.lineTo(pointB.x, pointB.y);\n          }\n\n          primitive.endFill();\n        };\n        /**\n         * Description\n         * @method body\n         * @param {engine} engine\n         * @param {body} body\n         * @deprecated\n         */\n\n\n        RenderPixi.body = function (render, body) {\n          var engine = render.engine,\n              bodyRender = body.render;\n          if (!bodyRender.visible) return;\n\n          if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer; // initialise body sprite if not existing\n\n            if (!sprite) sprite = render.sprites[spriteId] = _createBodySprite(render, body); // add to scene graph if not already there\n\n            if (Common.indexOf(spriteContainer.children, sprite) === -1) spriteContainer.addChild(sprite); // update body sprite\n\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n          } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container; // initialise body primitive if not existing\n\n            if (!primitive) {\n              primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n              primitive.initialAngle = body.angle;\n            } // add to scene graph if not already there\n\n\n            if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // update body primitive\n\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n          }\n        };\n        /**\n         * Creates a body sprite\n         * @method _createBodySprite\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Sprite} sprite\n         * @deprecated\n         */\n\n\n        var _createBodySprite = function _createBodySprite(render, body) {\n          var bodyRender = body.render,\n              texturePath = bodyRender.sprite.texture,\n              texture = _getTexture(render, texturePath),\n              sprite = new PIXI.Sprite(texture);\n\n          sprite.anchor.x = body.render.sprite.xOffset;\n          sprite.anchor.y = body.render.sprite.yOffset;\n          return sprite;\n        };\n        /**\n         * Creates a body primitive\n         * @method _createBodyPrimitive\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Graphics} graphics\n         * @deprecated\n         */\n\n\n        var _createBodyPrimitive = function _createBodyPrimitive(render, body) {\n          var bodyRender = body.render,\n              options = render.options,\n              primitive = new PIXI.Graphics(),\n              fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n              strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleWireframe = Common.colorToNumber('#bbb'),\n              strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n              part;\n          primitive.clear(); // handle compound parts\n\n          for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n              primitive.beginFill(fillStyle, 1);\n              primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n              primitive.beginFill(0, 0);\n              primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n              primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n            primitive.endFill(); // angle indicator\n\n            if (options.showAngleIndicator || options.showAxes) {\n              primitive.beginFill(0, 0);\n\n              if (options.wireframes) {\n                primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n              } else {\n                primitive.lineStyle(1, strokeStyleIndicator);\n              }\n\n              primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n              primitive.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2 - body.position.x, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2 - body.position.y);\n              primitive.endFill();\n            }\n          }\n\n          return primitive;\n        };\n        /**\n         * Gets the requested texture (a PIXI.Texture) via its path\n         * @method _getTexture\n         * @private\n         * @param {RenderPixi} render\n         * @param {string} imagePath\n         * @return {PIXI.Texture} texture\n         * @deprecated\n         */\n\n\n        var _getTexture = function _getTexture(render, imagePath) {\n          var texture = render.textures[imagePath];\n          if (!texture) texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n          return texture;\n        };\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }]\n  }, {}, [30])(30);\n});"],"sourceRoot":""}