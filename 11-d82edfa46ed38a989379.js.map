{"version":3,"sources":["webpack:///./node_modules/matter-js/build/matter.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/taggedTemplateLiteralLoose.js","webpack:///./node_modules/lodash-es/_freeGlobal.js","webpack:///./node_modules/poly-decomp/src/index.js","webpack:///./node_modules/lodash-es/isObject.js","webpack:///./node_modules/lodash-es/_root.js","webpack:///./node_modules/lodash-es/now.js","webpack:///./node_modules/lodash-es/_Symbol.js","webpack:///./node_modules/lodash-es/_getRawTag.js","webpack:///./node_modules/lodash-es/_objectToString.js","webpack:///./node_modules/lodash-es/_baseGetTag.js","webpack:///./node_modules/lodash-es/isObjectLike.js","webpack:///./node_modules/lodash-es/isSymbol.js","webpack:///./node_modules/lodash-es/toNumber.js","webpack:///./node_modules/lodash-es/debounce.js"],"names":["global","require","module","exports","r","e","n","t","o","i","f","c","u","a","Error","code","p","call","length","1","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","../core/Common","../core/Sleeping","../geometry/Axes","../geometry/Bounds","../geometry/Vector","../geometry/Vertices","../render/Render","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","../core/Events","./Body","3","World","gravity","../constraint/Constraint","./Composite","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","./Pair","./SAT","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","./Detector","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","./Contact","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","../factory/Bodies","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","prevIndex","nextIndex","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","../body/Composite","../collision/Detector","../core/Mouse","./Constraint","14","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","Object","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","isFunction","isPlainObject","isString","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","this","self","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","../body/Body","../body/World","../collision/Grid","../collision/Pairs","../collision/Resolver","./Common","./Events","./Metrics","./Sleeping","16","eventNames","callback","name","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","./Plugin","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","width","clientHeight","height","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","clearTimeout","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","run","time","tick","stop","start","./Engine","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","./Bodies","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","30","RenderPixi","../collision/Contact","../collision/Pair","../collision/Query","../collision/SAT","../constraint/MouseConstraint","../core/Engine","../core/Matter","../core/Metrics","../core/Plugin","../core/Runner","../factory/Composites","../geometry/Svg","../render/RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","strings","raw","freeGlobal","__webpack_exports__","lineInt","l1","l2","a1","b1","c1","a2","b2","c2","det","scalar_eq","lineSegmentsIntersect","p1","p2","q1","q2","s","triangleArea","b","isLeft","isLeftOn","isRight","isRightOn","edges","polygonGetCutEdges","tmp1","tmp2","tmpPoly","nDiags","polygonIsReflex","polygonCanSee","polygonCopy","polygonAt","polygonSlice","cutEdges","polys","cutEdge","poly","polygonQuickDecomp","reflexVertices","steinerPoints","maxlevel","level","upperInt","lowerInt","upperDist","lowerDist","d","closestDist","upperIndex","lowerIndex","closestIndex","lowerPoly","upperPoly","getIntersectionPoint","sqdist","polygonAppend","polygonCanSee2","isSimple","num","collinear","removeDuplicatePoints","pi","points_eq","br","tmp","N","polygonReverse","tmpPoint1","tmpPoint2","thresholdAngle","ab","bc","magA","magB","from","to","tmpLine1","tmpLine2","dist","targetPoly","polygonClear","lodash_es_isObject","freeSelf","_root","_freeGlobal","Function","lodash_es_now","_Symbol","Symbol","objectProto","_getRawTag_hasOwnProperty","nativeObjectToString","symToStringTag","toStringTag","_getRawTag","isOwn","tag","unmasked","_objectToString_nativeObjectToString","_objectToString","nullTag","undefinedTag","_baseGetTag_symToStringTag","_baseGetTag","lodash_es_isObjectLike","symbolTag","lodash_es_isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","lodash_es_toNumber","other","valueOf","isBinary","FUNC_ERROR_TEXT","nativeMax","nativeMin","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","thisArg","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","cancel","flush"],"mappings":"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","file":"11-d82edfa46ed38a989379.js","sourcesContent":["/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nmodule.exports = _taggedTemplateLiteralLoose;","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","module.exports = {\n    decomp: polygonDecomp,\n    quickDecomp: polygonQuickDecomp,\n    isSimple: polygonIsSimple,\n    removeCollinearPoints: polygonRemoveCollinearPoints,\n    removeDuplicatePoints: polygonRemoveDuplicatePoints,\n    makeCCW: polygonMakeCCW\n};\n\n/**\n * Compute the intersection between two lines.\n * @static\n * @method lineInt\n * @param  {Array}  l1          Line vector 1\n * @param  {Array}  l2          Line vector 2\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\n * @return {Array}              The intersection point.\n */\nfunction lineInt(l1,l2,precision){\n    precision = precision || 0;\n    var i = [0,0]; // point\n    var a1, b1, c1, a2, b2, c2, det; // scalars\n    a1 = l1[1][1] - l1[0][1];\n    b1 = l1[0][0] - l1[1][0];\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\n    a2 = l2[1][1] - l2[0][1];\n    b2 = l2[0][0] - l2[1][0];\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\n    det = a1 * b2 - a2*b1;\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\n        i[0] = (b2 * c1 - b1 * c2) / det;\n        i[1] = (a1 * c2 - a2 * c1) / det;\n    }\n    return i;\n}\n\n/**\n * Checks if two line segments intersects.\n * @method segmentsIntersect\n * @param {Array} p1 The start vertex of the first line segment.\n * @param {Array} p2 The end vertex of the first line segment.\n * @param {Array} q1 The start vertex of the second line segment.\n * @param {Array} q2 The end vertex of the second line segment.\n * @return {Boolean} True if the two line segments intersect\n */\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\n\tvar dx = p2[0] - p1[0];\n\tvar dy = p2[1] - p1[1];\n\tvar da = q2[0] - q1[0];\n\tvar db = q2[1] - q1[1];\n\n\t// segments are parallel\n\tif((da*dy - db*dx) === 0){\n\t\treturn false;\n\t}\n\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\n\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\n}\n\n/**\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\n * @static\n * @method area\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @return {Number}\n */\nfunction triangleArea(a,b,c){\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\n}\n\nfunction isLeft(a,b,c){\n    return triangleArea(a,b,c) > 0;\n}\n\nfunction isLeftOn(a,b,c) {\n    return triangleArea(a, b, c) >= 0;\n}\n\nfunction isRight(a,b,c) {\n    return triangleArea(a, b, c) < 0;\n}\n\nfunction isRightOn(a,b,c) {\n    return triangleArea(a, b, c) <= 0;\n}\n\nvar tmpPoint1 = [],\n    tmpPoint2 = [];\n\n/**\n * Check if three points are collinear\n * @method collinear\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\n * @return {Boolean}\n */\nfunction collinear(a,b,c,thresholdAngle) {\n    if(!thresholdAngle){\n        return triangleArea(a, b, c) === 0;\n    } else {\n        var ab = tmpPoint1,\n            bc = tmpPoint2;\n\n        ab[0] = b[0]-a[0];\n        ab[1] = b[1]-a[1];\n        bc[0] = c[0]-b[0];\n        bc[1] = c[1]-b[1];\n\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\n            angle = Math.acos(dot/(magA*magB));\n        return angle < thresholdAngle;\n    }\n}\n\nfunction sqdist(a,b){\n    var dx = b[0] - a[0];\n    var dy = b[1] - a[1];\n    return dx * dx + dy * dy;\n}\n\n/**\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\n * @method at\n * @param  {Number} i\n * @return {Array}\n */\nfunction polygonAt(polygon, i){\n    var s = polygon.length;\n    return polygon[i < 0 ? i % s + s : i % s];\n}\n\n/**\n * Clear the polygon data\n * @method clear\n * @return {Array}\n */\nfunction polygonClear(polygon){\n    polygon.length = 0;\n}\n\n/**\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\n * @method append\n * @param {Polygon} poly The polygon to get points from.\n * @param {Number}  from The vertex index in \"poly\".\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\n * @return {Array}\n */\nfunction polygonAppend(polygon, poly, from, to){\n    for(var i=from; i<to; i++){\n        polygon.push(poly[i]);\n    }\n}\n\n/**\n * Make sure that the polygon vertices are ordered counter-clockwise.\n * @method makeCCW\n */\nfunction polygonMakeCCW(polygon){\n    var br = 0,\n        v = polygon;\n\n    // find bottom right point\n    for (var i = 1; i < polygon.length; ++i) {\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\n            br = i;\n        }\n    }\n\n    // reverse poly if clockwise\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\n        polygonReverse(polygon);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Reverse the vertices in the polygon\n * @method reverse\n */\nfunction polygonReverse(polygon){\n    var tmp = [];\n    var N = polygon.length;\n    for(var i=0; i!==N; i++){\n        tmp.push(polygon.pop());\n    }\n    for(var i=0; i!==N; i++){\n\t\tpolygon[i] = tmp[i];\n    }\n}\n\n/**\n * Check if a point in the polygon is a reflex point\n * @method isReflex\n * @param  {Number}  i\n * @return {Boolean}\n */\nfunction polygonIsReflex(polygon, i){\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\n}\n\nvar tmpLine1=[],\n    tmpLine2=[];\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee(polygon, a,b) {\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\n\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\n        return false;\n    }\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\n            continue;\n        }\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\n            l1[0] = polygonAt(polygon, a);\n            l1[1] = polygonAt(polygon, b);\n            l2[0] = polygonAt(polygon, i);\n            l2[1] = polygonAt(polygon, i + 1);\n            p = lineInt(l1,l2);\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee2\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee2(polygon, a,b) {\n    // for each edge\n    for (var i = 0; i !== polygon.length; ++i) {\n        // ignore incident edges\n        if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b){\n            continue;\n        }\n        if( lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i+1)) ){\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Copy the polygon from vertex i to vertex j.\n * @method copy\n * @param  {Number} i\n * @param  {Number} j\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\n * @return {Polygon}                The resulting copy.\n */\nfunction polygonCopy(polygon, i,j,targetPoly){\n    var p = targetPoly || [];\n    polygonClear(p);\n    if (i < j) {\n        // Insert all vertices from i to j\n        for(var k=i; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n    } else {\n\n        // Insert vertices 0 to j\n        for(var k=0; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n        // Insert vertices i to end\n        for(var k=i; k<polygon.length; k++){\n            p.push(polygon[k]);\n        }\n    }\n\n    return p;\n}\n\n/**\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\n * @method getCutEdges\n * @return {Array}\n */\nfunction polygonGetCutEdges(polygon) {\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\n    var nDiags = Number.MAX_VALUE;\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(polygon, i)) {\n            for (var j = 0; j < polygon.length; ++j) {\n                if (polygonCanSee(polygon, i, j)) {\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\n\n                    for(var k=0; k<tmp2.length; k++){\n                        tmp1.push(tmp2[k]);\n                    }\n\n                    if (tmp1.length < nDiags) {\n                        min = tmp1;\n                        nDiags = tmp1.length;\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\n                    }\n                }\n            }\n        }\n    }\n\n    return min;\n}\n\n/**\n * Decomposes the polygon into one or more convex sub-Polygons.\n * @method decomp\n * @return {Array} An array or Polygon objects.\n */\nfunction polygonDecomp(polygon){\n    var edges = polygonGetCutEdges(polygon);\n    if(edges.length > 0){\n        return polygonSlice(polygon, edges);\n    } else {\n        return [polygon];\n    }\n}\n\n/**\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\n * @method slice\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\n * @return {Array}\n */\nfunction polygonSlice(polygon, cutEdges){\n    if(cutEdges.length === 0){\n\t\treturn [polygon];\n    }\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\n\n        var polys = [polygon];\n\n        for(var i=0; i<cutEdges.length; i++){\n            var cutEdge = cutEdges[i];\n            // Cut all polys\n            for(var j=0; j<polys.length; j++){\n                var poly = polys[j];\n                var result = polygonSlice(poly, cutEdge);\n                if(result){\n                    // Found poly! Cut and quit\n                    polys.splice(j,1);\n                    polys.push(result[0],result[1]);\n                    break;\n                }\n            }\n        }\n\n        return polys;\n    } else {\n\n        // Was given one edge\n        var cutEdge = cutEdges;\n        var i = polygon.indexOf(cutEdge[0]);\n        var j = polygon.indexOf(cutEdge[1]);\n\n        if(i !== -1 && j !== -1){\n            return [polygonCopy(polygon, i,j),\n                    polygonCopy(polygon, j,i)];\n        } else {\n            return false;\n        }\n    }\n}\n\n/**\n * Checks that the line segments of this polygon do not intersect each other.\n * @method isSimple\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\n * @return {Boolean}\n * @todo Should it check all segments with all others?\n */\nfunction polygonIsSimple(polygon){\n    var path = polygon, i;\n    // Check\n    for(i=0; i<path.length-1; i++){\n        for(var j=0; j<i-1; j++){\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\n                return false;\n            }\n        }\n    }\n\n    // Check the segment between the last and the first point to all others\n    for(i=1; i<path.length-2; i++){\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\n\tdelta = delta || 0;\n\tvar a1 = p2[1] - p1[1];\n\tvar b1 = p1[0] - p2[0];\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\n\tvar a2 = q2[1] - q1[1];\n\tvar b2 = q1[0] - q2[0];\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\n\tvar det = (a1 * b2) - (a2 * b1);\n\n\tif(!scalar_eq(det,0,delta)){\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\n\t} else {\n\t\treturn [0,0];\n    }\n}\n\n/**\n * Quickly decompose the Polygon into convex sub-polygons.\n * @method quickDecomp\n * @param  {Array} result\n * @param  {Array} [reflexVertices]\n * @param  {Array} [steinerPoints]\n * @param  {Number} [delta]\n * @param  {Number} [maxlevel]\n * @param  {Number} [level]\n * @return {Array}\n */\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\n    maxlevel = maxlevel || 100;\n    level = level || 0;\n    delta = delta || 25;\n    result = typeof(result)!==\"undefined\" ? result : [];\n    reflexVertices = reflexVertices || [];\n    steinerPoints = steinerPoints || [];\n\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\n    var lowerPoly=[], upperPoly=[]; // polygons\n    var poly = polygon,\n        v = polygon;\n\n    if(v.length < 3){\n\t\treturn result;\n    }\n\n    level++;\n    if(level > maxlevel){\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\n        return result;\n    }\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(poly, i)) {\n            reflexVertices.push(poly[i]);\n            upperDist = lowerDist = Number.MAX_VALUE;\n\n\n            for (var j = 0; j < polygon.length; ++j) {\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\n                        d = sqdist(poly[i], p);\n                        if (d < lowerDist) { // keep only the closest intersection\n                            lowerDist = d;\n                            lowerInt = p;\n                            lowerIndex = j;\n                        }\n                    }\n                }\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\n                        d = sqdist(poly[i], p);\n                        if (d < upperDist) {\n                            upperDist = d;\n                            upperInt = p;\n                            upperIndex = j;\n                        }\n                    }\n                }\n            }\n\n            // if there are no vertices to connect to, choose a point in the middle\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\n                steinerPoints.push(p);\n\n                if (i < upperIndex) {\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    if (lowerIndex !== 0){\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\n                    }\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\n                        polygonAppend(lowerPoly, poly,i,poly.length);\n                    }\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\n                }\n            } else {\n                // connect to the closest point within the triangle\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\n\n                if (lowerIndex > upperIndex) {\n                    upperIndex += polygon.length;\n                }\n                closestDist = Number.MAX_VALUE;\n\n                if(upperIndex < lowerIndex){\n                    return result;\n                }\n\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\n                    if (\n                        isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) &&\n                        isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))\n                    ) {\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\n                        if (d < closestDist && polygonCanSee2(poly, i, j)) {\n                            closestDist = d;\n                            closestIndex = j % polygon.length;\n                        }\n                    }\n                }\n\n                if (i < closestIndex) {\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\n                    if (closestIndex !== 0){\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\n                    }\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        polygonAppend(lowerPoly, poly,i,v.length);\n                    }\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\n                }\n            }\n\n            // solve smallest poly first\n            if (lowerPoly.length < upperPoly.length) {\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            } else {\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            }\n\n            return result;\n        }\n    }\n    result.push(polygon);\n\n    return result;\n}\n\n/**\n * Remove collinear points in the polygon.\n * @method removeCollinearPoints\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\n * @return {Number}           The number of points removed\n */\nfunction polygonRemoveCollinearPoints(polygon, precision){\n    var num = 0;\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\n            // Remove the middle point\n            polygon.splice(i%polygon.length,1);\n            num++;\n        }\n    }\n    return num;\n}\n\n/**\n * Remove duplicate points in the polygon.\n * @method removeDuplicatePoints\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\n */\nfunction polygonRemoveDuplicatePoints(polygon, precision){\n    for(var i=polygon.length-1; i>=1; --i){\n        var pi = polygon[i];\n        for(var j=i-1; j>=0; --j){\n            if(points_eq(pi, polygon[j], precision)){\n                polygon.splice(i,1);\n                continue;\n            }\n        }\n    }\n}\n\n/**\n * Check if two scalars are equal\n * @static\n * @method eq\n * @param  {Number} a\n * @param  {Number} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction scalar_eq(a,b,precision){\n    precision = precision || 0;\n    return Math.abs(a-b) <= precision;\n}\n\n/**\n * Check if two points are equal\n * @static\n * @method points_eq\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction points_eq(a,b,precision){\n    return scalar_eq(a[0],b[0],precision) && scalar_eq(a[1],b[1],precision);\n}\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n"],"sourceRoot":""}