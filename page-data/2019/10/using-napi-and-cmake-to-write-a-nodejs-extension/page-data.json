{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019/10/using-napi-and-cmake-to-write-a-nodejs-extension","webpackCompilationHash":"f81d09daa791dac990dd","result":{"data":{"markdownRemark":{"html":"<p>以前为 Node.js 编写拓展的时候，使用的是 Node.js 的 C++ addon API，直接使用\nv8 提供的 api 和 Node.js 打交道。使用 C++ Addon 的 API 有个缺点就是\nABI 层面不兼容，升级 Node.js 之后 extension 要重新编译。</p>\n<p>现在 Node.js 提供了 N-API。这个 API 是 C 层面的支持（也有 C++ 绑定）。同时，使用 N-API\n写出来的拓展是 ABI 兼容的。</p>\n<p>而使用 N-API 编写 Node.js 扩展不一定用 node-gyp 进行编译，也可以使用 cmake，\n这对一些使用 CMake 的 C++ 项目可以说非常友好了。</p>\n<h1>使用方法</h1>\n<p>按照<a href=\"https://github.com/nodejs/node-addon-api/blob/master/doc/cmake-js.md\">官方教程</a>：</p>\n<pre><code>$ yarn add node-addon-api cmake-js bindings\n</code></pre>\n<p>然后在 <code>package.json</code> 里面加上一句：</p>\n<pre><code class=\"language-json\">\"scripts\": {\n  \"install\": \"cmake-js compile\"\n}\n</code></pre>\n<p>然后愉快的 <code>yarn install</code> 就可以使用了。</p>\n<p>贴一下我的 CMakeList.txt 配置：</p>\n<pre><code>project (zparser)\ncmake_minimum_required(VERSION 3.15)\n\nset(CMAKE_CXX_STANDARD 17)\n\ninclude_directories(${CMAKE_JS_INC})\nfile(GLOB SOURCE_FILES \"src/*.cc\" \"src/*.h\")\nadd_library(${PROJECT_NAME} SHARED ${SOURCE_FILES} ${CMAKE_JS_SRC})\nset_target_properties(${PROJECT_NAME} PROPERTIES PREFIX \"\" SUFFIX \".node\")\n\nset(JSON_BuildTests OFF CACHE INTERNAL \"\")\n\n# Include N-API wrappers\nexecute_process(COMMAND node -p \"require('node-addon-api').include\"\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        OUTPUT_VARIABLE NODE_ADDON_API_DIR\n        )\nstring(REPLACE \"\\n\" \"\" NODE_ADDON_API_DIR ${NODE_ADDON_API_DIR})\nstring(REPLACE \"\\\"\" \"\" NODE_ADDON_API_DIR ${NODE_ADDON_API_DIR})\ntarget_include_directories(${PROJECT_NAME})\ntarget_link_libraries(${PROJECT_NAME} ${CMAKE_JS_LIB})\n</code></pre>\n<p>可以说非常简单易用了。</p>\n<h1>Api 使用</h1>\n<p>C++ <a href=\"https://github.com/nodejs/node-addon-api/blob/master/doc/value.md\">官方文档</a> 的介绍还是比较简陋的，如果不了解 C-API 用起来有些地方会比较困惑。\n但是如果用过之前用过 v8 的 addon-api 的话，还是比较容易理解的。</p>\n<p>大部分的 Object 和 Array 等操作都有，你甚至可以用 <a href=\"https://github.com/nodejs/node-addon-api/blob/master/doc/object_wrap.md\">ObjectWrap</a> 去定义自己\n的 Class:</p>\n<pre><code class=\"language-cpp\">class Example : public Napi::ObjectWrap&#x3C;Example> {\n  public:\n    static Napi::Object Init(Napi::Env env, Napi::Object exports);\n    Example(const Napi::CallbackInfo &#x26;info);\n\n  private:\n    static Napi::FunctionReference constructor;\n    double _value;\n    Napi::Value GetValue(const Napi::CallbackInfo &#x26;info);\n    Napi::Value SetValue(const Napi::CallbackInfo &#x26;info);\n};\n</code></pre>\n<p>我目前没有发现的就是如何定义一个 Undefined 的 Value。所以用到 Undefined\n的时候，我就不得不用 C-API 去定义一个 <code>napi_value</code> 来用 undefined。好在\nC++ 的 API 可以和 C 混用：</p>\n<pre><code class=\"language-cpp\">napi_value* result = nullptr;\nif (napi_get_undefined(env, result) == napi_ok) {\n  // do something\n}\n</code></pre>\n<p>在 js 里面的使用也很简单，不过要配合 bindings 库使用：</p>\n<pre><code>const example = require('bindings')('example');\n</code></pre>","frontmatter":{"date":"2019-10-13T21:00:00.000Z","path":"/2019/10/using-napi-and-cmake-to-write-a-nodejs-extension","title":"使用 N-API 和 CMake 为 Node.js 添加 C++ 拓展","permalink":null,"headerImage":null,"tags":["javascript","nodejs","extension","拓展","教程","C++"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"title":"使用 N-API 和 CMake 为 Node.js 添加 C++ 拓展"}}}