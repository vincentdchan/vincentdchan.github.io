{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019/02/parse-javascript-with-ocaml","result":{"data":{"markdownRemark":{"html":"<h1>起因</h1>\n<p>最近在写一个关于 JavaScript 的静态分析器，作为我的毕业设计。我写静态分析主要是为了 ES6 层面的语法做更好的 DCE(Dead Code Elimination)。我选择 OCaml 来实现这个静态分析工具，用 flow 来 parse JavaScript。</p>\n<h1>为什么选择 OCaml</h1>\n<p>在和导师讨论题目的时候，我跟导师说这个项目用 Java 来写，主要是 Java 比较容易说服老师。实际上开始写的时候就塞了很多私货，我的第一个版本其实用的是 Scala，原因是：</p>\n<ul>\n<li>Scala 里面的很多语言特性非常有 FP 风格，也很适合用来写编译器和静态分析工具。</li>\n<li>运行在 JVM 上面更容易做多线程，可以使静态分析过程有较大的提升。</li>\n<li>如果有需要，Scala 可以编译成 JS。JVM 上面也有很多可以和 JS 联动的方案，方便和其他 JS library 联动。</li>\n</ul>\n<p>但是开始使用 Scala 的时候却发现了许多问题：</p>\n<ul>\n<li>我使用的 Parser 和 AST 结构都是 Java 写的（使用了 Graal.js 的 Parser），因此无法使用 Scala 的 case class 风格，这意味着我要在 Scala 里面写 Java Style 的代码，我表示很拒绝。我当然可以用 implicit 语法写一层转换层，但是我觉得这样很蛋疼，所以放弃。</li>\n<li>我要进行的静态分析是基于图（Graph）的，似乎没办法进行并行计算，即使可以，也会有超级多 overhead，还不如使用单线程。</li>\n<li>巨慢的编译速度和启动时间。编译速度不说了。运行速度 Scala 应该是很快的，但是启动（预热）却很慢。</li>\n</ul>\n<p>种种蛋疼的情况让我重新审视用 Scala 是不是特别好的方案，我想要一门执行速度相对较快，语法对写编译器相对友好的语言。Scala 已经很接近了，但是还不够。这让我想起之前用过 OCaml 来写过编译器，感觉代数形式的数据结构天生对编译器和静态分析非常友好。而且有两个项目非常启发到我：</p>\n<ul>\n<li><strong><a href=\"https://flow.org/\">Flow</a></strong>：静态分析工具，但是已经演化到类似 TypeScript 那样，变成一门语言了。我个人用过 flow，但是感觉非常慢，比 TypeScript 慢很多，但是我觉得不是 OCaml 慢，而是 flow 本身设计的问题。设计 TypeScript 的 Anders Hejlsberg 毕竟是编译器领域的大牛，很多坑都踩过，像 TypeScript 和 VSCode 联动体验这么好肯定是经过优良设计的。</li>\n<li><strong><a href=\"https://bucklescript.github.io\">BuckleScript</a></strong>：把 OCaml 编译到 JS 的编译器（其实也算一门语言？）。作者号称编译速度最快的语言，编译速度比 TypeScript 还快，并附上了 benchmark。这点也可以理解。毕竟 OCaml 这门语言比 TypeScript 简单太多了。这让我看到了一线生机，OCaml 写出来的编译器也可以很快的啊。</li>\n</ul>\n<h2>优点：</h2>\n<ul>\n<li>ADT</li>\n<li>冷启动速度却可以秒杀 Scala。想象一下编译几个文件的项目，Scala 还要等 JVM 预热才能达到峰值，其实很蛋疼。</li>\n<li>编译速度很快（相比 Scala）</li>\n</ul>\n<h2>缺点：</h2>\n<ul>\n<li>现在 OCaml 依然没有办法实现真正意义上的多线程：有 GIL。而我觉得这不是痛点，而且 multi-core OCaml 准备推出了（2020 年？）。</li>\n<li>如果需要和 JS 联动，需要编译成 JS</li>\n</ul>\n<h1>使用 Flow Parser</h1>\n<p><strong>Github:</strong> <a href=\"https://github.com/facebook/flow\">https://github.com/facebook/flow</a></p>\n<p>Flow 是利器。</p>\n<p>自己从头开始写 ES 的 Parser 是不太现实的。很幸运 flow 就提供了这么一个工具。Flow 的代码结构还是蛮清晰，我一看项目目录基本了解各个模块的作用，而 parser 是作为独立的一部分：<a href=\"https://github.com/facebook/flow/tree/master/src/parser\">Flow Parser</a></p>\n<p>AST 定义：<a href=\"https://github.com/facebook/flow/blob/master/src/parser/flow_ast.ml\">https://github.com/facebook/flow/blob/master/src/parser/flow_ast.ml</a></p>\n<p>Flow 的 AST 都写在一个文件里面，我们看 program 的定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">type</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> program <span class=\"token operator\">=</span> <span class=\"token type_variable function\">'M</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Statement</span><span class=\"token punctuation\">.</span>t list <span class=\"token operator\">*</span> <span class=\"token type_variable function\">'M</span> <span class=\"token module variable\">Comment</span><span class=\"token punctuation\">.</span>t list <span class=\"token punctuation\">[</span><span class=\"token operator\">@@</span>deriving show<span class=\"token punctuation\">]</span></code></pre></div>\n<p>一个 program 就是 <code class=\"language-text\">list of Statment.t</code>。有两个泛型参数 <code class=\"language-text\">&#39;M</code> 和 <code class=\"language-text\">&#39;T</code> 充斥着整个 AST，虽然它的作用很巧妙，但是却并不是那么直观。实际上 parser 输出的结果中，<code class=\"language-text\">&#39;M</code> 和 <code class=\"language-text\">&#39;T</code> 都是 <code class=\"language-text\">Loc.t</code>，就是 AST 的位置信息，那么为什么需要两个范型呢？我们只要看 <code class=\"language-text\">Statement</code> 和 <code class=\"language-text\">Expression</code> 两个地方的定义就明白了：</p>\n<p><strong>Statement</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">  <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> t <span class=\"token operator\">=</span> <span class=\"token type_variable function\">'M</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> t'\n  <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> t' <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Block</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Block</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Break</span> <span class=\"token keyword\">of</span> <span class=\"token type_variable function\">'M</span> <span class=\"token module variable\">Break</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">ClassDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Class</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Continue</span> <span class=\"token keyword\">of</span> <span class=\"token type_variable function\">'M</span> <span class=\"token module variable\">Continue</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Debugger</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareClass</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">DeclareClass</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareExportDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">DeclareExportDeclaration</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareFunction</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">DeclareFunction</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareInterface</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Interface</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareModule</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">DeclareModule</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareModuleExports</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Type</span><span class=\"token punctuation\">.</span>annotation\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareTypeAlias</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">TypeAlias</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareOpaqueType</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">OpaqueType</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DeclareVariable</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">DeclareVariable</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">DoWhile</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">DoWhile</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Empty</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">ExportDefaultDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">ExportDefaultDeclaration</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">ExportNamedDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">ExportNamedDeclaration</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Expression</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Expression</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">For</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">For</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">ForIn</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">ForIn</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">ForOf</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">ForOf</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">FunctionDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Function</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">If</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">If</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">ImportDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">ImportDeclaration</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">InterfaceDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Interface</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Labeled</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Labeled</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Return</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Return</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Switch</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Switch</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Throw</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Throw</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Try</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Try</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">TypeAlias</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">TypeAlias</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">OpaqueType</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">OpaqueType</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">VariableDeclaration</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">VariableDeclaration</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">While</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">While</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">With</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">With</span><span class=\"token punctuation\">.</span>t</code></pre></div>\n<p><strong>Expression</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">  <span class=\"token keyword\">type</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> t <span class=\"token operator\">=</span> <span class=\"token type_variable function\">'T</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> t'\n  <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> t' <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Array</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Array</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">ArrowFunction</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Function</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Assignment</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Assignment</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Binary</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Binary</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Call</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Call</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Class</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Class</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Comprehension</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Comprehension</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Conditional</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Conditional</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Function</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Function</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Generator</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Generator</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Identifier</span> <span class=\"token keyword\">of</span> <span class=\"token type_variable function\">'T</span> <span class=\"token module variable\">Identifier</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Import</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">JSXElement</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">JSX</span><span class=\"token punctuation\">.</span>element\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">JSXFragment</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">JSX</span><span class=\"token punctuation\">.</span>fragment\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Literal</span> <span class=\"token keyword\">of</span> <span class=\"token module variable\">Literal</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Logical</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Logical</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Member</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Member</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">MetaProperty</span> <span class=\"token keyword\">of</span> <span class=\"token type_variable function\">'M</span> <span class=\"token module variable\">MetaProperty</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">New</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">New</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Object</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Object</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">OptionalCall</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">OptionalCall</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">OptionalMember</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">OptionalMember</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Sequence</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Sequence</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Super</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">TaggedTemplate</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">TaggedTemplate</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">TemplateLiteral</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">TemplateLiteral</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">This</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">TypeCast</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">TypeCast</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Unary</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Unary</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Update</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Update</span><span class=\"token punctuation\">.</span>t\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Yield</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'M</span><span class=\"token punctuation\">,</span> <span class=\"token type_variable function\">'T</span><span class=\"token punctuation\">)</span> <span class=\"token module variable\">Yield</span><span class=\"token punctuation\">.</span>t</code></pre></div>\n<p>上述代码就是在说，所有的 Expression 结点都会附上一个 <code class=\"language-text\">&#39;T</code> 信息，所有的 Statement 都会附上一个 <code class=\"language-text\">&#39;M</code> 信息，这就很容易理解了。所以这两个范型是用来区分 Statement 和 Expression 的。在 flow 里面进行 type infer 和 type check 的时候，实际上 <code class=\"language-text\">&#39;T</code> 会是 <code class=\"language-text\">(Loc.t * Type.t)</code>。这个是 type check 阶段附上的信息，而 Statement 不需要这个信息，所以它仍然是 <code class=\"language-text\">Loc.t</code>。举个类型推导例子 🌰 来说明 'T 附在表达式上的作用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var a = 1 + 1;\n\nvar a = ((1: &#39;T) + (1: &#39;T)): &#39;T\nvar a = ((1: number) + (1: number)): &#39;T\nvar a = ((1: number) + (1: number)): number\nvar a: number = ((1: number) + (1: number)): number</code></pre></div>\n<p>从上述过程可以推出 a 的类型是 number，这个类型信息挂在所有 expression 的 AST 的上面，而 var 语句的 node 不需要这个信息。</p>\n<h1>安装 Flow Parser</h1>\n<p>原本 <code class=\"language-text\">flow_parser</code> 可以从 opam 安装，但是我更新了 opam 之后似乎因为一些安全策略禁止包里面的 bash 脚本执行（当时社区发生了一件事，一个包的 bash 脚本把用户的整个 ~ 目录删掉，似乎是手滑写的脚本就发布了，后来 opam 对 bash 脚本做了些限制）。所以后来我只能 clone 了 flow 的代码本地进行安装</p>\n<p>进入 <code class=\"language-text\">src/parser</code> 目录执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> ocamlfind-install</code></pre></div>\n<p>即可安装成功。如果使用 ocamlbuild 编译，进入 <code class=\"language-text\">_tag</code> 文件，加上 flow<em>parser。我的 `</em>tag`:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">true: package(ppx_deriving.show), package(flow_parser), package(core_kernel)\n&lt;dist&gt;: -traverse</code></pre></div>\n<h1>使用方法</h1>\n<p>使用 <code class=\"language-text\">Flow_ast</code> 自带的 <code class=\"language-text\">pp</code> 和 <code class=\"language-text\">show</code> 方法可以把 AST 打印出来，前提是你要传入 <code class=\"language-text\">&#39;T</code> 和 <code class=\"language-text\">&#39;M</code> 的 pretty print 方法， 这里我把 <code class=\"language-text\">Loc.pp</code> 传进去即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">_</span> <span class=\"token operator\">=</span> <span class=\"token module variable\">Parser_flow</span><span class=\"token punctuation\">.</span>program code <span class=\"token keyword\">in</span>\n<span class=\"token module variable\">Flow_ast</span><span class=\"token punctuation\">.</span>show_program <span class=\"token module variable\">Loc</span><span class=\"token punctuation\">.</span>pp <span class=\"token module variable\">Loc</span><span class=\"token punctuation\">.</span>pp ast <span class=\"token operator\">|></span> print_endline<span class=\"token punctuation\">;</span></code></pre></div>\n<p>大功告成！</p>\n<h1>相关阅读</h1>\n<ul>\n<li>QuickJS 源码解读：<a href=\"https://diverse.space/2019/08/understanding-source-code-of-quickjs-1\">https://diverse.space/2019/08/understanding-source-code-of-quickjs-1</a></li>\n</ul>","excerpt":"起因 最近在写一个关于 JavaScript 的静态分析器，作为我的毕业设计。我写静态分析主要是为了 ES6 层面的语法做更好的 DCE(Dead Code Elimination)。我选择 OCaml 来实现这个静态分析工具，用 flow 来 parse JavaScript。 为什么选择 OCaml 在和导师讨论…","frontmatter":{"date":"2019-02-20","path":"/2019/02/parse-javascript-with-ocaml","title":"使用 OCaml 解析 JavaScript","permalink":null,"headerImage":null,"tags":null}}},"pageContext":{"title":"使用 OCaml 解析 JavaScript"}},"staticQueryHashes":["3128451518","3159585216","3649515864"]}