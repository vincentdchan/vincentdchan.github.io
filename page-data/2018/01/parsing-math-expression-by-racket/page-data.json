{"componentChunkName":"component---src-templates-blog-template-js","path":"/2018/01/parsing-math-expression-by-racket","webpackCompilationHash":"d859da4935aa7a689ed2","result":{"data":{"markdownRemark":{"html":"<p>当 Haskell 这些静态类型的函数式语言玩久了，就想尝试一下动态类型的函数式语言，比如 Lisp，最古老的编程语言之一。不过现在写 Lisp 是不现实，因为原始的 Lisp 是 dynamic scope 的，写起来会异常痛苦。所以我打算从 Lisp 的一些比较现代方言下手，比如说 Racket 这种广受赞誉的语言。</p>\n<p>看了一下官方文档之后感觉还是应该写点什么实际的东西感受一下，个人比较喜欢写数学表达式解析器了。之前写过一篇「<a href=\"/2017/10/parsing-math-expression-by-haskell/\">初窥Haskell：解析一个数学表达式</a>」。所以这次打算用 Racket 写解析一个数学表达式程序。</p>\n<p>Racket 不是一个“纯”的语言，所以在 Racket 里面写有副作用的代码是没有问题的，说不定还会有更高的效率。但是这次我没有这么做，因为受到 Haskell 的影响，所以我还是用“纯”函数式的方法去实现。</p>\n<pre><code class=\"language-scheme\">(define (char->op ch)\n  (cond\n    [(char=? ch #\\+) 'add]\n    [(char=? ch #\\-) 'sub]\n    [(char=? ch #\\*) 'mul]\n    [(char=? ch #\\/) 'div]))\n\n(struct token (type value)\n  #:prefab)\n\n(define (tokenizer content)\n  (letrec (\n    [char-list (string->list content)]\n    [my-tokenizer (lambda (reading-buffer number-buffer token-buffer)\n      (if (null? reading-buffer)\n        (if (null? number-buffer)\n          token-buffer ;;; 所有字符都已经解析完毕\n          (cons  ;;; 还有 number-buffer 的字符串\n            (token 'number \n              (string->number (list->string (reverse number-buffer)))) \n            token-buffer))\n        (let (\n          [first-char (car reading-buffer)]\n          [buffer-tail (cdr reading-buffer)]\n        ) (if (char-numeric? first-char) ;;; 当前字符是一个数字\n              (my-tokenizer buffer-tail (cons first-char number-buffer) token-buffer)\n              (if (null? number-buffer)\n                (let (\n                  [current-token (token 'operator (char->op first-char))])\n                  (my-tokenizer buffer-tail (list) (cons current-token token-buffer)))\n                (let (\n                  [number-token \n                    (token 'number \n                      (string->number \n                        (list->string \n                          (reverse number-buffer))))]\n                ) (my-tokenizer \n                    reading-buffer \n                    (list) \n                    (cons number-token token-buffer))))))))]\n  ) (my-tokenizer char-list (list) (list))))\n</code></pre>\n<p>以上代码实现了一个 tokenizer，是用尾递归的方法来实现的。</p>\n<p>Lisp 的括号语法一直饱受争议，但是这样做不是没有好处的，就是整个 Lisp 写起来其实没有太多复杂的语法，而且语法都显得很一致，很容易组合，而且 Racket 有很强的宏编程能力，关于这点我还没有了解。有人把 Lisp 理解成手写 AST(Abstract Syntax Tree)，这种说法我觉得也没有问题。</p>\n<p>一般的类 C 语言的变量名喜欢用下划线或者驼峰标记法来区分，而在 Racket 里面，则可以用 <em>this-is-a-variable</em> 这种小短杠来表示，个人觉得看上去还是很舒服的。另一方面，很多标点符号也可以用来作为变量名，比如 <em>string?</em> 是一个用来判断变量是否为 <em>string</em> 的函数。比如 <em>string->numer</em> 用来表示字符串转数字的函数，个人感觉非常直观。</p>\n<p>和 Haskell 相比起来会麻烦一点的地方就是要自己去判断变量的类型，但是这也意味着给语言提供更大的灵活性。</p>\n<pre><code class=\"language-scheme\">(define (get-precedence x) \n  (match x\n    ['add 1]\n    ['sub 1]\n    ['mul 2]\n    ['div 2]))\n\n(define (eval tokens)\n  (letrec (\n    [get-handler (lambda (op)\n                  (match op\n                    ['add +]\n                    ['sub -]\n                    ['mul *]\n                    ['div /]))]\n    [my-eval (lambda (tokens num-stack op-stack)\n                (if (null? tokens)\n                  (match op-stack\n                    [null (car num-stack)]\n                    [(cons top-op op-stack-tail)\n                      (let* \n                        (\n                          [num1 (car num-stack)]\n                          [num2 (car (cdr num-stack))]\n                          [num-stack-tail (cdr (cdr num-stack))]\n                          [handler (get-handler top-op)]\n                          [result (handler num1 num2)]\n                        )\n                        (my-eval (list) (cons result num-stack-tail) op-stack-tail))])\n                  (let* (\n                    [next-op (token-value (car tokens))]\n                    [next-number (token-value (car (cdr tokens)))]\n                    [tokens-tail (cdr (cdr tokens))]\n                  ) (match op-stack\n                      [null \n                        (my-eval \n                          tokens-tail \n                          (cons next-number num-stack) \n                          (cons next-op op-stack))]\n                      [(cons top-op op-stack-tail)\n                        (let* (\n                            [op-stack-tail (cdr op-stack)]\n                            [top-op (car op-stack)]\n                            [top-op-precedence (get-precedence top-op)]\n                            [next-op-precedence (get-precedence next-op)]\n                          ) (if (> next-op-precedence top-op-precedence)\n                              (my-eval \n                                tokens-tail \n                                (cons next-number num-stack) \n                                (cons next-op op-stack))\n                              (let* (\n                                [num1 (car num-stack)]\n                                [num2 (car (cdr num-stack))]\n                                [num-stack-tail (cdr (cdr num-stack))]\n                                [handler (get-handler top-op)]\n                                [result (handler num1 num2)]\n                              ) (my-eval tokens (cons result num-stack-tail) op-stack-tail))))]))))]\n    [num (token-value (car tokens))]\n    [token-tail (cdr tokens)]\n  ) (my-eval token-tail (list num) (list))))\n</code></pre>\n<p>上述代码定义了一个 eval 函数，用优先级解析的方法去解析上面写的函数生成的 tokens</p>\n<p>代码写起来会比 Haskell 版本的稍长一点，但是个人感觉非常清晰，语法也很一致和漂亮。个人感觉是 Racket 确实是一门非常漂亮的语言，也没有像 Haskell 玩各种概念这么烧脑，还是动态类型的，平时娱乐一下开拓一下眼界感觉非常好。</p>","frontmatter":{"date":"2018-01-28T19:09:00.000Z","path":null,"title":"初窥 Racket：解析一个数学表达式","permalink":"parsing-math-expression-by-racket","headerImage":null,"tags":["lisp","racket","parsing","math expression"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"title":"初窥 Racket：解析一个数学表达式"}}}