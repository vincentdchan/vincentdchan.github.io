{"componentChunkName":"component---src-templates-blog-template-js","path":"/2018/01/parsing-math-expression-by-racket","webpackCompilationHash":"1bb9ac4a768d106a0e1d","result":{"data":{"markdownRemark":{"html":"<p>当 Haskell 这些静态类型的函数式语言玩久了，就想尝试一下动态类型的函数式语言，比如 Lisp，最古老的编程语言之一。不过现在写 Lisp 是不现实，因为原始的 Lisp 是 dynamic scope 的，写起来会异常痛苦。所以我打算从 Lisp 的一些比较现代方言下手，比如说 Racket 这种广受赞誉的语言。</p>\n<p>看了一下官方文档之后感觉还是应该写点什么实际的东西感受一下，个人比较喜欢写数学表达式解析器了。之前写过一篇「<a href=\"/2017/10/parsing-math-expression-by-haskell/\">初窥Haskell：解析一个数学表达式</a>」。所以这次打算用 Racket 写解析一个数学表达式程序。</p>\n<p>Racket 不是一个“纯”的语言，所以在 Racket 里面写有副作用的代码是没有问题的，说不定还会有更高的效率。但是这次我没有这么做，因为受到 Haskell 的影响，所以我还是用“纯”函数式的方法去实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">char->op</span> ch<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">char=?</span> ch <span class=\"token character string\">#\\+</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'add]</span>\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">char=?</span> ch <span class=\"token character string\">#\\-</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'sub]</span>\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">char=?</span> ch <span class=\"token character string\">#\\*</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'mul]</span>\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">char=?</span> ch <span class=\"token character string\">#\\/</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'div]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> token <span class=\"token punctuation\">(</span><span class=\"token function\">type</span> value<span class=\"token punctuation\">)</span>\n  #:prefab<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tokenizer</span> content<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">letrec</span> <span class=\"token punctuation\">(</span>\n    [char-list <span class=\"token punctuation\">(</span><span class=\"token function\">string->list</span> content<span class=\"token punctuation\">)</span>]\n    [my-tokenizer <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">reading-buffer</span> number-buffer token-buffer<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> reading-buffer<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> number-buffer<span class=\"token punctuation\">)</span>\n          token-buffer <span class=\"token comment\">;;; 所有字符都已经解析完毕</span>\n          <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span>  <span class=\"token comment\">;;; 还有 number-buffer 的字符串</span>\n            <span class=\"token punctuation\">(</span><span class=\"token function\">token</span> <span class=\"token string\">'number</span> \n              <span class=\"token punctuation\">(</span><span class=\"token function\">string->number</span> <span class=\"token punctuation\">(</span><span class=\"token function\">list->string</span> <span class=\"token punctuation\">(</span><span class=\"token function\">reverse</span> number-buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n            token-buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>\n          [first-char <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> reading-buffer<span class=\"token punctuation\">)</span>]\n          [buffer-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> reading-buffer<span class=\"token punctuation\">)</span>]\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">char-numeric?</span> first-char<span class=\"token punctuation\">)</span> <span class=\"token comment\">;;; 当前字符是一个数字</span>\n              <span class=\"token punctuation\">(</span><span class=\"token function\">my-tokenizer</span> buffer-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> first-char number-buffer<span class=\"token punctuation\">)</span> token-buffer<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> number-buffer<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>\n                  [current-token <span class=\"token punctuation\">(</span><span class=\"token function\">token</span> <span class=\"token string\">'operator</span> <span class=\"token punctuation\">(</span><span class=\"token function\">char->op</span> first-char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token function\">my-tokenizer</span> buffer-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> current-token token-buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>\n                  [number-token \n                    <span class=\"token punctuation\">(</span><span class=\"token function\">token</span> <span class=\"token string\">'number</span> \n                      <span class=\"token punctuation\">(</span><span class=\"token function\">string->number</span> \n                        <span class=\"token punctuation\">(</span><span class=\"token function\">list->string</span> \n                          <span class=\"token punctuation\">(</span><span class=\"token function\">reverse</span> number-buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">my-tokenizer</span> \n                    reading-buffer \n                    <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> \n                    <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> number-token token-buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">my-tokenizer</span> char-list <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>以上代码实现了一个 tokenizer，是用尾递归的方法来实现的。</p>\n<p>Lisp 的括号语法一直饱受争议，但是这样做不是没有好处的，就是整个 Lisp 写起来其实没有太多复杂的语法，而且语法都显得很一致，很容易组合，而且 Racket 有很强的宏编程能力，关于这点我还没有了解。有人把 Lisp 理解成手写 AST(Abstract Syntax Tree)，这种说法我觉得也没有问题。</p>\n<p>一般的类 C 语言的变量名喜欢用下划线或者驼峰标记法来区分，而在 Racket 里面，则可以用 <em>this-is-a-variable</em> 这种小短杠来表示，个人觉得看上去还是很舒服的。另一方面，很多标点符号也可以用来作为变量名，比如 <em>string?</em> 是一个用来判断变量是否为 <em>string</em> 的函数。比如 <em>string->numer</em> 用来表示字符串转数字的函数，个人感觉非常直观。</p>\n<p>和 Haskell 相比起来会麻烦一点的地方就是要自己去判断变量的类型，但是这也意味着给语言提供更大的灵活性。</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-precedence</span> x<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> x\n    [<span class=\"token string\">'add</span> <span class=\"token number\">1</span>]\n    [<span class=\"token string\">'sub</span> <span class=\"token number\">1</span>]\n    [<span class=\"token string\">'mul</span> <span class=\"token number\">2</span>]\n    [<span class=\"token string\">'div</span> <span class=\"token number\">2</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">eval</span> tokens<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">letrec</span> <span class=\"token punctuation\">(</span>\n    [get-handler <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">op</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> op\n                    [<span class=\"token string\">'add</span> +]\n                    [<span class=\"token string\">'sub</span> -]\n                    [<span class=\"token string\">'mul</span> *]\n                    [<span class=\"token string\">'div</span> /]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n    [my-eval <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tokens</span> num-stack op-stack<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> tokens<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> op-stack\n                    [null <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> num-stack<span class=\"token punctuation\">)</span>]\n                    [<span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> top-op op-stack-tail<span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">(</span><span class=\"token keyword\">let*</span> \n                        <span class=\"token punctuation\">(</span>\n                          [num1 <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> num-stack<span class=\"token punctuation\">)</span>]\n                          [num2 <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> num-stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                          [num-stack-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> num-stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                          [handler <span class=\"token punctuation\">(</span><span class=\"token function\">get-handler</span> top-op<span class=\"token punctuation\">)</span>]\n                          [result <span class=\"token punctuation\">(</span><span class=\"token function\">handler</span> num1 num2<span class=\"token punctuation\">)</span>]\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token function\">my-eval</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> result num-stack-tail<span class=\"token punctuation\">)</span> op-stack-tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token keyword\">let*</span> <span class=\"token punctuation\">(</span>\n                    [next-op <span class=\"token punctuation\">(</span><span class=\"token function\">token-value</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                    [next-number <span class=\"token punctuation\">(</span><span class=\"token function\">token-value</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                    [tokens-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> op-stack\n                      [null \n                        <span class=\"token punctuation\">(</span><span class=\"token function\">my-eval</span> \n                          tokens-tail \n                          <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> next-number num-stack<span class=\"token punctuation\">)</span> \n                          <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> next-op op-stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                      [<span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> top-op op-stack-tail<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let*</span> <span class=\"token punctuation\">(</span>\n                            [op-stack-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> op-stack<span class=\"token punctuation\">)</span>]\n                            [top-op <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> op-stack<span class=\"token punctuation\">)</span>]\n                            [top-op-precedence <span class=\"token punctuation\">(</span><span class=\"token function\">get-precedence</span> top-op<span class=\"token punctuation\">)</span>]\n                            [next-op-precedence <span class=\"token punctuation\">(</span><span class=\"token function\">get-precedence</span> next-op<span class=\"token punctuation\">)</span>]\n                          <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">></span> next-op-precedence top-op-precedence<span class=\"token punctuation\">)</span>\n                              <span class=\"token punctuation\">(</span><span class=\"token function\">my-eval</span> \n                                tokens-tail \n                                <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> next-number num-stack<span class=\"token punctuation\">)</span> \n                                <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> next-op op-stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                              <span class=\"token punctuation\">(</span><span class=\"token keyword\">let*</span> <span class=\"token punctuation\">(</span>\n                                [num1 <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> num-stack<span class=\"token punctuation\">)</span>]\n                                [num2 <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> num-stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                                [num-stack-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> num-stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n                                [handler <span class=\"token punctuation\">(</span><span class=\"token function\">get-handler</span> top-op<span class=\"token punctuation\">)</span>]\n                                [result <span class=\"token punctuation\">(</span><span class=\"token function\">handler</span> num1 num2<span class=\"token punctuation\">)</span>]\n                              <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">my-eval</span> tokens <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> result num-stack-tail<span class=\"token punctuation\">)</span> op-stack-tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n    [num <span class=\"token punctuation\">(</span><span class=\"token function\">token-value</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n    [token-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> tokens<span class=\"token punctuation\">)</span>]\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">my-eval</span> token-tail <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上述代码定义了一个 eval 函数，用优先级解析的方法去解析上面写的函数生成的 tokens</p>\n<p>代码写起来会比 Haskell 版本的稍长一点，但是个人感觉非常清晰，语法也很一致和漂亮。个人感觉是 Racket 确实是一门非常漂亮的语言，也没有像 Haskell 玩各种概念这么烧脑，还是动态类型的，平时娱乐一下开拓一下眼界感觉非常好。</p>","frontmatter":{"date":"2018-01-28T19:09:00.000Z","path":null,"title":"初窥 Racket：解析一个数学表达式","permalink":"parsing-math-expression-by-racket","headerImage":null,"tags":["lisp","racket","parsing","math expression"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"title":"初窥 Racket：解析一个数学表达式"}}}