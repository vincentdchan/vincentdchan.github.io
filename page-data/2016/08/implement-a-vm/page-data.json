{"componentChunkName":"component---src-templates-blog-template-js","path":"/2016/08/implement-a-vm","webpackCompilationHash":"3000f33a8bc961918059","result":{"data":{"markdownRemark":{"html":"<p>至于 Lexer 和 Parser 部分，教程和用法实在太多，实现起来也比较简单，所以也没什么好说的，这里说说如何实现一个虚拟机（Virtual Machine）</p>\n<p>虚拟机的实现有很多种，常见的分为 Stack Machine 和 Register Machine 前者基于栈，后者基于寄存器。\n目前来说，基于栈的虚拟机比较多，像（CPython, JVM, .NET…）都是基于栈的虚拟机，二基于寄存器的虚拟机中比较出名的就是 Lua 的官方实现了，官方称这是最早的基于寄存器的虚拟机，具体如何我们就无法考究了。但是本文主要介绍的是基于栈的虚拟机，因为比较好实现。</p>\n<p>我们来看看下面这一行代码</p>\n<pre><code class=\"language-javascript\">1 + 2 * 3\n</code></pre>\n<p>如果用 StackMachine 来表示是这样的</p>\n<pre><code>LOAD 1\nLOAD 2\nLOAD 3\nMULTIPLE // result: 6\nADD  // result: 7\n</code></pre>\n<p>这样应该很好理解，执行这段代码后，栈顶的值是 7，也就是我们表达式的值。那么接下来做两件事情就好好了，一是把语法树生成一连串的指令，二是执行这些指令</p>\n<p>语法树如何生成指令呢？</p>\n<pre><code>+\n| \\\n1  *\n         |\\\n         2 3\n</code></pre>\n<p> 粗略地画，语法树是这个样子地，那么很明显，<strong>生成指令地过程就是后序遍历语法树地过程</strong>。理解这句话之后，就好做了。但是也有几点要注意地地方，我们通常用一个常量表，把用到地常量给储存起来，如整形，字符串等等。所以我们设计指令的时候，比如说 LOAD_C  指令就可以从常量表里面加载一个值到栈顶。</p>\n<p> 下面看一下我正在实现的哈语言里面的指令集</p>\n<pre style='color:#000020;background:#f6f8ff;'><span style='color:#004a43; '>#</span><span style='color:#004a43; font-weight:bold; '>pragma</span><span style='color:#7779bb; font-weight:bold; '> once</span>\n\n<span style='color:#200080; font-weight:bold; '>namespace</span> halang\n<span style='color:#406080; '>{</span>\n\t<span style='color:#200080; font-weight:bold; '>enum</span> <span style='color:#200080; font-weight:bold; '>class</span> VM_CODE\n\t<span style='color:#406080; '>{</span>\n\t\tLOAD_C<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x00 A - load constant</span>\n\t\tLOAD_V<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x01 A - load variable</span>\n\t\tLOAD_G<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x02 A - load global variable</span>\n\t\tLOAD_UPVAL<span style='color:#308080; '>,</span>\t\t\t\t<span style='color:#595979; '>// 0x03 A - load upvalue</span>\n\t\tSTORE_V<span style='color:#308080; '>,</span>\t\t\t\t<span style='color:#595979; '>// 0x04 A - store the top of stack to A</span>\n\t\tSTORE_G<span style='color:#308080; '>,</span>\t\t\t\t<span style='color:#595979; '>// 0x05 A - store to the global value</span>\n\t\tSTORE_UPVAL<span style='color:#308080; '>,</span>\t\t\t<span style='color:#595979; '>// 0x06 A - store to the upvalue table</span>\n\t\tPUSH_INT<span style='color:#308080; '>,</span>\t\t\t\t<span style='color:#595979; '>// 0x07 A - load A</span>\n\t\tPUSH_BOOL<span style='color:#308080; '>,</span>\t\t\t\t<span style='color:#595979; '>// 0x08 A - load A</span>\n\t\tPOP<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x09 A - Pop A</span>\n\t\tCLOSURE<span style='color:#308080; '>,</span>\t\t\t\t<span style='color:#595979; '>// 0x0a A - linked Function's upvalue to current env</span>\n\t\tCALL<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x0b (A, B, C...) call function(A, B, C...)</span>\n\t\tRETURN<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x0c A - if A != 0 return exp else return nothing</span>\n\t\tIFNO<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x0d if not true, jump to the location.</span>\n\t\tJMP<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x0e</span>\n\t\tNOT<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x0f</span>\n\t\tADD<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x10 add the top two val</span>\n\t\tSUB<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x11</span>\n\t\tMUL<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x12</span>\n\t\tDIV<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x13</span>\n\t\tMOD<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x14</span>\n\t\tPOW<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x15</span>\n\t\tGT<span style='color:#308080; '>,</span> LT<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x16 0x17</span>\n\t\tGTEQ<span style='color:#308080; '>,</span> LTEQ<span style='color:#308080; '>,</span>\t\t\t\t<span style='color:#595979; '>// 0x18 0x19</span>\n\t\tEQ<span style='color:#308080; '>,</span>\t\t\t\t\t\t<span style='color:#595979; '>// 0x1a</span>\n\t\tOUT<span style='color:#308080; '>,</span>\t\t\t\t\t<span style='color:#595979; '>// 0x1b</span>\n\t\tSTOP\t\t\t\t\t<span style='color:#595979; '>// 0x1c</span>\n\t<span style='color:#406080; '>}</span><span style='color:#406080; '>;</span>\n\n<span style='color:#406080; '>}</span><span style='color:#406080; '>;</span>\n</pre>\n<p>至于运行，如何储存变量呢，最简单的做法就是用 Environment 方法。用一个表来储存变量，这个表当然可以用哈希表（变量名-变量值）来做，但是这样还不够快。其实我们知道，在一个环境里面，我们可以为每一个变量名编一个号，这样子这个变量表就可以用数组（变量编号-变量值）来做，这样子，访问变量和储存变量的时候就快很多了。</p>\n<p>项目 Github 地址：<a href=\"https://github.com/vincentdchan/halang\">https://github.com/vincentdchan/halang</a></p>","frontmatter":{"date":"2016-08-13T21:00:00.000Z","path":null,"title":"编译原理学习笔记 3：实现一个虚拟机","permalink":"implement-a-vm","headerImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"title":"编译原理学习笔记 3：实现一个虚拟机"}}}