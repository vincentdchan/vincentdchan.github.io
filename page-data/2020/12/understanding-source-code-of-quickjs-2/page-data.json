{"componentChunkName":"component---src-templates-blog-template-js","path":"/2020/12/understanding-source-code-of-quickjs-2","result":{"data":{"markdownRemark":{"html":"<p><a href=\"/2019/08/understanding-source-code-of-quickjs-1\">上一篇文章</a> 里面主要解释了\n了 QuickJS 虚拟机的运作。第二篇文章打算介绍一下 QuickJS 里面 JavaScript\n基础设施的实现。</p>\n<h2>项目结构</h2>\n<p>QuickJS 项目主要由以下几个部分组成：</p>\n<h3>qjs</h3>\n<p>qjs 其实的主要逻辑其实储存在 <code class=\"language-text\">repl.js</code> 文件里面，主要逻辑由\nJS 写成。提供命令行交互工具（repl）。</p>\n<p>编译的时候，会用 <code class=\"language-text\">qjsc</code> 编译器编译成 JS 字节码，然后用 QuickJS 引擎执行。</p>\n<h3>qjsc</h3>\n<p>qjsc 是 QuickJS 编译器。可以把 JavaScript 编译成可以执行的程序。\n或者是纯字节码。</p>\n<p>注意，用 qjsc 编译的程序默认支持 <code class=\"language-text\">os</code> 和 <code class=\"language-text\">std</code> 两个标准库。\n如果想要支持其他标准库，需要自行添加。</p>\n<h2>基础设施</h2>\n<p>注意，使用 QuickJS 新建 JSContext 的时候，默认是不带基础设施的\n(比如说 JSON 解析、Object、等等)。\n这时候，可以调用以下命令进行添加，这些内建对象的支持都是内置的：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicBaseObjects</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicDate</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicEval</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicStringNormalize</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicRegExpCompiler</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicRegExp</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicJSON</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicProxy</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicMapSet</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicTypedArrays</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicPromise</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicBigInt</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicBigFloat</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">JS_AddIntrinsicBigDecimal</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>至于这些内置方法，比如 Object 是怎么实现，我们可以直接点开 <code class=\"language-text\">JS_AddIntrinsicBaseObjects</code> 代码</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Object */</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token function\">JS_NewGlobalCConstructor</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span> js_object_constructor<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                                   ctx<span class=\"token operator\">-></span>class_proto<span class=\"token punctuation\">[</span>JS_CLASS_OBJECT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">JS_SetPropertyFunctionList</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> js_object_funcs<span class=\"token punctuation\">,</span> <span class=\"token function\">countof</span><span class=\"token punctuation\">(</span>js_object_funcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">JS_SetPropertyFunctionList</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">-></span>class_proto<span class=\"token punctuation\">[</span>JS_CLASS_OBJECT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                               js_object_proto_funcs<span class=\"token punctuation\">,</span> <span class=\"token function\">countof</span><span class=\"token punctuation\">(</span>js_object_proto_funcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这两行分别给 Object 对象本身，和 Object.prototype 设置了相应的函数。\n我们可以跟踪看看 <code class=\"language-text\">js_object_proto_funcs</code> 分别定义了什么函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> JSCFunctionListEntry js_object_proto_funcs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">JS_CFUNC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> js_object_toString <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toLocaleString\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> js_object_toLocaleString <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valueOf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> js_object_valueOf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasOwnProperty\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> js_object_hasOwnProperty <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isPrototypeOf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> js_object_isPrototypeOf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"propertyIsEnumerable\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> js_object_propertyIsEnumerable <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CGETSET_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">,</span> js_object_get___proto__<span class=\"token punctuation\">,</span> js_object_set___proto__ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_MAGIC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__defineGetter__\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> js_object___defineGetter__<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_MAGIC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__defineSetter__\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> js_object___defineGetter__<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_MAGIC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__lookupGetter__\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> js_object___lookupGetter__<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">JS_CFUNC_MAGIC_DEF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__lookupSetter__\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> js_object___lookupGetter__<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到这些内置方法都是 C 实现的方法。对应的函数都是在 <code class=\"language-text\">quickjs.c</code> 里面定义。</p>\n<p>知道了这些，我们就可以动手修改 QuickJS 代码，比如说我们想改变 Object 的 <code class=\"language-text\">toString</code> 的表现。让它输出更详细的信息，那我们更改 <code class=\"language-text\">js_object_toString</code> 的实现就可以了。</p>\n<h2>标准库</h2>\n<p>标准库的实现，不是语言的一部分。这一部分的实现内容放在了 <code class=\"language-text\">quickjs-libc.c</code> 这个文件。</p>\n<h3>console.log</h3>\n<p>写过 JS 的人估计都用过 console.log 吧。那么在 QuickJS 里面，console.log 怎么实现呢。\n答案就在 <code class=\"language-text\">quickjs-libc.c</code> 这个文件的 <code class=\"language-text\">js_std_add_helpers</code> 这个函数里面：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">JSValue global_obj<span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\nglobal_obj <span class=\"token operator\">=</span> <span class=\"token function\">JS_GetGlobalObject</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole <span class=\"token operator\">=</span> <span class=\"token function\">JS_NewObject</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">JS_SetPropertyStr</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">,</span> <span class=\"token string\">\"log\"</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token function\">JS_NewCFunction</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> js_print<span class=\"token punctuation\">,</span> <span class=\"token string\">\"log\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">JS_SetPropertyStr</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> global_obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"console\"</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到实现方法就是 <code class=\"language-text\">js_print</code> 这个函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> JSValue <span class=\"token function\">js_print</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> JSValueConst this_val<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> JSValueConst <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        str <span class=\"token operator\">=</span> <span class=\"token function\">JS_ToCString</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> JS_EXCEPTION<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">JS_FreeCString</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> JS_UNDEFINED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到底层调用的是 C 语言的 <code class=\"language-text\">fputs</code> 方法输出到 <code class=\"language-text\">stdout</code>。\n如果你想让 console.log 输出到自己的文件，或者数据库，那么你就可以更改 <code class=\"language-text\">js_print</code>\n这个方法了。</p>\n<p>我们还可以看到，Bellard 只实现了 console.log，但是没有输出 console.error。\n那么我们就可以把 console.error 给实现上，输出到 stderr，也是轻而易举了。</p>\n<h3>setTimout</h3>\n<p>setTimeout 的实现会稍微复杂一点。要了解 setTimeout 的实现，就要了解 QuickJS 的\n事件循环。要了解 QuickJS 的事件循环，其实只要看懂一个函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* main loop which calls the user JS callbacks */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">js_std_loop</span><span class=\"token punctuation\">(</span>JSContext <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    JSContext <span class=\"token operator\">*</span>ctx1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> err<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* execute the pending jobs */</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            err <span class=\"token operator\">=</span> <span class=\"token function\">JS_ExecutePendingJob</span><span class=\"token punctuation\">(</span><span class=\"token function\">JS_GetRuntime</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ctx1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">js_std_dump_error</span><span class=\"token punctuation\">(</span>ctx1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>os_poll_func <span class=\"token operator\">||</span> <span class=\"token function\">os_poll_func</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>QuickJS 里面维护着一个队列。而主循环就是一直从这个队列里面捞任务出来进行处理。\n<code class=\"language-text\">JS_ExecutePendingJob</code> 就是执行一个 JS 任务。这个 JS 任务可能添加了一个系统任务。\n比如如果代码调用了 setTimeout 那么 QuickJS 会往系统添加一个定时器任务。</p>\n<p>随后这个循环调用 <code class=\"language-text\">os_poll_func</code> 这个方法，会一直阻塞，等到有任务完成，\n这个函数会往 QuickJS 队列添加一个回调，然后返回。</p>\n<p>返回后进入下一次循环，就会执行 setTimeout 的回调，这样就完成了 setTimeout 的调用。</p>\n<p>这里和我们熟知的 v8 不一样，v8 使用的是 libuv 作为事件循环的库。\n而 QuickJS 为了轻量化，简单的封装了一下系统的信号，有兴趣的同学可以深入了解 <code class=\"language-text\">os_poll_func</code>\n函数的实现。</p>","frontmatter":{"date":"2019-08-26T23:55:00.000Z","path":"/2020/12/understanding-source-code-of-quickjs-2","title":"QuickJS 源码解读（二）:项目结构和基础设施","permalink":null,"headerImage":null,"tags":["compiler","QuickJS","javascript","C","编译器","虚拟机"]}}},"pageContext":{"title":"QuickJS 源码解读（二）:项目结构和基础设施"}},"staticQueryHashes":["3128451518","3159585216","3649515864"]}