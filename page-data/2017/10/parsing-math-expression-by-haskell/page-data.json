{"componentChunkName":"component---src-templates-blog-template-js","path":"/2017/10/parsing-math-expression-by-haskell","webpackCompilationHash":"7e2a1be1f9f81dd234f1","result":{"data":{"markdownRemark":{"html":"<p>最近在学习 Haskell，不得不说，这真的是一门令我着迷的语言，lazy 和纯函数式等特性都非常吸引我，不过短时间内还无法掌握得很好，最重要是思维的转变非常苦难。</p>\n<p>学习一门语言最好的办法就是多实践，我还记得我写过一片文章<a href=\"https://vincentdchan.github.io/2016/07/parse-math-expression/\">编译原理学习笔记1：解析数学表达式</a>\n来讲述怎样去解析数学表达式，但是我没有讲如何去实现，现在刚好用 Haskell 实现一个。</p>\n<p>本篇文章所有源码<a href=\"https://gist.github.com/vincentdchan/78435adcbb007df77e0c674201202925\">https://gist.github.com/vincentdchan/78435adcbb007df77e0c674201202925</a></p>\n<p>gists 里包含了我曾经在我的作业里面用 C# 实现了一个过程式的数学表达式运算器，总代码 161 行，而 Haskell 版只用了54行。FP 的 pattern matching 在写状态复杂的程序的时候真的如虎添翼。</p>\n<h2>写一个词法分析器 Tokenizer</h2>\n<p>我们要把字符串解析成一个个 token，也就是我们平时所说的词法分析器里面的”词“，想想一个数学表达式里面有什么类型的 token？大概是只有数学符号和是数字？</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Token</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Num</span> <span class=\"token constant\">Int</span> \n    <span class=\"token operator\">|</span> <span class=\"token constant\">T_Plus</span> <span class=\"token operator\">|</span> <span class=\"token constant\">T_Sub</span> \n    <span class=\"token operator\">|</span> <span class=\"token constant\">T_Mul</span> <span class=\"token operator\">|</span> <span class=\"token constant\">T_Div</span>\n    <span class=\"token keyword\">deriving</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Show</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>注意我在上一篇博文里面提到的优先级问题，我们需要有一个函数来返回操作符的优先级，我们可以用 pattern matching</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">getPrecedence</span><span class=\"token operator\">::</span> <span class=\"token constant\">Token</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">getPrecedence</span> <span class=\"token constant\">T_Plus</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">getPrecedence</span> <span class=\"token constant\">T_Sub</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">getPrecedence</span> <span class=\"token constant\">T_Mul</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token hvariable\">getPrecedence</span> <span class=\"token constant\">T_Div</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<p>这种表达可以说是非常优雅了，然后开始写一个词法分析器……的定义</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">tokenizer</span><span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Haskell 的类型定义，一个词法分析器输入一个字符串，然后输出一串 Token</p>\n<p><strong>接下来看我放大招</strong></p>\n<p><code class=\"language-text\">tokenizer</code> 函数将调用下面这个稍微复杂一点的 <code class=\"language-text\">_tokenizer</code> 来完成词法分析操作，下面我来解释一下这个函数的参数有什么作用</p>\n<ol>\n<li>第一个参数就是待解析的字符串</li>\n<li>第二个参数是暂存的数据缓冲区，如果我们要读入数字1234，那么要先把123先缓存起来，读入4后再一起解析</li>\n<li>第三个参数是<strong>之前已经读入的token</strong>, 我们把这次解析出来的token连接进去，然后通过递归传给下一次运算，最后直接返回下一次的递归调用返回的值，这种写法叫做尾递归，可以减少内存的使用。关于尾递归这里不详细说。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">_tokenizer</span><span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 尾递归写法</span>\n<span class=\"token hvariable\">_tokenizer</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">previous</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">previous</span> <span class=\"token comment\">-- 所有字符都解析完毕</span>\n<span class=\"token hvariable\">_tokenizer</span> <span class=\"token string\">\"\"</span> <span class=\"token hvariable\">buf</span> <span class=\"token hvariable\">previous</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">read</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">reverse</span> <span class=\"token hvariable\">buf</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">previous</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 字符都解析完毕，但是缓冲区还有数据</span>\n<span class=\"token hvariable\">_tokenizer</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ch</span><span class=\"token operator\">:</span><span class=\"token hvariable\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">buf</span> <span class=\"token hvariable\">previous</span> <span class=\"token operator\">=</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Data.Char</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">isDigit</span> <span class=\"token hvariable\">ch</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">-- 当前字符是一个数字</span>\n        <span class=\"token hvariable\">_tokenizer</span> <span class=\"token hvariable\">expr</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ch</span><span class=\"token operator\">:</span><span class=\"token hvariable\">buf</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">previous</span> <span class=\"token comment\">-- 把数字放入缓冲区</span>\n    <span class=\"token keyword\">else</span> <span class=\"token comment\">-- 当前字符不是数字</span>\n        <span class=\"token keyword\">case</span> <span class=\"token hvariable\">buf</span> <span class=\"token keyword\">of</span>  <span class=\"token comment\">-- 检查缓冲区是否为空</span>\n            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span>  <span class=\"token comment\">-- 缓冲区为空</span>\n                <span class=\"token keyword\">case</span> <span class=\"token hvariable\">ch</span> <span class=\"token keyword\">of</span> <span class=\"token comment\">-- 解析当前字符</span>\n                    <span class=\"token char\">'+'</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">_tokenizer</span> <span class=\"token hvariable\">expr</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T_Plus</span><span class=\"token operator\">:</span><span class=\"token hvariable\">previous</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token char\">'-'</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">_tokenizer</span> <span class=\"token hvariable\">expr</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T_Sub</span><span class=\"token operator\">:</span><span class=\"token hvariable\">previous</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token char\">'*'</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">_tokenizer</span> <span class=\"token hvariable\">expr</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T_Mul</span><span class=\"token operator\">:</span><span class=\"token hvariable\">previous</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token char\">'/'</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">_tokenizer</span> <span class=\"token hvariable\">expr</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T_Div</span><span class=\"token operator\">:</span><span class=\"token hvariable\">previous</span><span class=\"token punctuation\">)</span>\n            <span class=\"token hvariable\">_</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">_tokenizer</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ch</span><span class=\"token operator\">:</span><span class=\"token hvariable\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">read</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">reverse</span> <span class=\"token hvariable\">buf</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">previous</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 缓冲区不为空，读取缓冲区字符</span></code></pre></div>\n<p><strong>注意</strong>：缓冲区保存的数字缓冲是倒序的，当我们用 <code class=\"language-text\">read</code> 函数读取数值的时候，要先用 <code class=\"language-text\">reverse</code> 函数反转</p>\n<p>然后 <code class=\"language-text\">tokenizer</code> 的定义就很简单了，我们词法分析出来的列表是倒序的，我们要用reverse函数来反转。</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">tokenizer</span> <span class=\"token hvariable\">expr</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">reverse</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_tokenizer</span> <span class=\"token hvariable\">expr</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>表达式求值</h2>\n<p>到此为止，词法分析器就完成了，当我们对一串字符串调用 tokenizer 就可以得到一串 token 了，接下来就是如何对表达式进行求值，原理可以回顾<a href=\"https://vincentdchan.github.io/2016/07/parse-math-expression/\">编译原理学习笔记1：解析数学表达式</a>，这里讲讲实现</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- 定义操作符运算</span>\n<span class=\"token hvariable\">evalOp</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Token</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">evalOp</span> <span class=\"token constant\">T_Plus</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">b</span>\n<span class=\"token hvariable\">evalOp</span> <span class=\"token constant\">T_Sub</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-</span> <span class=\"token hvariable\">b</span>\n<span class=\"token hvariable\">evalOp</span> <span class=\"token constant\">T_Mul</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">b</span>\n<span class=\"token hvariable\">evalOp</span> <span class=\"token constant\">T_Div</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span> `<span class=\"token builtin\">div</span>` <span class=\"token hvariable\">b</span>\n\n<span class=\"token comment\">-- 搞一个好看点的包装函数</span>\n<span class=\"token hvariable\">eval</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">eval</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">_eval</span> <span class=\"token hvariable\">tokens</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">value</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">-- 真正运作的函数在这里</span>\n<span class=\"token hvariable\">_eval</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Token</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token comment\">-- 操作数栈里面只有一个数了，就是我们要求的值了</span>\n<span class=\"token hvariable\">_eval</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">value</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">value</span>\n<span class=\"token comment\">-- 操作符栈数值为空，进行SHIFT操作</span>\n<span class=\"token hvariable\">_eval</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">op</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">num</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">numStack</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">_eval</span> <span class=\"token hvariable\">tokens</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">num</span><span class=\"token operator\">:</span><span class=\"token hvariable\">numStack</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">op</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- 操作符栈不为空</span>\n<span class=\"token hvariable\">_eval</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">op</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">num</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">numStack</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">topOp</span><span class=\"token operator\">:</span><span class=\"token hvariable\">opStack</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">getPrecedence</span> <span class=\"token hvariable\">op</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">getPrecedence</span> <span class=\"token hvariable\">topOp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        <span class=\"token hvariable\">_eval</span> <span class=\"token hvariable\">tokens</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">num</span><span class=\"token operator\">:</span><span class=\"token hvariable\">numStack</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">op</span><span class=\"token operator\">:</span><span class=\"token hvariable\">topOp</span><span class=\"token operator\">:</span><span class=\"token hvariable\">opStack</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- SHIFT</span>\n    <span class=\"token keyword\">else</span> <span class=\"token comment\">-- REDUCE</span>\n        <span class=\"token keyword\">case</span> <span class=\"token hvariable\">numStack</span> <span class=\"token keyword\">of</span>\n            <span class=\"token punctuation\">(</span><span class=\"token hvariable\">num1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">num2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">stack</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n                <span class=\"token hvariable\">_eval</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">op</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">num</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">evalOp</span> <span class=\"token hvariable\">topOp</span> <span class=\"token hvariable\">num1</span> <span class=\"token hvariable\">num2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">stack</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">opStack</span>\n<span class=\"token comment\">-- 栈里还有一些残留的值，继续运算</span>\n<span class=\"token hvariable\">_eval</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">num1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">num2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">numStack</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">topOp</span><span class=\"token operator\">:</span><span class=\"token hvariable\">opStack</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">_eval</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">evalOp</span> <span class=\"token hvariable\">topOp</span> <span class=\"token hvariable\">num1</span> <span class=\"token hvariable\">num2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token hvariable\">numStack</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">opStack</span></code></pre></div>\n<p>这里 <code class=\"language-text\">_eval</code> 的参数</p>\n<ol>\n<li>要解析的 token 集合</li>\n<li>操作数的栈</li>\n<li>操作符的栈</li>\n</ol>\n<h2>总结</h2>\n<p>总的来说，在 pattern matching 的帮助下，写一个表达式求值的程序可以说非常简洁明了。当你用过程式语言去写 tokenizer 的时候，你需要控制一个指针在字符串上移来移去，非常容易出错，如果用 pattern matching，只需要定义好相应的字符串就可以了，非常优雅。</p>","frontmatter":{"date":"2017-10-30T20:26:27.000Z","path":null,"title":"初窥 Haskell：解析一个数学表达式","permalink":"parsing-math-expression-by-haskell","headerImage":null,"tags":["haskell","parsing","compiler","math expression"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"title":"初窥 Haskell：解析一个数学表达式"}}}