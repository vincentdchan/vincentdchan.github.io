{"version":3,"sources":["webpack:///./node_modules/lodash-es/isObject.js","webpack:///./node_modules/lodash-es/_root.js","webpack:///./node_modules/lodash-es/now.js","webpack:///./node_modules/lodash-es/_Symbol.js","webpack:///./node_modules/lodash-es/_getRawTag.js","webpack:///./node_modules/lodash-es/_objectToString.js","webpack:///./node_modules/lodash-es/_baseGetTag.js","webpack:///./node_modules/lodash-es/isObjectLike.js","webpack:///./node_modules/lodash-es/isSymbol.js","webpack:///./node_modules/lodash-es/toNumber.js","webpack:///./node_modules/lodash-es/debounce.js","webpack:///./src/components/fullPage.js","webpack:///./src/components/brick/brickAtom.js","webpack:///./src/components/brick/ground.js","webpack:///./src/components/brick/largeBrick.js","webpack:///./src/components/brick/manOutline.js","webpack:///./src/components/brick/brickController.js","webpack:///./src/components/brick/brick.js","webpack:///./src/components/brick/index.js","webpack:///./src/pages/what-am-i-doing.js","webpack:///./node_modules/matter-js/build/matter.js","webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/lodash-es/_freeGlobal.js","webpack:///./node_modules/core-js/modules/es6.string.anchor.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./node_modules/core-js/modules/es6.string.sub.js","webpack:///./node_modules/poly-decomp/src/index.js"],"names":["value","type","freeSelf","self","Object","Function","Date","now","Symbol","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","toStringTag","undefined","isOwn","call","tag","unmasked","e","result","nullTag","undefinedTag","symbolTag","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","other","valueOf","replace","isBinary","test","slice","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","func","wait","options","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","this","leadingEdge","cancel","clearTimeout","flush","FullPage","props","resetHeight","containerRef","current","style","height","window","innerHeight","debounceResetHeight","debounce","React","createRef","pageHeight","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","ref","className","children","Component","BrickAtom","x","y","body","Bodies","rectangle","width","density","frictionAir","friction","__img","Image","src","draw","ctx","position","angle","save","translate","rotate","drawImage","restore","dispose","Body","set","Ground","__width","__height","isStatic","frictionStatic","fillStyle","fillRect","decomp","LargeBrick","scale","fromVertices","__originalScale","isDragging","update","EndX","ratio","__scale","Width","Height","fillText","ManOutline","__x","__y","BrickController","dom","handleMouseMove","__largeBrick","mouse","newBrick","__bricks","push","__tmpBrick","resetLargeBrick","handleMouseUp","console","log","World","add","__engine","world","handleAfterUpdate","__dom","getContext","clearRect","CanvasWidth","CanvasHeight","forEach","brick","handleDragStart","handleDragEnd","__world","create","bounds","CanvasHeigh","Engine","__mouse","Mouse","__mouseConstraint","MouseConstraint","constraint","stiffness","visible","gravity","__ground","__lastTimeStamp","createGround","createBodies","setCanvasRatio","canvas","context","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","oldWidth","oldHeight","__ratio","i","count","j","atom","manOutline","loop","Events","on","run","remove","filter","concat","clear","err","error","Container","styled","div","Brick","resetSize","worldContainerRef","innerWidth","debounceResetSize","canvasRef","controller","Background","createGlobalStyle","WhatAmIDoing","require","module","exports","r","n","t","o","f","u","a","Error","code","p","length","1","_dereq_","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","id","nextId","label","parts","plugin","vertices","fromPath","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","restitution","collisionFilter","category","mask","group","slop","timeScale","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","extend","_initProperties","nextGroup","isNonColliding","nextCategory","positionPrev","clone","anglePrev","parent","axes","area","mass","inertia","defaultFillStyle","choose","strokeStyle","settings","property","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","centre","autoHull","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","abs","translation","rotation","point","cos","sin","dx","dy","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","2","Composite","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","warn","addBody","addConstraint","addComposite","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","keepStatic","allBodies","allConstraints","allComposites","get","move","rebase","recursive","3","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","partA","k","partB","previousCollision","pair","isActive","collision","collides","collided","filterA","filterB","6","Grid","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairId","pairKeys","keys","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","contains","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","resistanceTotal","zero","postSolveAll","13","element","mouseConstraint","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","14","global","_nextId","_seed","_nowStartTime","argsStart","deepClone","source","prop","constructor","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","isFunction","isPlainObject","isString","performance","webkitNow","_seededRandom","colorToNumber","colorString","charAt","logLevel","Array","info","haystack","needle","map","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","15","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","16","eventNames","callback","name","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","tick","stop","start","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","acos","sort","flag","upper","lower","pop","30","RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","textures","setPixelRatio","appendChild","_getPixelRatio","setAttribute","lookAt","padding","center","viewHeight","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","c","debugTimestamp","text","round","debugString","font","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","imagePath","image","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","sprites","primitives","addChild","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","$export","fails","defined","quot","createHTML","string","attribute","S","String","p1","NAME","exec","O","P","F","toLowerCase","has","cof","inheritIfRequired","toPrimitive","gOPN","gOPD","dP","$trim","trim","$Number","Base","proto","BROKEN_COF","TRIM","toNumber","argument","it","third","radix","maxCode","first","charCodeAt","NaN","digits","that","freeGlobal","toObject","toAbsoluteIndex","toLength","aLen","endPos","lineInt","l1","l2","a1","b1","c1","a2","b2","c2","det","scalar_eq","lineSegmentsIntersect","p2","q1","q2","s","triangleArea","b","isLeft","isLeftOn","isRight","isRightOn","edges","polygonGetCutEdges","tmp1","tmp2","tmpPoly","nDiags","polygonIsReflex","polygonCanSee","polygonCopy","polygonAt","polygonSlice","cutEdges","polys","cutEdge","poly","polygonQuickDecomp","reflexVertices","steinerPoints","maxlevel","level","upperInt","lowerInt","upperDist","lowerDist","d","closestDist","upperIndex","lowerIndex","closestIndex","lowerPoly","upperPoly","getIntersectionPoint","sqdist","polygonAppend","polygonCanSee2","isSimple","num","collinear","removeDuplicatePoints","pi","points_eq","br","tmp","N","polygonReverse","tmpPoint1","tmpPoint2","thresholdAngle","ab","bc","magA","magB","from","to","tmpLine1","tmpLine2","dist","targetPoly","polygonClear"],"mappings":"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","file":"component---src-pages-what-am-i-doing-js-a199ccb5ba0a34207aed.js","sourcesContent":["/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;","import freeGlobal from './_freeGlobal.js';\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = freeGlobal || freeSelf || Function('return this')();\nexport default root;","import root from './_root.js';\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\n\nvar now = function now() {\n  return root.Date.now();\n};\n\nexport default now;","import root from './_root.js';\n/** Built-in value references. */\n\nvar Symbol = root.Symbol;\nexport default Symbol;","import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport Symbol from './_Symbol.js';\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\n\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n\n  return result;\n}\n\nexport default getRawTag;","import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\n\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n/** `Object#toString` result references. */\n\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n/** Built-in value references. */\n\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\n\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n\nexport default baseGetTag;","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n/** `Object#toString` result references. */\n\nvar symbolTag = '[object Symbol]';\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\nfunction isSymbol(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n}\n\nexport default isSymbol;","import \"core-js/modules/es6.regexp.replace\";\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n/** Used as references for various `Number` constants. */\n\nvar NAN = 0 / 0;\n/** Used to match leading and trailing whitespace. */\n\nvar reTrim = /^\\s+|\\s+$/g;\n/** Used to detect bad signed hexadecimal string values. */\n\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */\n\nvar reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */\n\nvar reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */\n\nvar freeParseInt = parseInt;\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\n\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return NAN;\n  }\n\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? other + '' : other;\n  }\n\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nexport default toNumber;","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n/** Error message constants. */\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\n\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  wait = toNumber(wait) || 0;\n\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time; // Start the timer for the trailing edge.\n\n    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\n\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }\n\n  function timerExpired() {\n    var time = now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    } // Restart the timer.\n\n\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n\n    return result;\n  }\n\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;","import React, { Component } from 'react';\nimport { debounce } from 'lodash-es';\n\nclass FullPage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.containerRef = React.createRef();\n    if (typeof window !== 'undefined') {\n      this.pageHeight = window.innerHeight;\n    }\n  }\n\n  resetHeight = () => {\n    this.containerRef.current.style.height = window.innerHeight + 'px';\n  }\n\n  debounceResetHeight = debounce(this.resetHeight, 200, {\n    leading: true,\n  });\n\n  componentDidMount() {\n    window.addEventListener('resize', this.debounceResetHeight)\n    this.resetHeight();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.debounceResetHeight);\n  }\n\n  render() {\n    return (\n      <div ref={this.containerRef} className=\"full-page\">\n        {this.props.children}\n      </div>\n    );\n  }\n\n}\n\nexport default FullPage;\n","import { Bodies, Body } from 'matter-js';\n\nexport class BrickAtom {\n\n  static width = 42;\n  static height = 24;\n\n  /**\n   * @param {number} x \n   * @param {number} y \n   */\n  constructor(x, y) {\n    this.body = Bodies.rectangle(\n      x,\n      y,\n      BrickAtom.width,\n      BrickAtom.height,\n      {\n        density: 10,\n        frictionAir: 0.035,\n        friction: 0.1,\n      },\n    );\n    this.__img = new Image();\n    this.__img.src = '/images/brick.png';\n  }\n\n  get position() {\n    return this.body.position;\n  }\n\n  set position({ x, y }) {\n    Body.set(this.body, {\n      position: { x, y },\n    });\n  }\n\n  /**\n   * \n   * @param {CanvasRenderingContext2D} ctx \n   */\n  draw(ctx) {\n    const { position, angle } = this.body;\n    ctx.save();\n    ctx.translate(position.x, position.y);\n    ctx.rotate(angle);\n    ctx.drawImage(\n      this.__img,\n      -1 * BrickAtom.width / 2,\n      -1 * BrickAtom.height / 2,\n      BrickAtom.width,\n      BrickAtom.height,\n    );\n    ctx.restore();\n  }\n\n  dispose() {\n  }\n\n}\n","import { Bodies } from 'matter-js';\n\nexport class Ground {\n\n  /**\n   * \n   * @param {number} x \n   * @param {number} y \n   * @param {number} width\n   * @param {number} height\n   */\n  constructor(x, y, width, height) {\n    this.__width = width;\n    this.__height = height;\n    this.body = Bodies.rectangle(\n      x, y,\n      width, height,\n      {\n        isStatic: true,\n        friction: 0.99,\n        frictionStatic: 0.99,\n      },\n    );\n  }\n\n  /**\n   * \n   * @param {CanvasRenderingContext2D} ctx \n   */\n  draw(ctx) {\n    const { position: { x, y } } = this.body;\n    ctx.save();\n    ctx.fillStyle = \"black\";\n    ctx.translate(x, y);\n    ctx.fillRect(-0.5 * this.__width, -this.__height * 0.5, this.__width, this.__height);\n    ctx.restore();\n  }\n\n  dispose() {\n\n  }\n\n}\n","import { Bodies, Body } from 'matter-js';\nimport decomp from 'poly-decomp';\n\nif (typeof window !== 'undefined') {\n  window.decomp = decomp;\n}\n\nexport class LargeBrick {\n\n  static Width = 512;\n  static Height = 512;\n  static EndX = 680;\n\n  /**\n   * \n   * @param {number} x \n   * @param {number} y \n   * @param {number} scale\n   */\n  constructor(x, y, scale = 0.5) {\n    this.body = Bodies.fromVertices(\n      x,\n      y,\n      [\n        { x: 306, y: 8.5 },\n        { x: 500, y: 75 },\n        { x: 505.5, y: 162.5 },\n        { x: 265.5, y: 500.5 },\n        { x: 14, y: 304 },\n        { x: 14, y: 240 },\n        { x: 306, y: 8.5 },\n      ],\n      {\n        density: 200,\n        frictionAir: 0.035,\n        friction: 0.78,\n      },\n    );\n    this.__originalScale = scale;\n    this.scale = scale;\n    this.__img = new Image();\n    this.__img.src = '/images/large-brick-rect.png';\n    this.isDragging = false;\n  }\n\n  get scale() {\n    return this.__scale;\n  }\n\n  set scale(value) {\n    this.__scale = value;\n    Body.scale(this.body, value, value);\n  }\n\n  update() {\n    const { position: { x } } = this.body;\n    if (x >= 200 && x < LargeBrick.EndX) {\n      const ratio = (LargeBrick.EndX - x) / (LargeBrick.EndX - 200);\n      // this.scale = this.__originalScale * ratio;\n      this.__scale = this.__originalScale * ratio;\n      // Body.scale(this.body, ratio / this.__originalScale, ratio / this.__originalScale);\n      // this.__originalScale = this.__originalScale * ratio;\n    } else {\n      // this.scale = this.__originalScale;\n    }\n      // this.scale = this.__originalScale;\n  }\n\n  /**\n   * \n   * @param {CanvasRenderingContext2D} ctx \n   */\n  draw(ctx) {\n    const { position, angle } = this.body;\n    ctx.save();\n    ctx.translate(position.x, position.y);\n    ctx.rotate(angle);\n    ctx.drawImage(\n      this.__img,\n      // 0, 0,\n      -1 * LargeBrick.Width / 2 * this.__scale,\n      -1 * LargeBrick.Height / 2 * this.__scale,\n      LargeBrick.Width * this.__scale,\n      LargeBrick.Height * this.__scale,\n    );\n    ctx.fillStyle =\"black\";\n    ctx.fillText(\n      `x: ${position.x} y: ${position.y}`,\n      -1 * LargeBrick.Width / 2 * this.__scale,\n      -1 * LargeBrick.Height / 2 * this.__scale,\n    )\n    ctx.restore();\n  }\n\n  dispose() {\n\n  }\n\n}\n","import { Bodies } from 'matter-js';\n\nexport class ManOutline {\n\n  static Width = 156;\n  static Height = 156;\n\n  constructor(x, y) {\n    this.__x = x;\n    this.__y = y;\n\n    this.body = Bodies.fromVertices(\n      x, y,\n      [\n        { x: 31.5, y: 34.5 },\n        { x: 81.5, y: 88 },\n        { x: 126.5, y: 47.5 },\n        { x: 97.5, y: 103.5 },\n        { x: 56.5, y: 103.5 }\n      ],\n      { isStatic: true },\n    )\n\n    this.__img = new Image();\n    this.__img.src = '/images/MAN.png';\n  }\n\n  /**\n   * \n   * @param {CanvasRenderingContext2D} ctx \n   */\n  draw(ctx) {\n    ctx.save(0);\n    ctx.translate(this.__x, this.__y);\n    ctx.drawImage(\n      this.__img,\n      -1 * ManOutline.Width / 2 + 5,\n      -1 * ManOutline.Height / 2 - 10 ,\n      ManOutline.Width,\n      ManOutline.Height,\n    );\n    ctx.restore();\n  }\n\n  dispose() {\n\n  }\n\n}\n","import { Engine, World, Mouse, MouseConstraint, Events } from 'matter-js';\nimport { BrickAtom } from './brickAtom';\nimport { Ground } from './ground';\nimport { LargeBrick } from './largeBrick';\nimport { ManOutline } from './manOutline';\n\nexport class BrickController {\n\n  static CanvasWidth = 920;\n  static CanvasHeight = 480;\n\n  /**\n   * @param {HTMLCanvasElement} dom \n   */\n  constructor(dom) {\n    this.__dom = dom;\n    dom.width = BrickController.CanvasWidth;\n    dom.height = BrickController.CanvasHeight;\n    // this.setCanvasRatio(dom);\n    this.__world = World.create({\n      bounds: {\n        min: {\n          x: 0, y: 0,\n        },\n        max: {\n          x: BrickController.CanvasWidth,\n          y: BrickController.CanvasHeigh,\n        },\n      }\n    });\n\n    this.__engine = Engine.create({\n      world: this.__world,\n    });\n\n    // this.__render = Render.create({\n    //   canvas: this.__dom,\n    //   engine: this.__engine,\n    //   options: {\n    //     width: BrickController.CanvasWidth,\n    //     height: BrickController.CanvasHeight,\n    //     // showAxes: true,\n    //     // showAngleIndicator:true\n    //   },\n    // });\n\n    this.__mouse = Mouse.create(this.__dom);\n    this.__mouseConstraint = MouseConstraint.create(this.__engine, {\n      mouse: this.__mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n            visible: false,\n        },\n      },\n    });\n\n    World.add(this.__engine.world, this.__mouseConstraint);\n\n    this.__engine.world.gravity.y = 1;\n\n    this.__bricks = [];\n    this.__ground = null;\n    this.__lastTimeStamp = null;\n    this.createGround();\n    this.createBodies();\n    this.resetLargeBrick();\n  }\n\n  /**\n   * \n   * @param {HTMLCanvasElement} dom \n   */\n  setCanvasRatio(canvas) {\n    const context = canvas.getContext('2d');\n    var devicePixelRatio = window.devicePixelRatio || 1\n    const backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                            context.mozBackingStorePixelRatio ||\n                            context.msBackingStorePixelRatio ||\n                            context.oBackingStorePixelRatio ||\n                            context.backingStorePixelRatio || 1\n    const ratio = devicePixelRatio / backingStoreRatio;\n\n    const oldWidth = canvas.width;\n    const oldHeight = canvas.height;\n    canvas.width = oldWidth * ratio;\n    canvas.height = oldHeight * ratio;\n    canvas.style.width = oldWidth + 'px';\n    canvas.style.height = oldHeight + 'px';\n    context.scale(this.__ratio * 2, this.__ratio * 2);\n    this.__ratio = ratio;\n  }\n\n  createGround() {\n    this.__ground = new Ground(\n      480, 420,\n      BrickController.CanvasWidth, 10,\n    );\n    this.__bricks.push(this.__ground);\n    // World.add(this.__engine.world, this.__ground.body);\n  }\n\n  createBodies() {\n    const beginX = 620;\n    const beginY = 400;\n\n    for (let i = 0; i < 4; i++) {\n      const count = 5 - i;\n      for (let j = 0; j < count; j++) {\n        const atom = new BrickAtom(beginX + BrickAtom.width * (j + i/2), beginY - BrickAtom.height * i);\n        this.__bricks.push(atom);\n      }\n    }\n\n    const manOutline = new ManOutline(110, 348);\n    this.__bricks.push(manOutline);\n\n    this.__bricks.forEach(brick => {\n      World.add(this.__engine.world, brick.body);\n    });\n  }\n\n  loop() {\n    // window.requestAnimationFrame(this.draw);\n    // Events.on(this.__render, \"afterRender\", this.handleAfterRender);\n    Events.on(this.__engine, \"afterUpdate\", this.handleAfterUpdate);\n    Events.on(this.__mouseConstraint, \"mousemove\", this.handleMouseMove);\n    Events.on(this.__mouseConstraint, \"mouseup\", this.handleMouseUp);\n    Events.on(this.__mouseConstraint, \"startdrag\", this.handleDragStart);\n    Events.on(this.__mouseConstraint, \"enddrag\", this.handleDragEnd);\n    Engine.run(this.__engine);\n    // Render.run(this.__render);\n  }\n\n  handleMouseMove = e => {\n    if (this.__largeBrick && this.__largeBrick.isDragging) {\n      const { position: { x, y } } = e.mouse;\n      if (x > LargeBrick.EndX - 120) {\n        const newBrick = new BrickAtom(x, y);\n        this.__bricks.push(newBrick);\n        this.__tmpBrick = newBrick;\n\n        this.resetLargeBrick();\n      }\n    }\n\n    if (this.__tmpBrick) {\n      const { position } = e.mouse;\n      this.__tmpBrick = position;\n    }\n  }\n\n  handleMouseUp = e => {\n    console.log(e);\n    if (this.__tmpBrick) {\n      World.add(this.__engine.world, this.__tmpBrick.body);\n    }\n  }\n\n  handleAfterUpdate = () => {\n    this.__largeBrick.update();\n\n    /** @type {CanvasRenderingContext2D} */\n    const ctx = this.__dom.getContext('2d');\n\n    ctx.clearRect(0, 0, BrickAtom.width, BrickAtom.height);\n    ctx.fillStyle = \"#FFF3DE\";\n    ctx.fillRect(0, 0, BrickController.CanvasWidth, BrickController.CanvasHeight);\n    // this.__ground.draw(ctx);\n    this.__bricks.forEach(brick => brick.draw(ctx));\n  }\n\n  handleDragStart = e => {\n    if (this.__largeBrick && e.body === this.__largeBrick.body) {\n      this.__largeBrick.isDragging = true;\n    }\n  }\n\n  handleDragEnd = e => {\n    if (this.__largeBrick && e.body === this.__largeBrick.body) {\n      this.resetLargeBrick();\n    }\n  }\n\n  resetLargeBrick() {\n    if (this.__largeBrick) {\n      this.__largeBrick.dispose();\n      World.remove(this.__engine.world, this.__largeBrick.body);\n      this.__bricks = this.__bricks.filter(brick => brick !== this.__largeBrick);\n    }\n\n    this.__largeBrick = new LargeBrick(120, 30);\n    World.add(this.__engine.world, this.__largeBrick.body);\n    this.__bricks = [this.__largeBrick].concat(this.__bricks);\n  }\n\n  // draw = timestamp => {\n  //   if (!this.__lastTimeStamp) {\n  //     this.__lastTimeStamp = timestamp;\n  //   }\n  //   const delta = timestamp - this.__lastTimeStamp;\n  //   this.__lastTimeStamp = timestamp;\n\n  //   // do something\n  //   Engine.update(this.__engine, delta);\n\n  //   const ctx = this.__dom.getContext('2d');\n  //   ctx.clearRect(0, 0, BrickAtom.width, BrickAtom.height);\n  //   this.__bricks.forEach(brick => brick.draw(ctx));\n\n  //   window.requestAnimationFrame(this.draw)\n  // }\n\n  dispose() {\n    // Render.stop(this.__render);\n    Engine.clear(this.__engine);\n    this.__bricks.forEach(brick => {\n      try {\n        brick.dispose();\n      } catch (err) {\n        console.error(err);\n      }\n    });\n    // window.cancelAnimationFrame(this.draw);\n  }\n\n}\n","import React, { Component } from 'react';\nimport { BrickController } from './brickController';\nimport { debounce } from 'lodash-es';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nclass Brick extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.worldContainerRef = React.createRef();\n    this.canvasRef = React.createRef();\n    this.controller = null;\n  }\n\n  componentDidMount() {\n    this.controller = new BrickController(this.canvasRef.current);\n    this.resetSize();\n    this.controller.loop();\n    window.addEventListener('resize', this.debounceResetSize);\n  }\n\n  resetSize = () => {\n    this.worldContainerRef.current.style.width = window.innerWidth + 'px';\n    this.worldContainerRef.current.style.height = window.innerHeight + 'px';\n  }\n\n  debounceResetSize = debounce(this.resetSize, 200, {\n    leading: true,\n  });\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.debounceResetSize);\n    \n    if (this.controller) {\n      this.controller.dispose();\n      this.controller = null;\n    }\n  }\n\n  render() {\n    return (\n      <Container\n        ref={this.worldContainerRef}\n        className=\"brick-world\"\n      >\n        <canvas ref={this.canvasRef} />\n      </Container>\n    );\n  }\n\n}\n\nexport default Brick;\n","import Brick from './brick';\n\nexport default Brick;\n","import React, { Fragment } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport FullPage from '../components/fullPage';\nimport Brick from '../components/brick';\n\nconst Background = createGlobalStyle`\n  body {\n    background-color: #FFF3DE;\n  }\n\n  .full-page {\n    overflow: hidden;\n  }\n`;\n\nconst WhatAmIDoing = () => {\n  return (\n    <Fragment>\n      <Background />\n      <FullPage>\n        Chen Duzhong 在做什么？\n      </FullPage>\n      <FullPage>\n        {/* 帮中少搬砖，获得神秘礼品🎁！ */}\n        <Brick />\n      </FullPage>\n    </Fragment>\n  )\n};\n\nexport default WhatAmIDoing;\n","require(\"core-js/modules/es6.string.anchor\");\n\nrequire(\"core-js/modules/es6.array.fill\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.string.sub\");\n\n/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.Matter = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Body` module contains methods for creating and manipulating body models.\n      * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n      * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      \n      * @class Body\n      */\n      var Body = {};\n      module.exports = Body;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Render = _dereq_('../render/Render');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Axes = _dereq_('../geometry/Axes');\n\n      (function () {\n        Body._inertiaScale = 4;\n        Body._nextCollidingGroupId = 1;\n        Body._nextNonCollidingGroupId = -1;\n        Body._nextCategory = 0x0001;\n        /**\n         * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * Vertices must be specified in clockwise order.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {body} body\n         */\n\n        Body.create = function (options) {\n          var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: {\n              x: 0,\n              y: 0\n            },\n            force: {\n              x: 0,\n              y: 0\n            },\n            torque: 0,\n            positionImpulse: {\n              x: 0,\n              y: 0\n            },\n            constraintImpulse: {\n              x: 0,\n              y: 0,\n              angle: 0\n            },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: {\n              x: 0,\n              y: 0\n            },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n              visible: true,\n              opacity: 1,\n              sprite: {\n                xScale: 1,\n                yScale: 1,\n                xOffset: 0,\n                yOffset: 0\n              },\n              lineWidth: 0\n            }\n          };\n          var body = Common.extend(defaults, options);\n\n          _initProperties(body, options);\n\n          return body;\n        };\n        /**\n         * Returns the next unique group index for which bodies will collide.\n         * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n         * See `body.collisionFilter` for more information.\n         * @method nextGroup\n         * @param {bool} [isNonColliding=false]\n         * @return {Number} Unique group index\n         */\n\n\n        Body.nextGroup = function (isNonColliding) {\n          if (isNonColliding) return Body._nextNonCollidingGroupId--;\n          return Body._nextCollidingGroupId++;\n        };\n        /**\n         * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n         * There are 32 available. See `body.collisionFilter` for more information.\n         * @method nextCategory\n         * @return {Number} Unique category bitfield\n         */\n\n\n        Body.nextCategory = function () {\n          Body._nextCategory = Body._nextCategory << 1;\n          return Body._nextCategory;\n        };\n        /**\n         * Initialises body properties.\n         * @method _initProperties\n         * @private\n         * @param {body} body\n         * @param {} [options]\n         */\n\n\n        var _initProperties = function _initProperties(body, options) {\n          options = options || {}; // init required properties (order is important)\n\n          Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n          });\n          Vertices.rotate(body.vertices, body.angle, body.position);\n          Axes.rotate(body.axes, body.angle);\n          Bounds.update(body.bounds, body.vertices, body.velocity); // allow options to override the automatically calculated properties\n\n          Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n          }); // render properties\n\n          var defaultFillStyle = body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56']),\n              defaultStrokeStyle = '#000';\n          body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n          body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n          body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n          body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n        };\n        /**\n         * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n         * Prefer to use the actual setter functions in performance critical situations.\n         * @method set\n         * @param {body} body\n         * @param {} settings A property name (or map of properties and values) to set on the body.\n         * @param {} value The value to set if `settings` is a single property name.\n         */\n\n\n        Body.set = function (body, settings, value) {\n          var property;\n\n          if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n          }\n\n          for (property in settings) {\n            value = settings[property];\n            if (!settings.hasOwnProperty(property)) continue;\n\n            switch (property) {\n              case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n\n              case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n\n              case 'mass':\n                Body.setMass(body, value);\n                break;\n\n              case 'density':\n                Body.setDensity(body, value);\n                break;\n\n              case 'inertia':\n                Body.setInertia(body, value);\n                break;\n\n              case 'vertices':\n                Body.setVertices(body, value);\n                break;\n\n              case 'position':\n                Body.setPosition(body, value);\n                break;\n\n              case 'angle':\n                Body.setAngle(body, value);\n                break;\n\n              case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n\n              case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n\n              case 'parts':\n                Body.setParts(body, value);\n                break;\n\n              default:\n                body[property] = value;\n            }\n          }\n        };\n        /**\n         * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n         * @method setStatic\n         * @param {body} body\n         * @param {bool} isStatic\n         */\n\n\n        Body.setStatic = function (body, isStatic) {\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n              part.restitution = 0;\n              part.friction = 1;\n              part.mass = part.inertia = part.density = Infinity;\n              part.inverseMass = part.inverseInertia = 0;\n              part.positionPrev.x = part.position.x;\n              part.positionPrev.y = part.position.y;\n              part.anglePrev = part.angle;\n              part.angularVelocity = 0;\n              part.speed = 0;\n              part.angularSpeed = 0;\n              part.motion = 0;\n            } else if (part._original) {\n              part.restitution = part._original.restitution;\n              part.friction = part._original.friction;\n              part.mass = part._original.mass;\n              part.inertia = part._original.inertia;\n              part.density = part._original.density;\n              part.inverseMass = part._original.inverseMass;\n              part.inverseInertia = part._original.inverseInertia;\n              delete part._original;\n            }\n          }\n        };\n        /**\n         * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n         * @method setMass\n         * @param {body} body\n         * @param {number} mass\n         */\n\n\n        Body.setMass = function (body, mass) {\n          var moment = body.inertia / (body.mass / 6);\n          body.inertia = moment * (mass / 6);\n          body.inverseInertia = 1 / body.inertia;\n          body.mass = mass;\n          body.inverseMass = 1 / body.mass;\n          body.density = body.mass / body.area;\n        };\n        /**\n         * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n         * @method setDensity\n         * @param {body} body\n         * @param {number} density\n         */\n\n\n        Body.setDensity = function (body, density) {\n          Body.setMass(body, density * body.area);\n          body.density = density;\n        };\n        /**\n         * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n         * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n         * @method setInertia\n         * @param {body} body\n         * @param {number} inertia\n         */\n\n\n        Body.setInertia = function (body, inertia) {\n          body.inertia = inertia;\n          body.inverseInertia = 1 / body.inertia;\n        };\n        /**\n         * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n         * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n         * They are then automatically translated to world space based on `body.position`.\n         *\n         * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n         * Vertices must form a convex hull, concave hulls are not supported.\n         *\n         * @method setVertices\n         * @param {body} body\n         * @param {vector[]} vertices\n         */\n\n\n        Body.setVertices = function (body, vertices) {\n          // change vertices\n          if (vertices[0].body === body) {\n            body.vertices = vertices;\n          } else {\n            body.vertices = Vertices.create(vertices, body);\n          } // update properties\n\n\n          body.axes = Axes.fromVertices(body.vertices);\n          body.area = Vertices.area(body.vertices);\n          Body.setMass(body, body.density * body.area); // orient vertices around the centre of mass at origin (0, 0)\n\n          var centre = Vertices.centre(body.vertices);\n          Vertices.translate(body.vertices, centre, -1); // update inertia while vertices are at origin (0, 0)\n\n          Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass)); // update geometry\n\n          Vertices.translate(body.vertices, body.position);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n        };\n        /**\n         * Sets the parts of the `body` and updates mass, inertia and centroid.\n         * Each part will have its parent set to `body`.\n         * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n         * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n         * @method setParts\n         * @param {body} body\n         * @param [body] parts\n         * @param {bool} [autoHull=true]\n         */\n\n\n        Body.setParts = function (body, parts, autoHull) {\n          var i; // add all the parts, ensuring that the first part is always the parent body\n\n          parts = parts.slice(0);\n          body.parts.length = 0;\n          body.parts.push(body);\n          body.parent = body;\n\n          for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n\n            if (part !== body) {\n              part.parent = body;\n              body.parts.push(part);\n            }\n          }\n\n          if (body.parts.length === 1) return;\n          autoHull = typeof autoHull !== 'undefined' ? autoHull : true; // find the convex hull of all parts to set on the parent body\n\n          if (autoHull) {\n            var vertices = [];\n\n            for (i = 0; i < parts.length; i++) {\n              vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n          } // sum the properties of all compound parts of the parent body\n\n\n          var total = Body._totalProperties(body);\n\n          body.area = total.area;\n          body.parent = body;\n          body.position.x = total.centre.x;\n          body.position.y = total.centre.y;\n          body.positionPrev.x = total.centre.x;\n          body.positionPrev.y = total.centre.y;\n          Body.setMass(body, total.mass);\n          Body.setInertia(body, total.inertia);\n          Body.setPosition(body, total.centre);\n        };\n        /**\n         * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n         * @method setPosition\n         * @param {body} body\n         * @param {vector} position\n         */\n\n\n        Body.setPosition = function (body, position) {\n          var delta = Vector.sub(position, body.position);\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n         * @method setAngle\n         * @param {body} body\n         * @param {number} angle\n         */\n\n\n        Body.setAngle = function (body, angle) {\n          var delta = angle - body.angle;\n          body.anglePrev += delta;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n\n            if (i > 0) {\n              Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n          }\n        };\n        /**\n         * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setVelocity\n         * @param {body} body\n         * @param {vector} velocity\n         */\n\n\n        Body.setVelocity = function (body, velocity) {\n          body.positionPrev.x = body.position.x - velocity.x;\n          body.positionPrev.y = body.position.y - velocity.y;\n          body.velocity.x = velocity.x;\n          body.velocity.y = velocity.y;\n          body.speed = Vector.magnitude(body.velocity);\n        };\n        /**\n         * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setAngularVelocity\n         * @param {body} body\n         * @param {number} velocity\n         */\n\n\n        Body.setAngularVelocity = function (body, velocity) {\n          body.anglePrev = body.angle - velocity;\n          body.angularVelocity = velocity;\n          body.angularSpeed = Math.abs(body.angularVelocity);\n        };\n        /**\n         * Moves a body by a given vector relative to its current position, without imparting any velocity.\n         * @method translate\n         * @param {body} body\n         * @param {vector} translation\n         */\n\n\n        Body.translate = function (body, translation) {\n          Body.setPosition(body, Vector.add(body.position, translation));\n        };\n        /**\n         * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n         * @method rotate\n         * @param {body} body\n         * @param {number} rotation\n         * @param {vector} [point]\n         */\n\n\n        Body.rotate = function (body, rotation, point) {\n          if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n          } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.setAngle(body, body.angle + rotation);\n          }\n        };\n        /**\n         * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n         * @method scale\n         * @param {body} body\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} [point]\n         */\n\n\n        Body.scale = function (body, scaleX, scaleY, point) {\n          var totalArea = 0,\n              totalInertia = 0;\n          point = point || body.position;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i]; // scale vertices\n\n            Vertices.scale(part.vertices, scaleX, scaleY, point); // update properties\n\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area); // update inertia (requires vertices to be at origin)\n\n            Vertices.translate(part.vertices, {\n              x: -part.position.x,\n              y: -part.position.y\n            });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, {\n              x: part.position.x,\n              y: part.position.y\n            });\n\n            if (i > 0) {\n              totalArea += part.area;\n              totalInertia += part.inertia;\n            } // scale position\n\n\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY; // update bounds\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          } // handle parent body\n\n\n          if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n              Body.setMass(body, body.density * totalArea);\n              Body.setInertia(body, totalInertia);\n            }\n          } // handle circles\n\n\n          if (body.circleRadius) {\n            if (scaleX === scaleY) {\n              body.circleRadius *= scaleX;\n            } else {\n              // body is no longer a circle\n              body.circleRadius = null;\n            }\n          }\n        };\n        /**\n         * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n         * @method update\n         * @param {body} body\n         * @param {number} deltaTime\n         * @param {number} timeScale\n         * @param {number} correction\n         */\n\n\n        Body.update = function (body, deltaTime, timeScale, correction) {\n          var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2); // from the previous step\n\n          var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n              velocityPrevX = body.position.x - body.positionPrev.x,\n              velocityPrevY = body.position.y - body.positionPrev.y; // update velocity with Verlet integration\n\n          body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n          body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.position.x += body.velocity.x;\n          body.position.y += body.velocity.y; // update angular velocity with Verlet integration\n\n          body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n          body.anglePrev = body.angle;\n          body.angle += body.angularVelocity; // track speed and acceleration\n\n          body.speed = Vector.magnitude(body.velocity);\n          body.angularSpeed = Math.abs(body.angularVelocity); // transform the body geometry\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n              part.position.x += body.velocity.x;\n              part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n              Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n              Axes.rotate(part.axes, body.angularVelocity);\n\n              if (i > 0) {\n                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n              }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Applies a force to a body from a given world-space position, including resulting torque.\n         * @method applyForce\n         * @param {body} body\n         * @param {vector} position\n         * @param {vector} force\n         */\n\n\n        Body.applyForce = function (body, position, force) {\n          body.force.x += force.x;\n          body.force.y += force.y;\n          var offset = {\n            x: position.x - body.position.x,\n            y: position.y - body.position.y\n          };\n          body.torque += offset.x * force.y - offset.y * force.x;\n        };\n        /**\n         * Returns the sums of the properties of all compound parts of the parent body.\n         * @method _totalProperties\n         * @private\n         * @param {body} body\n         * @return {}\n         */\n\n\n        Body._totalProperties = function (body) {\n          // from equations at:\n          // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n          // http://output.to/sideway/default.asp?qno=121100087\n          var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: {\n              x: 0,\n              y: 0\n            }\n          }; // sum the properties of all compound parts of the parent body\n\n          for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n          }\n\n          properties.centre = Vector.div(properties.centre, properties.mass);\n          return properties;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a body starts sleeping (where `this` is the body).\n        *\n        * @event sleepStart\n        * @this {body} The body that has started sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a body ends sleeping (where `this` is the body).\n        *\n        * @event sleepEnd\n        * @this {body} The body that has ended sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"body\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Body\"\n         */\n\n        /**\n         * An array of bodies that make up this body. \n         * The first body in the array must always be a self reference to the current body instance.\n         * All bodies in the `parts` array together form a single rigid compound body.\n         * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n         * Parts themselves should never be added to a `World`, only the parent body should be.\n         * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n         *\n         * @property parts\n         * @type body[]\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * A self reference if the body is _not_ a part of another body.\n         * Otherwise this is a reference to the body that this is a part of.\n         * See `body.parts`.\n         *\n         * @property parent\n         * @type body\n         */\n\n        /**\n         * A `Number` specifying the angle of the body, in radians.\n         *\n         * @property angle\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An array of `Vector` objects that specify the convex hull of the rigid body.\n         * These should be provided about the origin `(0, 0)`. E.g.\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n         * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n         *\n         * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n         * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n         *\n         * @property vertices\n         * @type vector[]\n         */\n\n        /**\n         * A `Vector` that specifies the current world-space position of the body.\n         *\n         * @property position\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n         *\n         * @property force\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n         *\n         * @property torque\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n         *\n         * @readOnly\n         * @property speed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n         *\n         * @readOnly\n         * @property angularSpeed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property velocity\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property angularVelocity\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n         * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n         *\n         * @property isStatic\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n         *\n         * @property isSensor\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n         * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n         *\n         * @property isSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n         * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n         *\n         * @readOnly\n         * @property motion\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n         *\n         * @property sleepThreshold\n         * @type number\n         * @default 60\n         */\n\n        /**\n         * A `Number` that defines the density of the body, that is its mass per unit area.\n         * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n         * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n         *\n         * @property density\n         * @type number\n         * @default 0.001\n         */\n\n        /**\n         * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n         * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n         *\n         * @property mass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse mass of the body (`1 / mass`).\n         * If you modify this value, you must also modify the `body.mass` property.\n         *\n         * @property inverseMass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n         * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n         *\n         * @property inertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n         * If you modify this value, you must also modify the `body.inertia` property.\n         *\n         * @property inverseInertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n         * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n         * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n         *\n         *     Math.max(bodyA.restitution, bodyB.restitution)\n         *\n         * @property restitution\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means that the body may slide indefinitely.\n         * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n         *\n         * The effects of the value may be non-linear. \n         * High values may be unstable depending on the body.\n         * The engine uses a Coulomb friction model including static and kinetic friction.\n         * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n         *\n         *     Math.min(bodyA.friction, bodyB.friction)\n         *\n         * @property friction\n         * @type number\n         * @default 0.1\n         */\n\n        /**\n         * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n         * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n         * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n         * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n         *\n         * @property frictionStatic\n         * @type number\n         * @default 0.5\n         */\n\n        /**\n         * A `Number` that defines the air friction of the body (air resistance). \n         * A value of `0` means the body will never slow as it moves through space.\n         * The higher the value, the faster a body slows when moving through space.\n         * The effects of the value are non-linear. \n         *\n         * @property frictionAir\n         * @type number\n         * @default 0.01\n         */\n\n        /**\n         * An `Object` that specifies the collision filtering properties of this body.\n         *\n         * Collisions between two bodies will obey the following rules:\n         * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n         *   they will always collide if the value is positive, and they will never collide\n         *   if the value is negative.\n         * - If the two bodies have different values of `collisionFilter.group` or if one\n         *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n         *\n         * Each body belongs to a collision category, given by `collisionFilter.category`. This\n         * value is used as a bit field and the category should have only one bit set, meaning that\n         * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n         * different collision categories available.\n         *\n         * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n         * the categories it collides with (the value is the bitwise AND value of all these categories).\n         *\n         * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n         * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n         * are both true.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n        /**\n         * An Integer `Number`, that specifies the collision group this body belongs to.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.group\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * A bit field that specifies the collision category this body belongs to.\n         * The category value should have only one bit set, for example `0x0001`.\n         * This means there are up to 32 unique collision categories available.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.category\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * A bit mask that specifies the collision categories this body may collide with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.mask\n         * @type object\n         * @default -1\n         */\n\n        /**\n         * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n         * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n         * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n         *\n         * @property slop\n         * @type number\n         * @default 0.05\n         */\n\n        /**\n         * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n         *\n         * @property timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the body should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * Sets the opacity to use when rendering.\n         *\n         * @property render.opacity\n         * @type number\n         * @default 1\n        */\n\n        /**\n         * An `Object` that defines the sprite properties to use when rendering, if any.\n         *\n         * @property render.sprite\n         * @type object\n         */\n\n        /**\n         * An `String` that defines the path to the image to use as the sprite texture, if any.\n         *\n         * @property render.sprite.texture\n         * @type string\n         */\n\n        /**\n         * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n         *\n         * @property render.sprite.xScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n         *\n         * @property render.sprite.yScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n         *\n         * @property render.sprite.xOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n         *\n         * @property render.sprite.yOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.fillStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * An array of unique axis vectors (edge normals) used for collision detection.\n         * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n         * They are constantly updated by `Body.update` during the simulation.\n         *\n         * @property axes\n         * @type vector[]\n         */\n\n        /**\n         * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n         *\n         * @property area\n         * @type string\n         * @default \n         */\n\n        /**\n         * A `Bounds` object that defines the AABB region for the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31\n    }],\n    2: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n      * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n      * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n      * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composite\n      */\n      var Composite = {};\n      module.exports = Composite;\n\n      var Events = _dereq_('../core/Events');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Body = _dereq_('./Body');\n\n      (function () {\n        /**\n         * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properites section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} [options]\n         * @return {composite} A new composite\n         */\n        Composite.create = function (options) {\n          return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite',\n            plugin: {}\n          }, options);\n        };\n        /**\n         * Sets the composite's `isModified` flag. \n         * If `updateParents` is true, all parents will be set (default: false).\n         * If `updateChildren` is true, all children will be set (default: false).\n         * @method setModified\n         * @param {composite} composite\n         * @param {boolean} isModified\n         * @param {boolean} [updateParents=false]\n         * @param {boolean} [updateChildren=false]\n         */\n\n\n        Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n          composite.isModified = isModified;\n\n          if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n          }\n\n          if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              var childComposite = composite.composites[i];\n              Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n          }\n        };\n        /**\n         * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n         * @method add\n         * @param {composite} composite\n         * @param {} object\n         * @return {composite} The original composite with the objects added\n         */\n\n\n        Composite.add = function (composite, object) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeAdd', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                  Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                  break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n\n              case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n\n              case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n\n              case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterAdd', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Optionally searching its children recursively.\n         * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n         * @method remove\n         * @param {composite} composite\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the objects removed\n         */\n\n\n        Composite.remove = function (composite, object, deep) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeRemove', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n\n              case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n\n              case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n\n              case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterRemove', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Adds a composite to the given composite.\n         * @private\n         * @method addComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @return {composite} The original compositeA with the objects from compositeB added\n         */\n\n\n        Composite.addComposite = function (compositeA, compositeB) {\n          compositeA.composites.push(compositeB);\n          compositeB.parent = compositeA;\n          Composite.setModified(compositeA, true, true, false);\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @param {boolean} [deep=false]\n         * @return {composite} The original compositeA with the composite removed\n         */\n\n\n        Composite.removeComposite = function (compositeA, compositeB, deep) {\n          var position = Common.indexOf(compositeA.composites, compositeB);\n\n          if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++) {\n              Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n          }\n\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite.\n         * @private\n         * @method removeCompositeAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the composite removed\n         */\n\n\n        Composite.removeCompositeAt = function (composite, position) {\n          composite.composites.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a body to the given composite.\n         * @private\n         * @method addBody\n         * @param {composite} composite\n         * @param {body} body\n         * @return {composite} The original composite with the body added\n         */\n\n\n        Composite.addBody = function (composite, body) {\n          composite.bodies.push(body);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeBody\n         * @param {composite} composite\n         * @param {body} body\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBody = function (composite, body, deep) {\n          var position = Common.indexOf(composite.bodies, body);\n\n          if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeBody(composite.composites[i], body, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeBodyAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBodyAt = function (composite, position) {\n          composite.bodies.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a constraint to the given composite.\n         * @private\n         * @method addConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @return {composite} The original composite with the constraint added\n         */\n\n\n        Composite.addConstraint = function (composite, constraint) {\n          composite.constraints.push(constraint);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a constraint from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraint = function (composite, constraint, deep) {\n          var position = Common.indexOf(composite.constraints, constraint);\n\n          if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeConstraintAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraintAt = function (composite, position) {\n          composite.constraints.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes all bodies, constraints and composites from the given composite.\n         * Optionally clearing its children recursively.\n         * @method clear\n         * @param {composite} composite\n         * @param {boolean} keepStatic\n         * @param {boolean} [deep=false]\n         */\n\n\n        Composite.clear = function (composite, keepStatic, deep) {\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.clear(composite.composites[i], keepStatic, true);\n            }\n          }\n\n          if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function (body) {\n              return body.isStatic;\n            });\n          } else {\n            composite.bodies.length = 0;\n          }\n\n          composite.constraints.length = 0;\n          composite.composites.length = 0;\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns all bodies in the given composite, including all bodies in its children, recursively.\n         * @method allBodies\n         * @param {composite} composite\n         * @return {body[]} All the bodies\n         */\n\n\n        Composite.allBodies = function (composite) {\n          var bodies = [].concat(composite.bodies);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n          }\n\n          return bodies;\n        };\n        /**\n         * Returns all constraints in the given composite, including all constraints in its children, recursively.\n         * @method allConstraints\n         * @param {composite} composite\n         * @return {constraint[]} All the constraints\n         */\n\n\n        Composite.allConstraints = function (composite) {\n          var constraints = [].concat(composite.constraints);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n          }\n\n          return constraints;\n        };\n        /**\n         * Returns all composites in the given composite, including all composites in its children, recursively.\n         * @method allComposites\n         * @param {composite} composite\n         * @return {composite[]} All the composites\n         */\n\n\n        Composite.allComposites = function (composite) {\n          var composites = [].concat(composite.composites);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n          }\n\n          return composites;\n        };\n        /**\n         * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n         * @method get\n         * @param {composite} composite\n         * @param {number} id\n         * @param {string} type\n         * @return {object} The requested object, if found\n         */\n\n\n        Composite.get = function (composite, id, type) {\n          var objects, object;\n\n          switch (type) {\n            case 'body':\n              objects = Composite.allBodies(composite);\n              break;\n\n            case 'constraint':\n              objects = Composite.allConstraints(composite);\n              break;\n\n            case 'composite':\n              objects = Composite.allComposites(composite).concat(composite);\n              break;\n          }\n\n          if (!objects) return null;\n          object = objects.filter(function (object) {\n            return object.id.toString() === id.toString();\n          });\n          return object.length === 0 ? null : object[0];\n        };\n        /**\n         * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n         * @method move\n         * @param {compositeA} compositeA\n         * @param {object[]} objects\n         * @param {compositeB} compositeB\n         * @return {composite} Returns compositeA\n         */\n\n\n        Composite.move = function (compositeA, objects, compositeB) {\n          Composite.remove(compositeA, objects);\n          Composite.add(compositeB, objects);\n          return compositeA;\n        };\n        /**\n         * Assigns new ids for all objects in the composite, recursively.\n         * @method rebase\n         * @param {composite} composite\n         * @return {composite} Returns composite\n         */\n\n\n        Composite.rebase = function (composite) {\n          var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n\n          for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Translates all children in the composite by a given vector relative to their current positions, \n         * without imparting any velocity.\n         * @method translate\n         * @param {composite} composite\n         * @param {vector} translation\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.translate = function (composite, translation, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n         * @method rotate\n         * @param {composite} composite\n         * @param {number} rotation\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.rotate = function (composite, rotation, point, recursive) {\n          var cos = Math.cos(rotation),\n              sin = Math.sin(rotation),\n              bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.rotate(body, rotation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n         * @method scale\n         * @param {composite} composite\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + dx * scaleX,\n              y: point.y + dy * scaleY\n            });\n            Body.scale(body, scaleX, scaleY);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns the union of the bounds of all of the composite's bodies.\n         * @method bounds\n         * @param {composite} composite The composite.\n         * @returns {bounds} The composite bounds.\n         */\n\n\n        Composite.bounds = function (composite) {\n          var bodies = Composite.allBodies(composite),\n              vertices = [];\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n          }\n\n          return Bounds.create(vertices);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, before objects have been added.\n        *\n        * @event beforeAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, after objects have been added.\n        *\n        * @event afterAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, before objects have been removed.\n        *\n        * @event beforeRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, after objects have been removed.\n        *\n        * @event afterRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"composite\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage composites.\n         *\n         * @property label\n         * @type string\n         * @default \"Composite\"\n         */\n\n        /**\n         * A flag that specifies whether the composite has been modified during the current step.\n         * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n         * If you need to change it manually, you should use the `Composite.setModified` method.\n         *\n         * @property isModified\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n         *\n         * @property parent\n         * @type composite\n         * @default null\n         */\n\n        /**\n         * An array of `Body` that are _direct_ children of this composite.\n         * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n         *\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * An array of `Constraint` that are _direct_ children of this composite.\n         * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n         *\n         * @property constraints\n         * @type constraint[]\n         * @default []\n         */\n\n        /**\n         * An array of `Composite` that are _direct_ children of this composite.\n         * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n         *\n         * @property composites\n         * @type composite[]\n         * @default []\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"./Body\": 1\n    }],\n    3: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.World` module contains methods for creating and manipulating the world composite.\n      * A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n      * A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n      * It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n      * There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class World\n      * @extends Composite\n      */\n      var World = {};\n      module.exports = World;\n\n      var Composite = _dereq_('./Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @constructor\n         * @param {} options\n         * @return {world} A new world\n         */\n        World.create = function (options) {\n          var composite = Composite.create();\n          var defaults = {\n            label: 'World',\n            gravity: {\n              x: 0,\n              y: 1,\n              scale: 0.001\n            },\n            bounds: {\n              min: {\n                x: -Infinity,\n                y: -Infinity\n              },\n              max: {\n                x: Infinity,\n                y: Infinity\n              }\n            }\n          };\n          return Common.extend(composite, defaults, options);\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * The gravity to apply on the world.\n         *\n         * @property gravity\n         * @type object\n         */\n\n        /**\n         * The gravity x component.\n         *\n         * @property gravity.x\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * The gravity y component.\n         *\n         * @property gravity.y\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * The gravity scale factor.\n         *\n         * @property gravity.scale\n         * @type object\n         * @default 0.001\n         */\n\n        /**\n         * A `Bounds` object that defines the world bounds for collision detection.\n         *\n         * @property bounds\n         * @type bounds\n         * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n         */\n        // World is a Composite body\n        // see src/module/Outro.js for these aliases:\n\n        /**\n         * An alias for Composite.add\n         * @method add\n         * @param {world} world\n         * @param {} object\n         * @return {composite} The original world with the objects added\n         */\n\n        /**\n         * An alias for Composite.remove\n         * @method remove\n         * @param {world} world\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original world with the objects removed\n         */\n\n        /**\n         * An alias for Composite.clear\n         * @method clear\n         * @param {world} world\n         * @param {boolean} keepStatic\n         */\n\n        /**\n         * An alias for Composite.addComposite\n         * @method addComposite\n         * @param {world} world\n         * @param {composite} composite\n         * @return {world} The original world with the objects from composite added\n         */\n\n        /**\n         * An alias for Composite.addBody\n         * @method addBody\n         * @param {world} world\n         * @param {body} body\n         * @return {world} The original world with the body added\n         */\n\n        /**\n         * An alias for Composite.addConstraint\n         * @method addConstraint\n         * @param {world} world\n         * @param {constraint} constraint\n         * @return {world} The original world with the constraint added\n         */\n\n      })();\n    }, {\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Composite\": 2\n    }],\n    4: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n      *\n      * @class Contact\n      */\n      var Contact = {};\n      module.exports = Contact;\n\n      (function () {\n        /**\n         * Creates a new contact.\n         * @method create\n         * @param {vertex} vertex\n         * @return {contact} A new contact\n         */\n        Contact.create = function (vertex) {\n          return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n          };\n        };\n        /**\n         * Generates a contact id.\n         * @method id\n         * @param {vertex} vertex\n         * @return {string} Unique contactID\n         */\n\n\n        Contact.id = function (vertex) {\n          return vertex.body.id + '_' + vertex.index;\n        };\n      })();\n    }, {}],\n    5: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n      *\n      * @class Detector\n      */\n      // TODO: speculative contacts\n      var Detector = {};\n      module.exports = Detector;\n\n      var SAT = _dereq_('./SAT');\n\n      var Pair = _dereq_('./Pair');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        /**\n         * Finds all collisions given a list of pairs.\n         * @method collisions\n         * @param {pair[]} broadphasePairs\n         * @param {engine} engine\n         * @return {array} collisions\n         */\n        Detector.collisions = function (broadphasePairs, engine) {\n          var collisions = [],\n              pairsTable = engine.pairs.table;\n\n          for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0],\n                bodyB = broadphasePairs[i][1];\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping)) continue;\n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) continue; // mid phase\n\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n              for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                var partA = bodyA.parts[j];\n\n                for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                  var partB = bodyB.parts[k];\n\n                  if (partA === bodyA && partB === bodyB || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                    // find a previous collision we could reuse\n                    var pairId = Pair.id(partA, partB),\n                        pair = pairsTable[pairId],\n                        previousCollision;\n\n                    if (pair && pair.isActive) {\n                      previousCollision = pair.collision;\n                    } else {\n                      previousCollision = null;\n                    } // narrow phase\n\n\n                    var collision = SAT.collides(partA, partB, previousCollision);\n\n                    if (collision.collided) {\n                      collisions.push(collision);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns `true` if both supplied collision filters will allow a collision to occur.\n         * See `body.collisionFilter` for more information.\n         * @method canCollide\n         * @param {} filterA\n         * @param {} filterB\n         * @return {bool} `true` if collision can occur\n         */\n\n\n        Detector.canCollide = function (filterA, filterB) {\n          if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n          return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n        };\n      })();\n    }, {\n      \"../geometry/Bounds\": 26,\n      \"./Pair\": 7,\n      \"./SAT\": 11\n    }],\n    6: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n      *\n      * @class Grid\n      */\n      var Grid = {};\n      module.exports = Grid;\n\n      var Pair = _dereq_('./Pair');\n\n      var Detector = _dereq_('./Detector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new grid.\n         * @method create\n         * @param {} options\n         * @return {grid} A new grid\n         */\n        Grid.create = function (options) {\n          var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * The width of a single grid bucket.\n         *\n         * @property bucketWidth\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * The height of a single grid bucket.\n         *\n         * @property bucketHeight\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * Updates the grid.\n         * @method update\n         * @param {grid} grid\n         * @param {body[]} bodies\n         * @param {engine} engine\n         * @param {boolean} forceUpdate\n         */\n\n\n        Grid.update = function (grid, bodies, engine, forceUpdate) {\n          var i,\n              col,\n              row,\n              world = engine.world,\n              buckets = grid.buckets,\n              bucket,\n              bucketId,\n              gridChanged = false;\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isSleeping && !forceUpdate) continue; // don't update out of world bodies\n\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y) continue;\n\n            var newRegion = Grid._getRegion(grid, body); // if the body has changed grid region\n\n\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n              if (!body.region || forceUpdate) body.region = newRegion;\n\n              var union = Grid._regionUnion(newRegion, body.region); // update grid buckets affected by region change\n              // iterate over the union of both regions\n\n\n              for (col = union.startCol; col <= union.endCol; col++) {\n                for (row = union.startRow; row <= union.endRow; row++) {\n                  bucketId = Grid._getBucketId(col, row);\n                  bucket = buckets[bucketId];\n                  var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                  var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow; // remove from old region buckets\n\n                  if (!isInsideNewRegion && isInsideOldRegion) {\n                    if (isInsideOldRegion) {\n                      if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                    }\n                  } // add to new region buckets\n\n\n                  if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n\n                    Grid._bucketAddBody(grid, bucket, body);\n                  }\n                }\n              } // set the new region\n\n\n              body.region = newRegion; // flag changes so we can update pairs\n\n              gridChanged = true;\n            }\n          } // update pairs list only if pairs changed (i.e. a body changed region)\n\n\n          if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n        };\n        /**\n         * Clears the grid.\n         * @method clear\n         * @param {grid} grid\n         */\n\n\n        Grid.clear = function (grid) {\n          grid.buckets = {};\n          grid.pairs = {};\n          grid.pairsList = [];\n        };\n        /**\n         * Finds the union of two regions.\n         * @method _regionUnion\n         * @private\n         * @param {} regionA\n         * @param {} regionB\n         * @return {} region\n         */\n\n\n        Grid._regionUnion = function (regionA, regionB) {\n          var startCol = Math.min(regionA.startCol, regionB.startCol),\n              endCol = Math.max(regionA.endCol, regionB.endCol),\n              startRow = Math.min(regionA.startRow, regionB.startRow),\n              endRow = Math.max(regionA.endRow, regionB.endRow);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Gets the region a given body falls in for a given grid.\n         * @method _getRegion\n         * @private\n         * @param {} grid\n         * @param {} body\n         * @return {} region\n         */\n\n\n        Grid._getRegion = function (grid, body) {\n          var bounds = body.bounds,\n              startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n              endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n              startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n              endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Creates a region.\n         * @method _createRegion\n         * @private\n         * @param {} startCol\n         * @param {} endCol\n         * @param {} startRow\n         * @param {} endRow\n         * @return {} region\n         */\n\n\n        Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n          return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n          };\n        };\n        /**\n         * Gets the bucket id at the given position.\n         * @method _getBucketId\n         * @private\n         * @param {} column\n         * @param {} row\n         * @return {string} bucket id\n         */\n\n\n        Grid._getBucketId = function (column, row) {\n          return 'C' + column + 'R' + row;\n        };\n        /**\n         * Creates a bucket.\n         * @method _createBucket\n         * @private\n         * @param {} buckets\n         * @param {} bucketId\n         * @return {} bucket\n         */\n\n\n        Grid._createBucket = function (buckets, bucketId) {\n          var bucket = buckets[bucketId] = [];\n          return bucket;\n        };\n        /**\n         * Adds a body to a bucket.\n         * @method _bucketAddBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketAddBody = function (grid, bucket, body) {\n          // add new pairs\n          for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n            if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue; // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n              pair[2] += 1;\n            } else {\n              grid.pairs[pairId] = [body, bodyB, 1];\n            }\n          } // add to bodies (after pairs, otherwise pairs with self)\n\n\n          bucket.push(body);\n        };\n        /**\n         * Removes a body from a bucket.\n         * @method _bucketRemoveBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketRemoveBody = function (grid, bucket, body) {\n          // remove from bucket\n          bucket.splice(Common.indexOf(bucket, body), 1); // update pair counts\n\n          for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n            if (pair) pair[2] -= 1;\n          }\n        };\n        /**\n         * Generates a list of the active pairs in the grid.\n         * @method _createActivePairsList\n         * @private\n         * @param {} grid\n         * @return [] pairs\n         */\n\n\n        Grid._createActivePairsList = function (grid) {\n          var pairKeys,\n              pair,\n              pairs = []; // grid.pairs is used as a hashmap\n\n          pairKeys = Common.keys(grid.pairs); // iterate over grid.pairs\n\n          for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]]; // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n\n            if (pair[2] > 0) {\n              pairs.push(pair);\n            } else {\n              delete grid.pairs[pairKeys[k]];\n            }\n          }\n\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Detector\": 5,\n      \"./Pair\": 7\n    }],\n    7: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n      *\n      * @class Pair\n      */\n      var Pair = {};\n      module.exports = Pair;\n\n      var Contact = _dereq_('./Contact');\n\n      (function () {\n        /**\n         * Creates a pair.\n         * @method create\n         * @param {collision} collision\n         * @param {number} timestamp\n         * @return {pair} A new pair\n         */\n        Pair.create = function (collision, timestamp) {\n          var bodyA = collision.bodyA,\n              bodyB = collision.bodyB,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n          };\n          Pair.update(pair, collision, timestamp);\n          return pair;\n        };\n        /**\n         * Updates a pair given a collision.\n         * @method update\n         * @param {pair} pair\n         * @param {collision} collision\n         * @param {number} timestamp\n         */\n\n\n        Pair.update = function (pair, collision, timestamp) {\n          var contacts = pair.contacts,\n              supports = collision.supports,\n              activeContacts = pair.activeContacts,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          pair.collision = collision;\n          pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n          pair.friction = Math.min(parentA.friction, parentB.friction);\n          pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n          pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n          pair.slop = Math.max(parentA.slop, parentB.slop);\n          activeContacts.length = 0;\n\n          if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n              var support = supports[i],\n                  contactId = Contact.id(support),\n                  contact = contacts[contactId];\n\n              if (contact) {\n                activeContacts.push(contact);\n              } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n              }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n          } else {\n            if (pair.isActive === true) Pair.setActive(pair, false, timestamp);\n          }\n        };\n        /**\n         * Set a pair as active or inactive.\n         * @method setActive\n         * @param {pair} pair\n         * @param {bool} isActive\n         * @param {number} timestamp\n         */\n\n\n        Pair.setActive = function (pair, isActive, timestamp) {\n          if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n          } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n          }\n        };\n        /**\n         * Get the id for the given pair.\n         * @method id\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {string} Unique pairId\n         */\n\n\n        Pair.id = function (bodyA, bodyB) {\n          if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n          } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n          }\n        };\n      })();\n    }, {\n      \"./Contact\": 4\n    }],\n    8: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n      *\n      * @class Pairs\n      */\n      var Pairs = {};\n      module.exports = Pairs;\n\n      var Pair = _dereq_('./Pair');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        Pairs._pairMaxIdleLife = 1000;\n        /**\n         * Creates a new pairs structure.\n         * @method create\n         * @param {object} options\n         * @return {pairs} A new pairs structure\n         */\n\n        Pairs.create = function (options) {\n          return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n          }, options);\n        };\n        /**\n         * Updates pairs given a list of collisions.\n         * @method update\n         * @param {object} pairs\n         * @param {collision[]} collisions\n         * @param {number} timestamp\n         */\n\n\n        Pairs.update = function (pairs, collisions, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              collisionStart = pairs.collisionStart,\n              collisionEnd = pairs.collisionEnd,\n              collisionActive = pairs.collisionActive,\n              activePairIds = [],\n              collision,\n              pairId,\n              pair,\n              i; // clear collision state arrays, but maintain old reference\n\n          collisionStart.length = 0;\n          collisionEnd.length = 0;\n          collisionActive.length = 0;\n\n          for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n              pairId = Pair.id(collision.bodyA, collision.bodyB);\n              activePairIds.push(pairId);\n              pair = pairsTable[pairId];\n\n              if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                  // pair exists and is active\n                  collisionActive.push(pair);\n                } else {\n                  // pair exists but was inactive, so a collision has just started again\n                  collisionStart.push(pair);\n                } // update the pair\n\n\n                Pair.update(pair, collision, timestamp);\n              } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pairId] = pair; // push the new pair\n\n                collisionStart.push(pair);\n                pairsList.push(pair);\n              }\n            }\n          } // deactivate previously active pairs that are now inactive\n\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n              Pair.setActive(pair, false, timestamp);\n              collisionEnd.push(pair);\n            }\n          }\n        };\n        /**\n         * Finds and removes pairs that have been inactive for a set amount of time.\n         * @method removeOld\n         * @param {object} pairs\n         * @param {number} timestamp\n         */\n\n\n        Pairs.removeOld = function (pairs, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              indexesToRemove = [],\n              pair,\n              collision,\n              pairIndex,\n              i;\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision; // never remove sleeping pairs\n\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n              pair.timeUpdated = timestamp;\n              continue;\n            } // if pair is inactive for too long, mark it to be removed\n\n\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n              indexesToRemove.push(i);\n            }\n          } // remove marked pairs\n\n\n          for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n          }\n        };\n        /**\n         * Clears the given pairs structure.\n         * @method clear\n         * @param {pairs} pairs\n         * @return {pairs} pairs\n         */\n\n\n        Pairs.clear = function (pairs) {\n          pairs.table = {};\n          pairs.list.length = 0;\n          pairs.collisionStart.length = 0;\n          pairs.collisionActive.length = 0;\n          pairs.collisionEnd.length = 0;\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Pair\": 7\n    }],\n    9: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Query` module contains methods for performing collision queries.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Query\n      */\n      var Query = {};\n      module.exports = Query;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var SAT = _dereq_('./SAT');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Bodies = _dereq_('../factory/Bodies');\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      (function () {\n        /**\n         * Returns a list of collisions between `body` and `bodies`.\n         * @method collides\n         * @param {body} body\n         * @param {body[]} bodies\n         * @return {object[]} Collisions\n         */\n        Query.collides = function (body, bodies) {\n          var collisions = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n\n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n              for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                var part = bodyA.parts[j];\n\n                if (Bounds.overlaps(part.bounds, body.bounds)) {\n                  var collision = SAT.collides(part, body);\n\n                  if (collision.collided) {\n                    collisions.push(collision);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n         * @method ray\n         * @param {body[]} bodies\n         * @param {vector} startPoint\n         * @param {vector} endPoint\n         * @param {number} [rayWidth]\n         * @return {object[]} Collisions\n         */\n\n\n        Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n          rayWidth = rayWidth || 1e-100;\n          var rayAngle = Vector.angle(startPoint, endPoint),\n              rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n              rayX = (endPoint.x + startPoint.x) * 0.5,\n              rayY = (endPoint.y + startPoint.y) * 0.5,\n              ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n              collisions = Query.collides(ray, bodies);\n\n          for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n         * @method region\n         * @param {body[]} bodies\n         * @param {bounds} bounds\n         * @param {bool} [outside=false]\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.region = function (bodies, bounds, outside) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if (overlaps && !outside || !overlaps && outside) result.push(body);\n          }\n\n          return result;\n        };\n        /**\n         * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n         * @method point\n         * @param {body[]} bodies\n         * @param {vector} point\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.point = function (bodies, point) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n              for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                  result.push(body);\n                  break;\n                }\n              }\n            }\n          }\n\n          return result;\n        };\n      })();\n    }, {\n      \"../factory/Bodies\": 23,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"./SAT\": 11\n    }],\n    10: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Resolver` module contains methods for resolving collision pairs.\n      *\n      * @class Resolver\n      */\n      var Resolver = {};\n      module.exports = Resolver;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        Resolver._restingThresh = 4;\n        Resolver._restingThreshTangent = 6;\n        Resolver._positionDampen = 0.9;\n        Resolver._positionWarming = 0.8;\n        Resolver._frictionNormalMultiplier = 5;\n        /**\n         * Prepare pairs for position solving.\n         * @method preSolvePosition\n         * @param {pair[]} pairs\n         */\n\n        Resolver.preSolvePosition = function (pairs) {\n          var i, pair, activeCount; // find total contacts on each body\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n          }\n        };\n        /**\n         * Find a solution for pair positions.\n         * @method solvePosition\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solvePosition = function (pairs, timeScale) {\n          var i,\n              pair,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              bodyBtoA,\n              contactShare,\n              positionImpulse,\n              contactCount = {},\n              tempA = Vector._temp[0],\n              tempB = Vector._temp[1],\n              tempC = Vector._temp[2],\n              tempD = Vector._temp[3]; // find impulses required to resolve penetration\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal; // get current separation between body edges involved in collision\n\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), Vector.add(bodyA.positionImpulse, Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n            pair.separation = Vector.dot(normal, bodyBtoA);\n          }\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n            if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyA.totalContacts;\n              bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n              bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyB.totalContacts;\n              bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n              bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n          }\n        };\n        /**\n         * Apply position resolution.\n         * @method postSolvePosition\n         * @param {body[]} bodies\n         */\n\n\n        Resolver.postSolvePosition = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset contact count\n\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n              // update body geometry\n              for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                Vertices.translate(part.vertices, body.positionImpulse);\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n                part.position.x += body.positionImpulse.x;\n                part.position.y += body.positionImpulse.y;\n              } // move the body without changing velocity\n\n\n              body.positionPrev.x += body.positionImpulse.x;\n              body.positionPrev.y += body.positionImpulse.y;\n\n              if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                // reset cached impulse if the body has velocity along it\n                body.positionImpulse.x = 0;\n                body.positionImpulse.y = 0;\n              } else {\n                // warm the next iteration\n                body.positionImpulse.x *= Resolver._positionWarming;\n                body.positionImpulse.y *= Resolver._positionWarming;\n              }\n            }\n          }\n        };\n        /**\n         * Prepare pairs for velocity solving.\n         * @method preSolveVelocity\n         * @param {pair[]} pairs\n         */\n\n\n        Resolver.preSolveVelocity = function (pairs) {\n          var i,\n              j,\n              pair,\n              contacts,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              tangent,\n              contact,\n              contactVertex,\n              normalImpulse,\n              tangentImpulse,\n              offset,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1];\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent; // resolve each contact\n\n            for (j = 0; j < contacts.length; j++) {\n              contact = contacts[j];\n              contactVertex = contact.vertex;\n              normalImpulse = contact.normalImpulse;\n              tangentImpulse = contact.tangentImpulse;\n\n              if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                // total impulse from contact\n                impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n                impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                  bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                  bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                  bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                  bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                  bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                  bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                }\n              }\n            }\n          }\n        };\n        /**\n         * Find a solution for pair velocities.\n         * @method solveVelocity\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solveVelocity = function (pairs, timeScale) {\n          var timeScaleSquared = timeScale * timeScale,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1],\n              tempB = Vector._temp[2],\n              tempC = Vector._temp[3],\n              tempD = Vector._temp[4],\n              tempE = Vector._temp[5];\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length; // update body velocities\n\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev; // resolve each contact\n\n            for (var j = 0; j < contacts.length; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex,\n                  offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                  offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                  velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                  velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD),\n                  relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                  normalVelocity = Vector.dot(normal, relativeVelocity);\n              var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                  tangentSpeed = Math.abs(tangentVelocity),\n                  tangentVelocityDirection = Common.sign(tangentVelocity); // raw impulses\n\n              var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                  normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier; // coulomb friction\n\n\n              var tangentImpulse = tangentVelocity,\n                  maxFriction = Infinity;\n\n              if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                maxFriction = tangentSpeed;\n                tangentImpulse = Common.clamp(pair.friction * tangentVelocityDirection * timeScaleSquared, -maxFriction, maxFriction);\n              } // modify impulses accounting for mass, inertia and offset\n\n\n              var oAcN = Vector.cross(offsetA, normal),\n                  oBcN = Vector.cross(offsetB, normal),\n                  share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n              normalImpulse *= share;\n              tangentImpulse *= share; // handle high velocity and resting collisions separately\n\n              if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                // high normal velocity so clear cached contact normal impulse\n                contact.normalImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // impulse constraint tends to 0\n                var contactNormalImpulse = contact.normalImpulse;\n                contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n              } // handle high velocity and resting collisions separately\n\n\n              if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                // high tangent velocity so clear cached contact tangent impulse\n                contact.tangentImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                var contactTangentImpulse = contact.tangentImpulse;\n                contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n              } // total impulse from contact\n\n\n              impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n              impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n              }\n\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    11: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n      *\n      * @class SAT\n      */\n      // TODO: true circles and curves\n      var SAT = {};\n      module.exports = SAT;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      (function () {\n        /**\n         * Detect collision between two bodies using the Separating Axis Theorem.\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {collision} previousCollision\n         * @return {collision} collision\n         */\n        SAT.collides = function (bodyA, bodyB, previousCollision) {\n          var overlapAB,\n              overlapBA,\n              minOverlap,\n              collision,\n              canReusePrevCol = false;\n\n          if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed; // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2; // reuse collision object\n\n            collision = previousCollision;\n          } else {\n            collision = {\n              collided: false,\n              bodyA: bodyA,\n              bodyB: bodyB\n            };\n          }\n\n          if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n          } else {\n            // if we can't reuse a result, perform a full SAT test\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n              minOverlap = overlapAB;\n              collision.axisBody = bodyA;\n            } else {\n              minOverlap = overlapBA;\n              collision.axisBody = bodyB;\n            } // important for reuse later\n\n\n            collision.axisNumber = minOverlap.axisNumber;\n          }\n\n          collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n          collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n          collision.collided = true;\n          collision.depth = minOverlap.overlap;\n          collision.parentA = collision.bodyA.parent;\n          collision.parentB = collision.bodyB.parent;\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB; // ensure normal is facing away from bodyA\n\n          if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n              x: minOverlap.axis.x,\n              y: minOverlap.axis.y\n            };\n          } else {\n            collision.normal = {\n              x: -minOverlap.axis.x,\n              y: -minOverlap.axis.y\n            };\n          }\n\n          collision.tangent = Vector.perp(collision.normal);\n          collision.penetration = collision.penetration || {};\n          collision.penetration.x = collision.normal.x * collision.depth;\n          collision.penetration.y = collision.normal.y * collision.depth; // find support points, there is always either exactly one or two\n\n          var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n              supports = []; // find the supports from bodyB that are inside bodyA\n\n\n          if (Vertices.contains(bodyA.vertices, verticesB[0])) supports.push(verticesB[0]);\n          if (Vertices.contains(bodyA.vertices, verticesB[1])) supports.push(verticesB[1]); // find the supports from bodyA that are inside bodyB\n\n          if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n\n            if (Vertices.contains(bodyB.vertices, verticesA[0])) supports.push(verticesA[0]);\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1])) supports.push(verticesA[1]);\n          } // account for the edge case of overlapping but no vertex containment\n\n\n          if (supports.length < 1) supports = [verticesB[0]];\n          collision.supports = supports;\n          return collision;\n        };\n        /**\n         * Find the overlap between two sets of vertices.\n         * @method _overlapAxes\n         * @private\n         * @param {} verticesA\n         * @param {} verticesB\n         * @param {} axes\n         * @return result\n         */\n\n\n        SAT._overlapAxes = function (verticesA, verticesB, axes) {\n          var projectionA = Vector._temp[0],\n              projectionB = Vector._temp[1],\n              result = {\n            overlap: Number.MAX_VALUE\n          },\n              overlap,\n              axis;\n\n          for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n              result.overlap = overlap;\n              return result;\n            }\n\n            if (overlap < result.overlap) {\n              result.overlap = overlap;\n              result.axis = axis;\n              result.axisNumber = i;\n            }\n          }\n\n          return result;\n        };\n        /**\n         * Projects vertices on an axis and returns an interval.\n         * @method _projectToAxis\n         * @private\n         * @param {} projection\n         * @param {} vertices\n         * @param {} axis\n         */\n\n\n        SAT._projectToAxis = function (projection, vertices, axis) {\n          var min = Vector.dot(vertices[0], axis),\n              max = min;\n\n          for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) {\n              max = dot;\n            } else if (dot < min) {\n              min = dot;\n            }\n          }\n\n          projection.min = min;\n          projection.max = max;\n        };\n        /**\n         * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n         * @method _findSupports\n         * @private\n         * @param {} bodyA\n         * @param {} bodyB\n         * @param {} normal\n         * @return [vector]\n         */\n\n\n        SAT._findSupports = function (bodyA, bodyB, normal) {\n          var nearestDistance = Number.MAX_VALUE,\n              vertexToBody = Vector._temp[0],\n              vertices = bodyB.vertices,\n              bodyAPosition = bodyA.position,\n              distance,\n              vertex,\n              vertexA,\n              vertexB; // find closest vertex on bodyB\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n              nearestDistance = distance;\n              vertexA = vertex;\n            }\n          } // find next closest vertex using the two connected to it\n\n\n          var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n          vertex = vertices[prevIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          nearestDistance = -Vector.dot(normal, vertexToBody);\n          vertexB = vertex;\n          var nextIndex = (vertexA.index + 1) % vertices.length;\n          vertex = vertices[nextIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          distance = -Vector.dot(normal, vertexToBody);\n\n          if (distance < nearestDistance) {\n            vertexB = vertex;\n          }\n\n          return [vertexA, vertexB];\n        };\n      })();\n    }, {\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    12: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n      * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n      * The stiffness of constraints can be modified to create springs or elastic.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Constraint\n      */\n      var Constraint = {};\n      module.exports = Constraint;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Axes = _dereq_('../geometry/Axes');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        Constraint._warming = 0.4;\n        Constraint._torqueDampen = 1;\n        Constraint._minLength = 0.000001;\n        /**\n         * Creates a new constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n         * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n         * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {constraint} constraint\n         */\n\n        Constraint.create = function (options) {\n          var constraint = options; // if bodies defined but no points, use body centre\n\n          if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n            x: 0,\n            y: 0\n          };\n          if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n            x: 0,\n            y: 0\n          }; // calculate static length using initial world space points\n\n          var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n              initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n              length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n          constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n          constraint.id = constraint.id || Common.nextId();\n          constraint.label = constraint.label || 'Constraint';\n          constraint.type = 'constraint';\n          constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n          constraint.damping = constraint.damping || 0;\n          constraint.angularStiffness = constraint.angularStiffness || 0;\n          constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n          constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n          constraint.plugin = {}; // render\n\n          var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n          };\n\n          if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n          } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n          }\n\n          constraint.render = Common.extend(render, constraint.render);\n          return constraint;\n        };\n        /**\n         * Prepares for solving by constraint warming.\n         * @private\n         * @method preSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.preSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n          }\n        };\n        /**\n         * Solves all constraints in a list of collisions.\n         * @private\n         * @method solveAll\n         * @param {constraint[]} constraints\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solveAll = function (constraints, timeScale) {\n          // Solve fixed constraints first.\n          for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n                fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (fixedA || fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          } // Solve free constraints last.\n\n\n          for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (!fixedA && !fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n        };\n        /**\n         * Solves a distance constraint with Gauss-Siedel method.\n         * @private\n         * @method solve\n         * @param {constraint} constraint\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solve = function (constraint, timeScale) {\n          var bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB;\n          if (!bodyA && !bodyB) return; // update reference angle\n\n          if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n          } // update reference angle\n\n\n          if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n          }\n\n          var pointAWorld = pointA,\n              pointBWorld = pointB;\n          if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n          if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n          if (!pointAWorld || !pointBWorld) return;\n          var delta = Vector.sub(pointAWorld, pointBWorld),\n              currentLength = Vector.magnitude(delta); // prevent singularity\n\n          if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n          } // solve distance constraint with Gauss-Siedel method\n\n\n          var difference = (currentLength - constraint.length) / currentLength,\n              stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n              force = Vector.mult(delta, difference * stiffness),\n              massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n              inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n              resistanceTotal = massTotal + inertiaTotal,\n              torque,\n              share,\n              normal,\n              normalVelocity,\n              relativeVelocity;\n\n          if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n            relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n          }\n\n          if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n              bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n          }\n\n          if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n              bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n          }\n        };\n        /**\n         * Performs body updates required after solving constraints.\n         * @private\n         * @method postSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.postSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            Sleeping.set(body, false); // update geometry and reset\n\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              Vertices.translate(part.vertices, impulse);\n\n              if (j > 0) {\n                part.position.x += impulse.x;\n                part.position.y += impulse.y;\n              }\n\n              if (impulse.angle !== 0) {\n                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                Axes.rotate(part.axes, impulse.angle);\n\n                if (j > 0) {\n                  Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                }\n              }\n\n              Bounds.update(part.bounds, part.vertices, body.velocity);\n            } // dampen the cached impulse for warming next step\n\n\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n          }\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Constraint\"\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the constraint should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the constraint outline.\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the constraint outline.\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the constraint rendering type. \n         * The possible values are 'line', 'pin', 'spring'.\n         * An appropriate render type will be automatically chosen unless one is given in options.\n         *\n         * @property render.type\n         * @type string\n         * @default 'line'\n         */\n\n        /**\n         * A `Boolean` that defines if the constraint's anchor points should be rendered.\n         *\n         * @property render.anchors\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * The first possible `Body` that this constraint is attached to.\n         *\n         * @property bodyA\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The second possible `Body` that this constraint is attached to.\n         *\n         * @property bodyB\n         * @type body\n         * @default null\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n         *\n         * @property pointA\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n         *\n         * @property pointB\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n         * A value of `1` means the constraint should be very stiff.\n         * A value of `0.2` means the constraint acts like a soft spring.\n         *\n         * @property stiffness\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the damping of the constraint, \n         * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n         * Damping will only be apparent when the constraint also has a very low `stiffness`.\n         * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n         * A value of `0` means the constraint will apply no damping.\n         *\n         * @property damping\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that specifies the target resting length of the constraint. \n         * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n         *\n         * @property length\n         * @type number\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    13: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n      * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class MouseConstraint\n      */\n      var MouseConstraint = {};\n      module.exports = MouseConstraint;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Mouse = _dereq_('../core/Mouse');\n\n      var Events = _dereq_('../core/Events');\n\n      var Detector = _dereq_('../collision/Detector');\n\n      var Constraint = _dereq_('./Constraint');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        /**\n         * Creates a new mouse constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {engine} engine\n         * @param {} options\n         * @return {MouseConstraint} A new MouseConstraint\n         */\n        MouseConstraint.create = function (engine, options) {\n          var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n          if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n              mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n              mouse = Mouse.create(options.element);\n            } else {\n              mouse = Mouse.create();\n              Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n          }\n\n          var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: {\n              x: 0,\n              y: 0\n            },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n              strokeStyle: '#90EE90',\n              lineWidth: 3\n            }\n          });\n          var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            }\n          };\n          var mouseConstraint = Common.extend(defaults, options);\n          Events.on(engine, 'beforeUpdate', function () {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n\n            MouseConstraint._triggerEvents(mouseConstraint);\n          });\n          return mouseConstraint;\n        };\n        /**\n         * Updates the given mouse constraint.\n         * @private\n         * @method update\n         * @param {MouseConstraint} mouseConstraint\n         * @param {body[]} bodies\n         */\n\n\n        MouseConstraint.update = function (mouseConstraint, bodies) {\n          var mouse = mouseConstraint.mouse,\n              constraint = mouseConstraint.constraint,\n              body = mouseConstraint.body;\n\n          if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n              for (var i = 0; i < bodies.length; i++) {\n                body = bodies[i];\n\n                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                  for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Vertices.contains(part.vertices, mouse.position)) {\n                      constraint.pointA = mouse.position;\n                      constraint.bodyB = mouseConstraint.body = body;\n                      constraint.pointB = {\n                        x: mouse.position.x - body.position.x,\n                        y: mouse.position.y - body.position.y\n                      };\n                      constraint.angleB = body.angle;\n                      Sleeping.set(body, false);\n                      Events.trigger(mouseConstraint, 'startdrag', {\n                        mouse: mouse,\n                        body: body\n                      });\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              Sleeping.set(constraint.bodyB, false);\n              constraint.pointA = mouse.position;\n            }\n          } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n            if (body) Events.trigger(mouseConstraint, 'enddrag', {\n              mouse: mouse,\n              body: body\n            });\n          }\n        };\n        /**\n         * Triggers mouse constraint events.\n         * @method _triggerEvents\n         * @private\n         * @param {mouse} mouseConstraint\n         */\n\n\n        MouseConstraint._triggerEvents = function (mouseConstraint) {\n          var mouse = mouseConstraint.mouse,\n              mouseEvents = mouse.sourceEvents;\n          if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n            mouse: mouse\n          });\n          if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n            mouse: mouse\n          });\n          if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n            mouse: mouse\n          }); // reset the mouse state ready for the next step\n\n          Mouse.clearSourceEvents(mouse);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when the mouse has moved (or a touch moves) during the last step\n        *\n        * @event mousemove\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is down (or a touch has started) during the last step\n        *\n        * @event mousedown\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is up (or a touch has ended) during the last step\n        *\n        * @event mouseup\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user starts dragging a body\n        *\n        * @event startdrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user ends dragging a body\n        *\n        * @event enddrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body that has stopped being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n         *\n         * @property mouse\n         * @type mouse\n         * @default mouse\n         */\n\n        /**\n         * The `Body` that is currently being moved by the user, or `null` if no body.\n         *\n         * @property body\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The `Constraint` object that is used to move the body during interaction.\n         *\n         * @property constraint\n         * @type constraint\n         */\n\n        /**\n         * An `Object` that specifies the collision filter properties.\n         * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Detector\": 5,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vertices\": 29,\n      \"./Constraint\": 12\n    }],\n    14: [function (_dereq_, module, exports) {\n      (function (global) {\n        /**\n        * The `Matter.Common` module contains utility functions that are common to all modules.\n        *\n        * @class Common\n        */\n        var Common = {};\n        module.exports = Common;\n\n        (function () {\n          Common._nextId = 0;\n          Common._seed = 0;\n          Common._nowStartTime = +new Date();\n          /**\n           * Extends the object in the first argument using the object in the second argument.\n           * @method extend\n           * @param {} obj\n           * @param {boolean} deep\n           * @return {} obj extended\n           */\n\n          Common.extend = function (obj, deep) {\n            var argsStart, args, deepClone;\n\n            if (typeof deep === 'boolean') {\n              argsStart = 2;\n              deepClone = deep;\n            } else {\n              argsStart = 1;\n              deepClone = true;\n            }\n\n            for (var i = argsStart; i < arguments.length; i++) {\n              var source = arguments[i];\n\n              if (source) {\n                for (var prop in source) {\n                  if (deepClone && source[prop] && source[prop].constructor === Object) {\n                    if (!obj[prop] || obj[prop].constructor === Object) {\n                      obj[prop] = obj[prop] || {};\n                      Common.extend(obj[prop], deepClone, source[prop]);\n                    } else {\n                      obj[prop] = source[prop];\n                    }\n                  } else {\n                    obj[prop] = source[prop];\n                  }\n                }\n              }\n            }\n\n            return obj;\n          };\n          /**\n           * Creates a new clone of the object, if deep is true references will also be cloned.\n           * @method clone\n           * @param {} obj\n           * @param {bool} deep\n           * @return {} obj cloned\n           */\n\n\n          Common.clone = function (obj, deep) {\n            return Common.extend({}, deep, obj);\n          };\n          /**\n           * Returns the list of keys for the given object.\n           * @method keys\n           * @param {} obj\n           * @return {string[]} keys\n           */\n\n\n          Common.keys = function (obj) {\n            if (Object.keys) return Object.keys(obj); // avoid hasOwnProperty for performance\n\n            var keys = [];\n\n            for (var key in obj) {\n              keys.push(key);\n            }\n\n            return keys;\n          };\n          /**\n           * Returns the list of values for the given object.\n           * @method values\n           * @param {} obj\n           * @return {array} Array of the objects property values\n           */\n\n\n          Common.values = function (obj) {\n            var values = [];\n\n            if (Object.keys) {\n              var keys = Object.keys(obj);\n\n              for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n              }\n\n              return values;\n            } // avoid hasOwnProperty for performance\n\n\n            for (var key in obj) {\n              values.push(obj[key]);\n            }\n\n            return values;\n          };\n          /**\n           * Gets a value from `base` relative to the `path` string.\n           * @method get\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} The object at the given path\n           */\n\n\n          Common.get = function (obj, path, begin, end) {\n            path = path.split('.').slice(begin, end);\n\n            for (var i = 0; i < path.length; i += 1) {\n              obj = obj[path[i]];\n            }\n\n            return obj;\n          };\n          /**\n           * Sets a value on `base` relative to the given `path` string.\n           * @method set\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {} val The value to set\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} Pass through `val` for chaining\n           */\n\n\n          Common.set = function (obj, path, val, begin, end) {\n            var parts = path.split('.').slice(begin, end);\n            Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n            return val;\n          };\n          /**\n           * Shuffles the given array in-place.\n           * The function uses a seeded random generator.\n           * @method shuffle\n           * @param {array} array\n           * @return {array} array shuffled randomly\n           */\n\n\n          Common.shuffle = function (array) {\n            for (var i = array.length - 1; i > 0; i--) {\n              var j = Math.floor(Common.random() * (i + 1));\n              var temp = array[i];\n              array[i] = array[j];\n              array[j] = temp;\n            }\n\n            return array;\n          };\n          /**\n           * Randomly chooses a value from a list with equal probability.\n           * The function uses a seeded random generator.\n           * @method choose\n           * @param {array} choices\n           * @return {object} A random choice object from the array\n           */\n\n\n          Common.choose = function (choices) {\n            return choices[Math.floor(Common.random() * choices.length)];\n          };\n          /**\n           * Returns true if the object is a HTMLElement, otherwise false.\n           * @method isElement\n           * @param {object} obj\n           * @return {boolean} True if the object is a HTMLElement, otherwise false\n           */\n\n\n          Common.isElement = function (obj) {\n            if (typeof HTMLElement !== 'undefined') {\n              return obj instanceof HTMLElement;\n            }\n\n            return !!(obj && obj.nodeType && obj.nodeName);\n          };\n          /**\n           * Returns true if the object is an array.\n           * @method isArray\n           * @param {object} obj\n           * @return {boolean} True if the object is an array, otherwise false\n           */\n\n\n          Common.isArray = function (obj) {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n          };\n          /**\n           * Returns true if the object is a function.\n           * @method isFunction\n           * @param {object} obj\n           * @return {boolean} True if the object is a function, otherwise false\n           */\n\n\n          Common.isFunction = function (obj) {\n            return typeof obj === \"function\";\n          };\n          /**\n           * Returns true if the object is a plain object.\n           * @method isPlainObject\n           * @param {object} obj\n           * @return {boolean} True if the object is a plain object, otherwise false\n           */\n\n\n          Common.isPlainObject = function (obj) {\n            return typeof obj === 'object' && obj.constructor === Object;\n          };\n          /**\n           * Returns true if the object is a string.\n           * @method isString\n           * @param {object} obj\n           * @return {boolean} True if the object is a string, otherwise false\n           */\n\n\n          Common.isString = function (obj) {\n            return toString.call(obj) === '[object String]';\n          };\n          /**\n           * Returns the given value clamped between a minimum and maximum value.\n           * @method clamp\n           * @param {number} value\n           * @param {number} min\n           * @param {number} max\n           * @return {number} The value clamped between min and max inclusive\n           */\n\n\n          Common.clamp = function (value, min, max) {\n            if (value < min) return min;\n            if (value > max) return max;\n            return value;\n          };\n          /**\n           * Returns the sign of the given value.\n           * @method sign\n           * @param {number} value\n           * @return {number} -1 if negative, +1 if 0 or positive\n           */\n\n\n          Common.sign = function (value) {\n            return value < 0 ? -1 : 1;\n          };\n          /**\n           * Returns the current timestamp since the time origin (e.g. from page load).\n           * The result will be high-resolution including decimal places if available.\n           * @method now\n           * @return {number} the current timestamp\n           */\n\n\n          Common.now = function () {\n            if (window.performance) {\n              if (window.performance.now) {\n                return window.performance.now();\n              } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n              }\n            }\n\n            return new Date() - Common._nowStartTime;\n          };\n          /**\n           * Returns a random value between a minimum and a maximum value inclusive.\n           * The function uses a seeded random generator.\n           * @method random\n           * @param {number} min\n           * @param {number} max\n           * @return {number} A random number between min and max inclusive\n           */\n\n\n          Common.random = function (min, max) {\n            min = typeof min !== \"undefined\" ? min : 0;\n            max = typeof max !== \"undefined\" ? max : 1;\n            return min + _seededRandom() * (max - min);\n          };\n\n          var _seededRandom = function _seededRandom() {\n            // https://en.wikipedia.org/wiki/Linear_congruential_generator\n            Common._seed = (Common._seed * 9301 + 49297) % 233280;\n            return Common._seed / 233280;\n          };\n          /**\n           * Converts a CSS hex colour string into an integer.\n           * @method colorToNumber\n           * @param {string} colorString\n           * @return {number} An integer representing the CSS hex string\n           */\n\n\n          Common.colorToNumber = function (colorString) {\n            colorString = colorString.replace('#', '');\n\n            if (colorString.length == 3) {\n              colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n            }\n\n            return parseInt(colorString, 16);\n          };\n          /**\n           * The console logging level to use, where each level includes all levels above and excludes the levels below.\n           * The default level is 'debug' which shows all console messages.  \n           *\n           * Possible level values are:\n           * - 0 = None\n           * - 1 = Debug\n           * - 2 = Info\n           * - 3 = Warn\n           * - 4 = Error\n           * @property Common.logLevel\n           * @type {Number}\n           * @default 1\n           */\n\n\n          Common.logLevel = 1;\n          /**\n           * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method log\n           * @param ...objs {} The objects to log.\n           */\n\n          Common.log = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method info\n           * @param ...objs {} The objects to log.\n           */\n\n\n          Common.info = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n              console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method warn\n           * @param ...objs {} The objects to log.\n           */\n\n\n          Common.warn = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Returns the next unique sequential ID.\n           * @method nextId\n           * @return {Number} Unique sequential ID\n           */\n\n\n          Common.nextId = function () {\n            return Common._nextId++;\n          };\n          /**\n           * A cross browser compatible indexOf implementation.\n           * @method indexOf\n           * @param {array} haystack\n           * @param {object} needle\n           * @return {number} The position of needle in haystack, otherwise -1.\n           */\n\n\n          Common.indexOf = function (haystack, needle) {\n            if (haystack.indexOf) return haystack.indexOf(needle);\n\n            for (var i = 0; i < haystack.length; i++) {\n              if (haystack[i] === needle) return i;\n            }\n\n            return -1;\n          };\n          /**\n           * A cross browser compatible array map implementation.\n           * @method map\n           * @param {array} list\n           * @param {function} func\n           * @return {array} Values from list transformed by func.\n           */\n\n\n          Common.map = function (list, func) {\n            if (list.map) {\n              return list.map(func);\n            }\n\n            var mapped = [];\n\n            for (var i = 0; i < list.length; i += 1) {\n              mapped.push(func(list[i]));\n            }\n\n            return mapped;\n          };\n          /**\n           * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n           * Circular dependencies are allowed.\n           * @method topologicalSort\n           * @param {object} graph\n           * @return {array} Partially ordered set of vertices in topological order.\n           */\n\n\n          Common.topologicalSort = function (graph) {\n            // https://github.com/mgechev/javascript-algorithms\n            // Copyright (c) Minko Gechev (MIT license)\n            // Modifications: tidy formatting and naming\n            var result = [],\n                visited = [],\n                temp = [];\n\n            for (var node in graph) {\n              if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n              }\n            }\n\n            return result;\n          };\n\n          Common._topologicalSort = function (node, visited, temp, graph, result) {\n            var neighbors = graph[node] || [];\n            temp[node] = true;\n\n            for (var i = 0; i < neighbors.length; i += 1) {\n              var neighbor = neighbors[i];\n\n              if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n              }\n\n              if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n              }\n            }\n\n            temp[node] = false;\n            visited[node] = true;\n            result.push(node);\n          };\n          /**\n           * Takes _n_ functions as arguments and returns a new function that calls them in order.\n           * The arguments applied when calling the new function will also be applied to every function passed.\n           * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n           * Therefore if a passed function does not return a value, the previously returned value is maintained.\n           * After all passed functions have been called the new function returns the last returned value (if any).\n           * If any of the passed functions are a chain, then the chain will be flattened.\n           * @method chain\n           * @param ...funcs {function} The functions to chain.\n           * @return {function} A new function that calls the passed functions in order.\n           */\n\n\n          Common.chain = function () {\n            var funcs = [];\n\n            for (var i = 0; i < arguments.length; i += 1) {\n              var func = arguments[i];\n\n              if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n              } else {\n                funcs.push(func);\n              }\n            }\n\n            var chain = function chain() {\n              // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n              var lastResult,\n                  args = new Array(arguments.length);\n\n              for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n              }\n\n              for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                  lastResult = result;\n                }\n              }\n\n              return lastResult;\n            };\n\n            chain._chained = funcs;\n            return chain;\n          };\n          /**\n           * Chains a function to excute before the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathBefore\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain before the original\n           * @return {function} The chained function that replaced the original\n           */\n\n\n          Common.chainPathBefore = function (base, path, func) {\n            return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n          };\n          /**\n           * Chains a function to excute after the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathAfter\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain after the original\n           * @return {function} The chained function that replaced the original\n           */\n\n\n          Common.chainPathAfter = function (base, path, func) {\n            return Common.set(base, path, Common.chain(Common.get(base, path), func));\n          };\n          /**\n           * Used to require external libraries outside of the bundle.\n           * It first looks for the `globalName` on the environment's global namespace.\n           * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n           * @private\n           * @method _requireGlobal\n           * @param {string} globalName The global module name\n           * @param {string} moduleName The fallback CommonJS module name\n           * @return {} The loaded module\n           */\n\n\n          Common._requireGlobal = function (globalName, moduleName) {\n            var obj = typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null;\n            return obj || _dereq_(moduleName);\n          };\n        })();\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    15: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Engine` module contains methods for creating and manipulating engines.\n      * An engine is a controller that manages updating the simulation of the world.\n      * See `Matter.Runner` for an optional game loop utility.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Engine\n      */\n      var Engine = {};\n      module.exports = Engine;\n\n      var World = _dereq_('../body/World');\n\n      var Sleeping = _dereq_('./Sleeping');\n\n      var Resolver = _dereq_('../collision/Resolver');\n\n      var Render = _dereq_('../render/Render');\n\n      var Pairs = _dereq_('../collision/Pairs');\n\n      var Metrics = _dereq_('./Metrics');\n\n      var Grid = _dereq_('../collision/Grid');\n\n      var Events = _dereq_('./Events');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('./Common');\n\n      var Body = _dereq_('../body/Body');\n\n      (function () {\n        /**\n         * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {engine} engine\n         */\n        Engine.create = function (element, options) {\n          // options may be passed as the first (and only) argument\n          options = Common.isElement(element) ? options : element;\n          element = Common.isElement(element) ? element : null;\n          options = options || {};\n\n          if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n          }\n\n          var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n              timestamp: 0,\n              timeScale: 1\n            },\n            broadphase: {\n              controller: Grid\n            }\n          };\n          var engine = Common.extend(defaults, options); // @deprecated\n\n          if (element || engine.render) {\n            var renderDefaults = {\n              element: element,\n              controller: Render\n            };\n            engine.render = Common.extend(renderDefaults, engine.render);\n          } // @deprecated\n\n\n          if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n          } // @deprecated\n\n\n          if (engine.render) {\n            engine.render.engine = engine;\n          }\n\n          engine.world = options.world || World.create(engine.world);\n          engine.pairs = Pairs.create();\n          engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n          engine.metrics = engine.metrics || {\n            extended: false\n          };\n          return engine;\n        };\n        /**\n         * Moves the simulation forward in time by `delta` ms.\n         * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n         * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n         * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n         * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n         * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n         *\n         * Triggers `beforeUpdate` and `afterUpdate` events.\n         * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n         * @method update\n         * @param {engine} engine\n         * @param {number} [delta=16.666]\n         * @param {number} [correction=1]\n         */\n\n\n        Engine.update = function (engine, delta, correction) {\n          delta = delta || 1000 / 60;\n          correction = correction || 1;\n          var world = engine.world,\n              timing = engine.timing,\n              broadphase = engine.broadphase,\n              broadphasePairs = [],\n              i; // increment timestamp\n\n          timing.timestamp += delta * timing.timeScale; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(engine, 'beforeUpdate', event); // get lists of all bodies and constraints, no matter what composites they are in\n\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world); // if sleeping enabled, call the sleeping controller\n\n          if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale); // applies gravity to all bodies\n\n          Engine._bodiesApplyGravity(allBodies, world.gravity); // update all body position and rotation by integration\n\n\n          Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds); // update all constraints (first pass)\n\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // broadphase pass: find potential collision pairs\n\n          if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified) broadphase.controller.clear(broadphase); // update the grid buckets based on current bodies\n\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n          } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n          } // clear all composite modified flags\n\n\n          if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n          } // narrowphase pass: find actual collisions, then create or update collision pairs\n\n\n          var collisions = broadphase.detector(broadphasePairs, engine); // update collision pairs\n\n          var pairs = engine.pairs,\n              timestamp = timing.timestamp;\n          Pairs.update(pairs, collisions, timestamp);\n          Pairs.removeOld(pairs, timestamp); // wake up bodies involved in collisions\n\n          if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale); // trigger collision events\n\n          if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart\n          }); // iteratively resolve position between collisions\n\n          Resolver.preSolvePosition(pairs.list);\n\n          for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n          }\n\n          Resolver.postSolvePosition(allBodies); // update all constraints (second pass)\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // iteratively resolve velocity between collisions\n\n          Resolver.preSolveVelocity(pairs.list);\n\n          for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n          } // trigger collision events\n\n\n          if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive\n          });\n          if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd\n          }); // clear force buffers\n\n          Engine._bodiesClearForces(allBodies);\n\n          Events.trigger(engine, 'afterUpdate', event);\n          return engine;\n        };\n        /**\n         * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n         * @method merge\n         * @param {engine} engineA\n         * @param {engine} engineB\n         */\n\n\n        Engine.merge = function (engineA, engineB) {\n          Common.extend(engineA, engineB);\n\n          if (engineB.world) {\n            engineA.world = engineB.world;\n            Engine.clear(engineA);\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              Sleeping.set(body, false);\n              body.id = Common.nextId();\n            }\n          }\n        };\n        /**\n         * Clears the engine including the world, pairs and broadphase.\n         * @method clear\n         * @param {engine} engine\n         */\n\n\n        Engine.clear = function (engine) {\n          var world = engine.world;\n          Pairs.clear(engine.pairs);\n          var broadphase = engine.broadphase;\n\n          if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n          }\n        };\n        /**\n         * Zeroes the `body.force` and `body.torque` force buffers.\n         * @method _bodiesClearForces\n         * @private\n         * @param {body[]} bodies\n         */\n\n\n        Engine._bodiesClearForces = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset force buffers\n\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n          }\n        };\n        /**\n         * Applys a mass dependant force to all given bodies.\n         * @method _bodiesApplyGravity\n         * @private\n         * @param {body[]} bodies\n         * @param {vector} gravity\n         */\n\n\n        Engine._bodiesApplyGravity = function (bodies, gravity) {\n          var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n          if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n            return;\n          }\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue; // apply gravity\n\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n          }\n        };\n        /**\n         * Applys `Body.update` to all given `bodies`.\n         * @method _bodiesUpdate\n         * @private\n         * @param {body[]} bodies\n         * @param {number} deltaTime \n         * The amount of time elapsed between updates\n         * @param {number} timeScale\n         * @param {number} correction \n         * The Verlet correction factor (deltaTime / lastDeltaTime)\n         * @param {bounds} worldBounds\n         */\n\n\n        Engine._bodiesUpdate = function (bodies, deltaTime, timeScale, correction, worldBounds) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n            Body.update(body, deltaTime, timeScale, correction);\n          }\n        };\n        /**\n         * An alias for `Runner.run`, see `Matter.Runner` for more information.\n         * @method run\n         * @param {engine} engine\n         */\n\n        /**\n        * Fired just before an update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update and all collision events\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n        *\n        * @event collisionStart\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n        *\n        * @event collisionActive\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n        *\n        * @event collisionEnd\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` that specifies the number of position iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property positionIterations\n         * @type number\n         * @default 6\n         */\n\n        /**\n         * An integer `Number` that specifies the number of velocity iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property velocityIterations\n         * @type number\n         * @default 4\n         */\n\n        /**\n         * An integer `Number` that specifies the number of constraint iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         * The default value of `2` is usually very adequate.\n         *\n         * @property constraintIterations\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n         * Sleeping can improve stability and performance, but often at the expense of accuracy.\n         *\n         * @property enableSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * An `Object` containing properties regarding the timing systems of the engine. \n         *\n         * @property timing\n         * @type object\n         */\n\n        /**\n         * A `Number` that specifies the global scaling factor of time for all bodies.\n         * A value of `0` freezes the simulation.\n         * A value of `0.1` gives a slow-motion effect.\n         * A value of `1.2` gives a speed-up effect.\n         *\n         * @property timing.timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n         * It is incremented on every `Engine.update` by the given `delta` argument. \n         *\n         * @property timing.timestamp\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n         * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n         *\n         * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n         * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n         *\n         * @property render\n         * @type render\n         * @deprecated see Demo.js for an example of creating a renderer\n         * @default a Matter.Render instance\n         */\n\n        /**\n         * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n         *\n         * @property broadphase\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * A `World` composite object that will contain all simulated bodies and constraints.\n         *\n         * @property world\n         * @type world\n         * @default a Matter.World instance\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Grid\": 6,\n      \"../collision/Pairs\": 8,\n      \"../collision/Resolver\": 10,\n      \"../constraint/Constraint\": 12,\n      \"../render/Render\": 31,\n      \"./Common\": 14,\n      \"./Events\": 16,\n      \"./Metrics\": 18,\n      \"./Sleeping\": 22\n    }],\n    16: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Events\n      */\n      var Events = {};\n      module.exports = Events;\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        /**\n         * Subscribes a callback function to the given object's `eventName`.\n         * @method on\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.on = function (object, eventNames, callback) {\n          var names = eventNames.split(' '),\n              name;\n\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n          }\n\n          return callback;\n        };\n        /**\n         * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n         * @method off\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n\n\n        Events.off = function (object, eventNames, callback) {\n          if (!eventNames) {\n            object.events = {};\n            return;\n          } // handle Events.off(object, callback)\n\n\n          if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n          }\n\n          var names = eventNames.split(' ');\n\n          for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n              for (var j = 0; j < callbacks.length; j++) {\n                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n              }\n            }\n\n            object.events[names[i]] = newCallbacks;\n          }\n        };\n        /**\n         * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n         * @method trigger\n         * @param {} object\n         * @param {string} eventNames\n         * @param {} event\n         */\n\n\n        Events.trigger = function (object, eventNames, event) {\n          var names, name, callbacks, eventClone;\n\n          if (object.events) {\n            if (!event) event = {};\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n              name = names[i];\n              callbacks = object.events[name];\n\n              if (callbacks) {\n                eventClone = Common.clone(event, false);\n                eventClone.name = name;\n                eventClone.source = object;\n\n                for (var j = 0; j < callbacks.length; j++) {\n                  callbacks[j].apply(object, [eventClone]);\n                }\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    17: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n      *\n      * @class Matter\n      */\n      var Matter = {};\n      module.exports = Matter;\n\n      var Plugin = _dereq_('./Plugin');\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        /**\n         * The library name.\n         * @property name\n         * @readOnly\n         * @type {String}\n         */\n        Matter.name = 'matter-js';\n        /**\n         * The library version.\n         * @property version\n         * @readOnly\n         * @type {String}\n         */\n\n        Matter.version = '0.14.2';\n        /**\n         * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n         * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n         * @property uses\n         * @type {Array}\n         */\n\n        Matter.uses = [];\n        /**\n         * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n         * @property used\n         * @readOnly\n         * @type {Array}\n         */\n\n        Matter.used = [];\n        /**\n         * Installs the given plugins on the `Matter` namespace.\n         * This is a short-hand for `Plugin.use`, see it for more information.\n         * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n         * Avoid calling this function multiple times unless you intend to manually control installation order.\n         * @method use\n         * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n         */\n\n        Matter.use = function () {\n          Plugin.use(Matter, Array.prototype.slice.call(arguments));\n        };\n        /**\n         * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method before\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain before the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Matter.before = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathBefore(Matter, path, func);\n        };\n        /**\n         * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method after\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain after the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Matter.after = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathAfter(Matter, path, func);\n        };\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Plugin\": 20\n    }],\n    18: [function (_dereq_, module, exports) {}, {\n      \"../body/Composite\": 2,\n      \"./Common\": 14\n    }],\n    19: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n      *\n      * @class Mouse\n      */\n      var Mouse = {};\n      module.exports = Mouse;\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a mouse input.\n         * @method create\n         * @param {HTMLElement} element\n         * @return {mouse} A new mouse\n         */\n        Mouse.create = function (element) {\n          var mouse = {};\n\n          if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n          }\n\n          mouse.element = element || document.body;\n          mouse.absolute = {\n            x: 0,\n            y: 0\n          };\n          mouse.position = {\n            x: 0,\n            y: 0\n          };\n          mouse.mousedownPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.mouseupPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.offset = {\n            x: 0,\n            y: 0\n          };\n          mouse.scale = {\n            x: 1,\n            y: 1\n          };\n          mouse.wheelDelta = 0;\n          mouse.button = -1;\n          mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n          mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n          };\n\n          mouse.mousemove = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n          };\n\n          mouse.mousedown = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            } else {\n              mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n          };\n\n          mouse.mouseup = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n          };\n\n          mouse.mousewheel = function (event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n          };\n\n          Mouse.setElement(mouse, mouse.element);\n          return mouse;\n        };\n        /**\n         * Sets the element the mouse is bound to (and relative to).\n         * @method setElement\n         * @param {mouse} mouse\n         * @param {HTMLElement} element\n         */\n\n\n        Mouse.setElement = function (mouse, element) {\n          mouse.element = element;\n          element.addEventListener('mousemove', mouse.mousemove);\n          element.addEventListener('mousedown', mouse.mousedown);\n          element.addEventListener('mouseup', mouse.mouseup);\n          element.addEventListener('mousewheel', mouse.mousewheel);\n          element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n          element.addEventListener('touchmove', mouse.mousemove);\n          element.addEventListener('touchstart', mouse.mousedown);\n          element.addEventListener('touchend', mouse.mouseup);\n        };\n        /**\n         * Clears all captured source events.\n         * @method clearSourceEvents\n         * @param {mouse} mouse\n         */\n\n\n        Mouse.clearSourceEvents = function (mouse) {\n          mouse.sourceEvents.mousemove = null;\n          mouse.sourceEvents.mousedown = null;\n          mouse.sourceEvents.mouseup = null;\n          mouse.sourceEvents.mousewheel = null;\n          mouse.wheelDelta = 0;\n        };\n        /**\n         * Sets the mouse position offset.\n         * @method setOffset\n         * @param {mouse} mouse\n         * @param {vector} offset\n         */\n\n\n        Mouse.setOffset = function (mouse, offset) {\n          mouse.offset.x = offset.x;\n          mouse.offset.y = offset.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Sets the mouse position scale.\n         * @method setScale\n         * @param {mouse} mouse\n         * @param {vector} scale\n         */\n\n\n        Mouse.setScale = function (mouse, scale) {\n          mouse.scale.x = scale.x;\n          mouse.scale.y = scale.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Gets the mouse position relative to an element given a screen pixel ratio.\n         * @method _getRelativeMousePosition\n         * @private\n         * @param {} event\n         * @param {} element\n         * @param {number} pixelRatio\n         * @return {}\n         */\n\n\n        Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n          var elementBounds = element.getBoundingClientRect(),\n              rootNode = document.documentElement || document.body.parentNode || document.body,\n              scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n              scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n              touches = event.changedTouches,\n              x,\n              y;\n\n          if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n          } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n          }\n\n          return {\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n          };\n        };\n      })();\n    }, {\n      \"../core/Common\": 14\n    }],\n    20: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n      *\n      * @class Plugin\n      */\n      var Plugin = {};\n      module.exports = Plugin;\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        Plugin._registry = {};\n        /**\n         * Registers a plugin object so it can be resolved later by name.\n         * @method register\n         * @param plugin {} The plugin to register.\n         * @return {object} The plugin.\n         */\n\n        Plugin.register = function (plugin) {\n          if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n          }\n\n          if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n              Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n              Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n          } else {\n            Plugin._registry[plugin.name] = plugin;\n          }\n\n          return plugin;\n        };\n        /**\n         * Resolves a dependency to a plugin object from the registry if it exists. \n         * The `dependency` may contain a version, but only the name matters when resolving.\n         * @method resolve\n         * @param dependency {string} The dependency.\n         * @return {object} The plugin if resolved, otherwise `undefined`.\n         */\n\n\n        Plugin.resolve = function (dependency) {\n          return Plugin._registry[Plugin.dependencyParse(dependency).name];\n        };\n        /**\n         * Returns a pretty printed plugin name and version.\n         * @method toString\n         * @param plugin {} The plugin.\n         * @return {string} Pretty printed plugin name and version.\n         */\n\n\n        Plugin.toString = function (plugin) {\n          return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n        };\n        /**\n         * Returns `true` if the object meets the minimum standard to be considered a plugin.\n         * This means it must define the following properties:\n         * - `name`\n         * - `version`\n         * - `install`\n         * @method isPlugin\n         * @param obj {} The obj to test.\n         * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n         */\n\n\n        Plugin.isPlugin = function (obj) {\n          return obj && obj.name && obj.version && obj.install;\n        };\n        /**\n         * Returns `true` if a plugin with the given `name` been installed on `module`.\n         * @method isUsed\n         * @param module {} The module.\n         * @param name {string} The plugin name.\n         * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n         */\n\n\n        Plugin.isUsed = function (module, name) {\n          return module.used.indexOf(name) > -1;\n        };\n        /**\n         * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n         * If `plugin.for` is not specified then it is assumed to be applicable.\n         * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n         * @method isFor\n         * @param plugin {} The plugin.\n         * @param module {} The module.\n         * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n         */\n\n\n        Plugin.isFor = function (plugin, module) {\n          var parsed = plugin[\"for\"] && Plugin.dependencyParse(plugin[\"for\"]);\n          return !plugin[\"for\"] || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n        };\n        /**\n         * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n         * For installing plugins on `Matter` see the convenience function `Matter.use`.\n         * Plugins may be specified either by their name or a reference to the plugin object.\n         * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n         * Order is important, a topological sort is performed to find the best resulting order of installation.\n         * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n         * This function logs the resulting status of each dependency in the console, along with any warnings.\n         * - A green tick ✅ indicates a dependency was resolved and installed.\n         * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n         * - A red cross ❌ indicates a dependency could not be resolved.\n         * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n         * @method use\n         * @param module {} The module install plugins on.\n         * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n         */\n\n\n        Plugin.use = function (module, plugins) {\n          module.uses = (module.uses || []).concat(plugins || []);\n\n          if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n          }\n\n          var dependencies = Plugin.dependencies(module),\n              sortedDependencies = Common.topologicalSort(dependencies),\n              status = [];\n\n          for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n              continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n              status.push('❌ ' + sortedDependencies[i]);\n              continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n              continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin[\"for\"], 'but installed on', Plugin.toString(module) + '.');\n              plugin._warned = true;\n            }\n\n            if (plugin.install) {\n              plugin.install(module);\n            } else {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n              plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n              status.push('🔶 ' + Plugin.toString(plugin));\n              delete plugin._warned;\n            } else {\n              status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n          }\n\n          if (status.length > 0) {\n            Common.info(status.join('  '));\n          }\n        };\n        /**\n         * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n         * @method dependencies\n         * @param module {} The module.\n         * @return {object} A dependency graph.\n         */\n\n\n        Plugin.dependencies = function (module, tracked) {\n          var parsedBase = Plugin.dependencyParse(module),\n              name = parsedBase.name;\n          tracked = tracked || {};\n\n          if (name in tracked) {\n            return;\n          }\n\n          module = Plugin.resolve(module) || module;\n          tracked[name] = Common.map(module.uses || [], function (dependency) {\n            if (Plugin.isPlugin(dependency)) {\n              Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n              resolved._warned = true;\n              module._warned = true;\n            } else if (!resolved) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n              module._warned = true;\n            }\n\n            return parsed.name;\n          });\n\n          for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n          }\n\n          return tracked;\n        };\n        /**\n         * Parses a dependency string into its components.\n         * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * This function can also handle dependencies that are already resolved (e.g. a module object).\n         * @method dependencyParse\n         * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n         * @return {object} The dependency parsed into its components.\n         */\n\n\n        Plugin.dependencyParse = function (dependency) {\n          if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n              Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n              name: dependency.split('@')[0],\n              range: dependency.split('@')[1] || '*'\n            };\n          }\n\n          return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n          };\n        };\n        /**\n         * Parses a version string into its components.  \n         * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n         * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n         * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n         * Only the following range types are supported:\n         * - Tilde ranges e.g. `~1.2.3`\n         * - Caret ranges e.g. `^1.2.3`\n         * - Exact version e.g. `1.2.3`\n         * - Any version `*`\n         * @method versionParse\n         * @param range {string} The version string.\n         * @return {object} The version range parsed into its components.\n         */\n\n\n        Plugin.versionParse = function (range) {\n          var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n          if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n          }\n\n          var identifiers = range.split('-');\n          range = identifiers[0];\n          var isRange = isNaN(Number(range[0])),\n              version = isRange ? range.substr(1) : range,\n              parts = Common.map(version.split('.'), function (part) {\n            return Number(part);\n          });\n          return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n          };\n        };\n        /**\n         * Returns `true` if `version` satisfies the given `range`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n         * @method versionSatisfies\n         * @param version {string} The version string.\n         * @param range {string} The range string.\n         * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n         */\n\n\n        Plugin.versionSatisfies = function (version, range) {\n          range = range || '*';\n          var rangeParsed = Plugin.versionParse(range),\n              rangeParts = rangeParsed.parts,\n              versionParsed = Plugin.versionParse(version),\n              versionParts = versionParsed.parts;\n\n          if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n              return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n              return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n              if (rangeParts[0] > 0) {\n                return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n              }\n\n              if (rangeParts[1] > 0) {\n                return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n              }\n\n              return versionParts[2] === rangeParts[2];\n            }\n          }\n\n          return version === range || version === '*';\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    21: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Runner` module is an optional utility which provides a game loop, \n      * that handles continuously updating a `Matter.Engine` for you within a browser.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n      * Instead just call `Engine.update(engine, delta)` in your own loop.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Runner\n      */\n      var Runner = {};\n      module.exports = Runner;\n\n      var Events = _dereq_('./Events');\n\n      var Engine = _dereq_('./Engine');\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        if (!_requestAnimationFrame) {\n          var _frameTimeout;\n\n          _requestAnimationFrame = function _requestAnimationFrame(callback) {\n            _frameTimeout = setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = function _cancelAnimationFrame() {\n            clearTimeout(_frameTimeout);\n          };\n        }\n        /**\n         * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * @method create\n         * @param {} options\n         */\n\n\n        Runner.create = function (options) {\n          var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n          };\n          var runner = Common.extend(defaults, options);\n          runner.delta = runner.delta || 1000 / runner.fps;\n          runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n          runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n          runner.fps = 1000 / runner.delta;\n          return runner;\n        };\n        /**\n         * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n         * @method run\n         * @param {engine} engine\n         */\n\n\n        Runner.run = function (runner, engine) {\n          // create runner if engine is first argument\n          if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n          }\n\n          (function render(time) {\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n              Runner.tick(runner, engine, time);\n            }\n          })();\n\n          return runner;\n        };\n        /**\n         * A game loop utility that updates the engine and renderer by one step (a 'tick').\n         * Features delta smoothing, time correction and fixed or dynamic timing.\n         * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n         * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n         * @method tick\n         * @param {runner} runner\n         * @param {engine} engine\n         * @param {number} time\n         */\n\n\n        Runner.tick = function (runner, engine, time) {\n          var timing = engine.timing,\n              correction = 1,\n              delta; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(runner, 'beforeTick', event);\n          Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n          if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n          } else {\n            // dynamic timestep based on wall clock between calls\n            delta = time - runner.timePrev || runner.delta;\n            runner.timePrev = time; // optimistically filter delta over a few frames, to improve stability\n\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory); // limit delta\n\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta; // correction for delta\n\n            correction = delta / runner.delta; // update engine timing object\n\n            runner.delta = delta;\n          } // time correction for time scaling\n\n\n          if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n          if (timing.timeScale === 0) correction = 0;\n          runner.timeScalePrev = timing.timeScale;\n          runner.correction = correction; // fps counter\n\n          runner.frameCounter += 1;\n\n          if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n          }\n\n          Events.trigger(runner, 'tick', event);\n          Events.trigger(engine, 'tick', event); // @deprecated\n          // if world has been modified, clear the render scene graph\n\n          if (engine.world.isModified && engine.render && engine.render.controller && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n          } // update\n\n\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, delta, correction);\n          Events.trigger(runner, 'afterUpdate', event); // render\n          // @deprecated\n\n          if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n          }\n\n          Events.trigger(runner, 'afterTick', event);\n          Events.trigger(engine, 'afterTick', event); // @deprecated\n        };\n        /**\n         * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n         * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n         * @method stop\n         * @param {runner} runner\n         */\n\n\n        Runner.stop = function (runner) {\n          _cancelAnimationFrame(runner.frameRequestId);\n        };\n        /**\n         * Alias for `Runner.run`.\n         * @method start\n         * @param {runner} runner\n         * @param {engine} engine\n         */\n\n\n        Runner.start = function (runner, engine) {\n          Runner.run(runner, engine);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired at the start of a tick, before any updates to the engine or timing\n        *\n        * @event beforeTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine timing updated, but just before update\n        *\n        * @event tick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired at the end of a tick, after engine update and after rendering\n        *\n        * @event afterTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after update\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A flag that specifies whether the runner is running or not.\n         *\n         * @property enabled\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n         * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n         * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n         *\n         * @property isFixed\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that specifies the time step between updates in milliseconds.\n         * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n         * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n         *\n         * @property delta\n         * @type number\n         * @default 1000 / 60\n         */\n\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Engine\": 15,\n      \"./Events\": 16\n    }],\n    22: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n      *\n      * @class Sleeping\n      */\n      var Sleeping = {};\n      module.exports = Sleeping;\n\n      var Events = _dereq_('./Events');\n\n      (function () {\n        Sleeping._motionWakeThreshold = 0.18;\n        Sleeping._motionSleepThreshold = 0.08;\n        Sleeping._minBias = 0.9;\n        /**\n         * Puts bodies to sleep or wakes them up depending on their motion.\n         * @method update\n         * @param {body[]} bodies\n         * @param {number} timeScale\n         */\n\n        Sleeping.update = function (bodies, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // update bodies sleeping status\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed; // wake up bodies if they have a force applied\n\n            if (body.force.x !== 0 || body.force.y !== 0) {\n              Sleeping.set(body, false);\n              continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion); // biased average motion estimation between frames\n\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n              body.sleepCounter += 1;\n              if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n              body.sleepCounter -= 1;\n            }\n          }\n        };\n        /**\n         * Given a set of colliding pairs, wakes the sleeping bodies involved.\n         * @method afterCollisions\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Sleeping.afterCollisions = function (pairs, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // wake up bodies involved in collisions\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i]; // don't wake inactive pairs\n\n            if (!pair.isActive) continue;\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent; // don't wake if at least one body is static\n\n            if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n              var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n                  movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n              if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                Sleeping.set(sleepingBody, false);\n              }\n            }\n          }\n        };\n        /**\n         * Set a body as sleeping or awake.\n         * @method set\n         * @param {body} body\n         * @param {boolean} isSleeping\n         */\n\n\n        Sleeping.set = function (body, isSleeping) {\n          var wasSleeping = body.isSleeping;\n\n          if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n              Events.trigger(body, 'sleepStart');\n            }\n          } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n              Events.trigger(body, 'sleepEnd');\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Events\": 16\n    }],\n    23: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bodies` module contains factory methods for creating rigid body models \n      * with commonly used body configurations (such as rectangles, circles and other polygons).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Bodies\n      */\n      // TODO: true circle bodies\n      var Bodies = {};\n      module.exports = Bodies;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Common = _dereq_('../core/Common');\n\n      var Body = _dereq_('../body/Body');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var decomp;\n\n      (function () {\n        /**\n         * Creates a new rigid body model with a rectangle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method rectangle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {object} [options]\n         * @return {body} A new rectangle body\n         */\n        Bodies.rectangle = function (x, y, width, height, options) {\n          options = options || {};\n          var rectangle = {\n            label: 'Rectangle Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, rectangle, options));\n        };\n        /**\n         * Creates a new rigid body model with a trapezoid hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method trapezoid\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} slope\n         * @param {object} [options]\n         * @return {body} A new trapezoid body\n         */\n\n\n        Bodies.trapezoid = function (x, y, width, height, slope, options) {\n          options = options || {};\n          slope *= 0.5;\n          var roof = (1 - slope * 2) * width;\n          var x1 = width * slope,\n              x2 = x1 + roof,\n              x3 = x2 + x1,\n              verticesPath;\n\n          if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          }\n\n          var trapezoid = {\n            label: 'Trapezoid Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(verticesPath)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, trapezoid, options));\n        };\n        /**\n         * Creates a new rigid body model with a circle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method circle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} radius\n         * @param {object} [options]\n         * @param {number} [maxSides]\n         * @return {body} A new circle body\n         */\n\n\n        Bodies.circle = function (x, y, radius, options, maxSides) {\n          options = options || {};\n          var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n          }; // approximate circles with polygons until true circles implemented in SAT\n\n          maxSides = maxSides || 25;\n          var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius))); // optimisation: always use even number of sides (half the number of unique axes)\n\n          if (sides % 2 === 1) sides += 1;\n          return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n        };\n        /**\n         * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method polygon\n         * @param {number} x\n         * @param {number} y\n         * @param {number} sides\n         * @param {number} radius\n         * @param {object} [options]\n         * @return {body} A new regular polygon body\n         */\n\n\n        Bodies.polygon = function (x, y, sides, radius, options) {\n          options = options || {};\n          if (sides < 3) return Bodies.circle(x, y, radius, options);\n          var theta = 2 * Math.PI / sides,\n              path = '',\n              offset = theta * 0.5;\n\n          for (var i = 0; i < sides; i += 1) {\n            var angle = offset + i * theta,\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n          }\n\n          var polygon = {\n            label: 'Polygon Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(path)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, polygon, options));\n        };\n        /**\n         * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n         * If the vertices are convex, they will pass through as supplied.\n         * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n         * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n         * By default the decomposition will discard collinear edges (to improve performance).\n         * It can also optionally discard any parts that have an area less than `minimumArea`.\n         * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n         * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method fromVertices\n         * @param {number} x\n         * @param {number} y\n         * @param [[vector]] vertexSets\n         * @param {object} [options]\n         * @param {bool} [flagInternal=false]\n         * @param {number} [removeCollinear=0.01]\n         * @param {number} [minimumArea=10]\n         * @return {body}\n         */\n\n\n        Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n          if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n          }\n\n          var body, parts, isConvex, vertices, i, j, k, v, z;\n          options = options || {};\n          parts = [];\n          flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n          removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n          minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n          if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n          } // ensure vertexSets is an array of arrays\n\n\n          if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n          }\n\n          for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n              if (isConvex) {\n                vertices = Vertices.clockwiseSort(vertices);\n              } else {\n                // fallback to convex hull when decomposition is not possible\n                vertices = Vertices.hull(vertices);\n              }\n\n              parts.push({\n                position: {\n                  x: x,\n                  y: y\n                },\n                vertices: vertices\n              });\n            } else {\n              // initialise a decomposition\n              var concave = vertices.map(function (vertex) {\n                return [vertex.x, vertex.y];\n              }); // vertices are concave and simple, we can decompose into parts\n\n              decomp.makeCCW(concave);\n              if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear); // use the quick decomposition algorithm (Bayazit)\n\n              var decomposed = decomp.quickDecomp(concave); // for each decomposed chunk\n\n              for (i = 0; i < decomposed.length; i++) {\n                var chunk = decomposed[i]; // convert vertices into the correct structure\n\n                var chunkVertices = chunk.map(function (vertices) {\n                  return {\n                    x: vertices[0],\n                    y: vertices[1]\n                  };\n                }); // skip small chunks\n\n                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue; // create a compound part\n\n                parts.push({\n                  position: Vertices.centre(chunkVertices),\n                  vertices: chunkVertices\n                });\n              }\n            }\n          } // create body parts\n\n\n          for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n          } // flag internal edges (coincident part edges)\n\n\n          if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n              var partA = parts[i];\n\n              for (j = i + 1; j < parts.length; j++) {\n                var partB = parts[j];\n\n                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                  var pav = partA.vertices,\n                      pbv = partB.vertices; // iterate vertices of both parts\n\n                  for (k = 0; k < partA.vertices.length; k++) {\n                    for (z = 0; z < partB.vertices.length; z++) {\n                      // find distances between the vertices\n                      var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                          db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length])); // if both vertices are very close, consider the edge concident (internal)\n\n                      if (da < coincident_max_dist && db < coincident_max_dist) {\n                        pav[k].isInternal = true;\n                        pbv[z].isInternal = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({\n              parts: parts.slice(0)\n            }, options));\n            Body.setPosition(body, {\n              x: x,\n              y: y\n            });\n            return body;\n          } else {\n            return parts[0];\n          }\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    24: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composites` module contains factory methods for creating composite bodies\n      * with commonly used configurations (such as stacks and chains).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composites\n      */\n      var Composites = {};\n      module.exports = Composites;\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('../core/Common');\n\n      var Body = _dereq_('../body/Body');\n\n      var Bodies = _dereq_('./Bodies');\n\n      (function () {\n        /**\n         * Create a new composite containing bodies created in the callback in a grid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method stack\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.stack = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          var stack = Composite.create({\n            label: 'Stack'\n          }),\n              x = xx,\n              y = yy,\n              lastBody,\n              i = 0;\n\n          for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n              var body = callback(x, y, column, row, lastBody, i);\n\n              if (body) {\n                var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                    bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                Body.translate(body, {\n                  x: bodyWidth * 0.5,\n                  y: bodyHeight * 0.5\n                });\n                x = body.bounds.max.x + columnGap;\n                Composite.addBody(stack, body);\n                lastBody = body;\n                i += 1;\n              } else {\n                x += columnGap;\n              }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n          }\n\n          return stack;\n        };\n        /**\n         * Chains all bodies in the given composite together using constraints.\n         * @method chain\n         * @param {composite} composite\n         * @param {number} xOffsetA\n         * @param {number} yOffsetA\n         * @param {number} xOffsetB\n         * @param {number} yOffsetB\n         * @param {object} options\n         * @return {composite} A new composite containing objects chained together with constraints\n         */\n\n\n        Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n          var bodies = composite.bodies;\n\n          for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n            var defaults = {\n              bodyA: bodyA,\n              pointA: {\n                x: bodyAWidth * xOffsetA,\n                y: bodyAHeight * yOffsetA\n              },\n              bodyB: bodyB,\n              pointB: {\n                x: bodyBWidth * xOffsetB,\n                y: bodyBHeight * yOffsetB\n              }\n            };\n            var constraint = Common.extend(defaults, options);\n            Composite.addConstraint(composite, Constraint.create(constraint));\n          }\n\n          composite.label += ' Chain';\n          return composite;\n        };\n        /**\n         * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n         * @method mesh\n         * @param {composite} composite\n         * @param {number} columns\n         * @param {number} rows\n         * @param {boolean} crossBrace\n         * @param {object} options\n         * @return {composite} The composite containing objects meshed together with constraints\n         */\n\n\n        Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n          var bodies = composite.bodies,\n              row,\n              col,\n              bodyA,\n              bodyB,\n              bodyC;\n\n          for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n              bodyA = bodies[col - 1 + row * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n            }\n\n            if (row > 0) {\n              for (col = 0; col < columns; col++) {\n                bodyA = bodies[col + (row - 1) * columns];\n                bodyB = bodies[col + row * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyA,\n                  bodyB: bodyB\n                }, options)));\n\n                if (crossBrace && col > 0) {\n                  bodyC = bodies[col - 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n\n                if (crossBrace && col < columns - 1) {\n                  bodyC = bodies[col + 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n              }\n            }\n          }\n\n          composite.label += ' Mesh';\n          return composite;\n        };\n        /**\n         * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method pyramid\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n\n\n        Composites.pyramid = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            if (row > actualRows) return; // reverse row order\n\n            row = actualRows - row;\n            var start = row,\n                end = columns - 1 - row;\n            if (column < start || column > end) return; // retroactively fix the first body's position, since width was unknown\n\n            if (i === 1) {\n              Body.translate(lastBody, {\n                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                y: 0\n              });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n          });\n        };\n        /**\n         * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n         * @method newtonsCradle\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} number\n         * @param {number} size\n         * @param {number} length\n         * @return {composite} A new composite newtonsCradle body\n         */\n\n\n        Composites.newtonsCradle = function (xx, yy, number, size, length) {\n          var newtonsCradle = Composite.create({\n            label: 'Newtons Cradle'\n          });\n\n          for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n                constraint = Constraint.create({\n              pointA: {\n                x: xx + i * (size * separation),\n                y: yy\n              },\n              bodyB: circle\n            });\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n          }\n\n          return newtonsCradle;\n        };\n        /**\n         * Creates a composite with simple car setup of bodies and constraints.\n         * @method car\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} width\n         * @param {number} height\n         * @param {number} wheelSize\n         * @return {composite} A new composite car body\n         */\n\n\n        Composites.car = function (xx, yy, width, height, wheelSize) {\n          var group = Body.nextGroup(true),\n              wheelBase = 20,\n              wheelAOffset = -width * 0.5 + wheelBase,\n              wheelBOffset = width * 0.5 - wheelBase,\n              wheelYOffset = 0;\n          var car = Composite.create({\n            label: 'Car'\n          }),\n              body = Bodies.rectangle(xx, yy, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n          var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var axelA = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelAOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n          });\n          var axelB = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelBOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n          });\n          Composite.addBody(car, body);\n          Composite.addBody(car, wheelA);\n          Composite.addBody(car, wheelB);\n          Composite.addConstraint(car, axelA);\n          Composite.addConstraint(car, axelB);\n          return car;\n        };\n        /**\n         * Creates a simple soft body like object.\n         * @method softBody\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {boolean} crossBrace\n         * @param {number} particleRadius\n         * @param {} particleOptions\n         * @param {} constraintOptions\n         * @return {composite} A new composite softBody\n         */\n\n\n        Composites.softBody = function (xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n          particleOptions = Common.extend({\n            inertia: Infinity\n          }, particleOptions);\n          constraintOptions = Common.extend({\n            stiffness: 0.2,\n            render: {\n              type: 'line',\n              anchors: false\n            }\n          }, constraintOptions);\n          var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n          });\n          Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n          softBody.label = 'Soft Body';\n          return softBody;\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Bodies\": 23\n    }],\n    25: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n      *\n      * @class Axes\n      */\n      var Axes = {};\n      module.exports = Axes;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new set of axes from the given vertices.\n         * @method fromVertices\n         * @param {vertices} vertices\n         * @return {axes} A new axes from the given vertices\n         */\n        Axes.fromVertices = function (vertices) {\n          var axes = {}; // find the unique axes, using edge normal gradients\n\n          for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n                gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n          }\n\n          return Common.values(axes);\n        };\n        /**\n         * Rotates a set of axes by the given angle.\n         * @method rotate\n         * @param {axes} axes\n         * @param {number} angle\n         */\n\n\n        Axes.rotate = function (axes, angle) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    26: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n      *\n      * @class Bounds\n      */\n      var Bounds = {};\n      module.exports = Bounds;\n\n      (function () {\n        /**\n         * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n         * @method create\n         * @param {vertices} vertices\n         * @return {bounds} A new bounds object\n         */\n        Bounds.create = function (vertices) {\n          var bounds = {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: 0,\n              y: 0\n            }\n          };\n          if (vertices) Bounds.update(bounds, vertices);\n          return bounds;\n        };\n        /**\n         * Updates bounds using the given vertices and extends the bounds given a velocity.\n         * @method update\n         * @param {bounds} bounds\n         * @param {vertices} vertices\n         * @param {vector} velocity\n         */\n\n\n        Bounds.update = function (bounds, vertices, velocity) {\n          bounds.min.x = Infinity;\n          bounds.max.x = -Infinity;\n          bounds.min.y = Infinity;\n          bounds.max.y = -Infinity;\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n          }\n\n          if (velocity) {\n            if (velocity.x > 0) {\n              bounds.max.x += velocity.x;\n            } else {\n              bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n              bounds.max.y += velocity.y;\n            } else {\n              bounds.min.y += velocity.y;\n            }\n          }\n        };\n        /**\n         * Returns true if the bounds contains the given point.\n         * @method contains\n         * @param {bounds} bounds\n         * @param {vector} point\n         * @return {boolean} True if the bounds contain the point, otherwise false\n         */\n\n\n        Bounds.contains = function (bounds, point) {\n          return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n        };\n        /**\n         * Returns true if the two bounds intersect.\n         * @method overlaps\n         * @param {bounds} boundsA\n         * @param {bounds} boundsB\n         * @return {boolean} True if the bounds overlap, otherwise false\n         */\n\n\n        Bounds.overlaps = function (boundsA, boundsB) {\n          return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n        };\n        /**\n         * Translates the bounds by the given vector.\n         * @method translate\n         * @param {bounds} bounds\n         * @param {vector} vector\n         */\n\n\n        Bounds.translate = function (bounds, vector) {\n          bounds.min.x += vector.x;\n          bounds.max.x += vector.x;\n          bounds.min.y += vector.y;\n          bounds.max.y += vector.y;\n        };\n        /**\n         * Shifts the bounds to the given position.\n         * @method shift\n         * @param {bounds} bounds\n         * @param {vector} position\n         */\n\n\n        Bounds.shift = function (bounds, position) {\n          var deltaX = bounds.max.x - bounds.min.x,\n              deltaY = bounds.max.y - bounds.min.y;\n          bounds.min.x = position.x;\n          bounds.max.x = position.x + deltaX;\n          bounds.min.y = position.y;\n          bounds.max.y = position.y + deltaY;\n        };\n      })();\n    }, {}],\n    27: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n      *\n      * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Svg\n      */\n      var Svg = {};\n      module.exports = Svg;\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Converts an SVG path into an array of vector points.\n         * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n         * See `Bodies.fromVertices` which provides support for this.\n         * Note that this function is not guaranteed to support complex paths (such as those with holes).\n         * You must load the `pathseg.js` polyfill on newer browsers.\n         * @method pathToVertices\n         * @param {SVGPathElement} path\n         * @param {Number} [sampleLength=15]\n         * @return {Vector[]} points\n         */\n        Svg.pathToVertices = function (path, sampleLength) {\n          if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n          } // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n\n\n          var i,\n              il,\n              total,\n              point,\n              segment,\n              segments,\n              segmentsQueue,\n              lastSegment,\n              lastPoint,\n              segmentIndex,\n              points = [],\n              lx,\n              ly,\n              length = 0,\n              x = 0,\n              y = 0;\n          sampleLength = sampleLength || 15;\n\n          var addPoint = function addPoint(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1; // when the last point doesn't equal the current point add the current point\n\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n              if (lastPoint && isRelative) {\n                lx = lastPoint.x;\n                ly = lastPoint.y;\n              } else {\n                lx = 0;\n                ly = 0;\n              }\n\n              var point = {\n                x: lx + px,\n                y: ly + py\n              }; // set last point\n\n              if (isRelative || !lastPoint) {\n                lastPoint = point;\n              }\n\n              points.push(point);\n              x = lx + px;\n              y = ly + py;\n            }\n          };\n\n          var addSegmentPoint = function addSegmentPoint(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase(); // skip path ends\n\n            if (segType === 'Z') return; // map segment to x and y\n\n            switch (segType) {\n              case 'M':\n              case 'L':\n              case 'T':\n              case 'C':\n              case 'S':\n              case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n\n              case 'H':\n                x = segment.x;\n                break;\n\n              case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n          }; // ensure path is absolute\n\n\n          Svg._svgPathToAbsolute(path); // get total length\n\n\n          total = path.getTotalLength(); // queue segments\n\n          segments = [];\n\n          for (i = 0; i < path.pathSegList.numberOfItems; i += 1) {\n            segments.push(path.pathSegList.getItem(i));\n          }\n\n          segmentsQueue = segments.concat(); // sample through path\n\n          while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex]; // new segment\n\n            if (segment != lastSegment) {\n              while (segmentsQueue.length && segmentsQueue[0] != segment) {\n                addSegmentPoint(segmentsQueue.shift());\n              }\n\n              lastSegment = segment;\n            } // add points in between when curving\n            // TODO: adaptive sampling\n\n\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n              case 'C':\n              case 'T':\n              case 'S':\n              case 'Q':\n              case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n            } // increment by sample value\n\n\n            length += sampleLength;\n          } // add remaining segments not passed by sampling\n\n\n          for (i = 0, il = segmentsQueue.length; i < il; ++i) {\n            addSegmentPoint(segmentsQueue[i]);\n          }\n\n          return points;\n        };\n\n        Svg._svgPathToAbsolute = function (path) {\n          // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n          // Copyright (c) Gavin Kistner\n          // http://phrogz.net/js/_ReuseLicense.txt\n          // Modifications: tidy formatting and naming\n          var x0,\n              y0,\n              x1,\n              y1,\n              x2,\n              y2,\n              segs = path.pathSegList,\n              x = 0,\n              y = 0,\n              len = segs.numberOfItems;\n\n          for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n              if ('x' in seg) x = seg.x;\n              if ('y' in seg) y = seg.y;\n            } else {\n              if ('x1' in seg) x1 = x + seg.x1;\n              if ('x2' in seg) x2 = x + seg.x2;\n              if ('y1' in seg) y1 = y + seg.y1;\n              if ('y2' in seg) y2 = y + seg.y2;\n              if ('x' in seg) x += seg.x;\n              if ('y' in seg) y += seg.y;\n\n              switch (segType) {\n                case 'm':\n                  segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                  break;\n\n                case 'l':\n                  segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                  break;\n\n                case 'h':\n                  segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                  break;\n\n                case 'v':\n                  segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                  break;\n\n                case 'c':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                  break;\n\n                case 's':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                  break;\n\n                case 'q':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                  break;\n\n                case 't':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                  break;\n\n                case 'a':\n                  segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                  break;\n\n                case 'z':\n                case 'Z':\n                  x = x0;\n                  y = y0;\n                  break;\n              }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n              x0 = x;\n              y0 = y;\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26\n    }],\n    28: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n      * Vectors are the basis of all the geometry related operations in the engine.\n      * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vector\n      */\n      // TODO: consider params for reusing vector objects\n      var Vector = {};\n      module.exports = Vector;\n\n      (function () {\n        /**\n         * Creates a new vector.\n         * @method create\n         * @param {number} x\n         * @param {number} y\n         * @return {vector} A new vector\n         */\n        Vector.create = function (x, y) {\n          return {\n            x: x || 0,\n            y: y || 0\n          };\n        };\n        /**\n         * Returns a new vector with `x` and `y` copied from the given `vector`.\n         * @method clone\n         * @param {vector} vector\n         * @return {vector} A new cloned vector\n         */\n\n\n        Vector.clone = function (vector) {\n          return {\n            x: vector.x,\n            y: vector.y\n          };\n        };\n        /**\n         * Returns the magnitude (length) of a vector.\n         * @method magnitude\n         * @param {vector} vector\n         * @return {number} The magnitude of the vector\n         */\n\n\n        Vector.magnitude = function (vector) {\n          return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        };\n        /**\n         * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n         * @method magnitudeSquared\n         * @param {vector} vector\n         * @return {number} The squared magnitude of the vector\n         */\n\n\n        Vector.magnitudeSquared = function (vector) {\n          return vector.x * vector.x + vector.y * vector.y;\n        };\n        /**\n         * Rotates the vector about (0, 0) by specified angle.\n         * @method rotate\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} [output]\n         * @return {vector} The vector rotated about (0, 0)\n         */\n\n\n        Vector.rotate = function (vector, angle, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = vector.x * cos - vector.y * sin;\n          output.y = vector.x * sin + vector.y * cos;\n          output.x = x;\n          return output;\n        };\n        /**\n         * Rotates the vector about a specified point by specified angle.\n         * @method rotateAbout\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} point\n         * @param {vector} [output]\n         * @return {vector} A new vector rotated about the point\n         */\n\n\n        Vector.rotateAbout = function (vector, angle, point, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n          output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n          output.x = x;\n          return output;\n        };\n        /**\n         * Normalises a vector (such that its magnitude is `1`).\n         * @method normalise\n         * @param {vector} vector\n         * @return {vector} A new vector normalised\n         */\n\n\n        Vector.normalise = function (vector) {\n          var magnitude = Vector.magnitude(vector);\n          if (magnitude === 0) return {\n            x: 0,\n            y: 0\n          };\n          return {\n            x: vector.x / magnitude,\n            y: vector.y / magnitude\n          };\n        };\n        /**\n         * Returns the dot-product of two vectors.\n         * @method dot\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The dot product of the two vectors\n         */\n\n\n        Vector.dot = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n        };\n        /**\n         * Returns the cross-product of two vectors.\n         * @method cross\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The cross product of the two vectors\n         */\n\n\n        Vector.cross = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n        };\n        /**\n         * Returns the cross-product of three vectors.\n         * @method cross3\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} vectorC\n         * @return {number} The cross product of the three vectors\n         */\n\n\n        Vector.cross3 = function (vectorA, vectorB, vectorC) {\n          return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n        };\n        /**\n         * Adds the two vectors.\n         * @method add\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB added\n         */\n\n\n        Vector.add = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x + vectorB.x;\n          output.y = vectorA.y + vectorB.y;\n          return output;\n        };\n        /**\n         * Subtracts the two vectors.\n         * @method sub\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB subtracted\n         */\n\n\n        Vector.sub = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x - vectorB.x;\n          output.y = vectorA.y - vectorB.y;\n          return output;\n        };\n        /**\n         * Multiplies a vector and a scalar.\n         * @method mult\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector multiplied by scalar\n         */\n\n\n        Vector.mult = function (vector, scalar) {\n          return {\n            x: vector.x * scalar,\n            y: vector.y * scalar\n          };\n        };\n        /**\n         * Divides a vector and a scalar.\n         * @method div\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector divided by scalar\n         */\n\n\n        Vector.div = function (vector, scalar) {\n          return {\n            x: vector.x / scalar,\n            y: vector.y / scalar\n          };\n        };\n        /**\n         * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n         * @method perp\n         * @param {vector} vector\n         * @param {bool} [negate=false]\n         * @return {vector} The perpendicular vector\n         */\n\n\n        Vector.perp = function (vector, negate) {\n          negate = negate === true ? -1 : 1;\n          return {\n            x: negate * -vector.y,\n            y: negate * vector.x\n          };\n        };\n        /**\n         * Negates both components of a vector such that it points in the opposite direction.\n         * @method neg\n         * @param {vector} vector\n         * @return {vector} The negated vector\n         */\n\n\n        Vector.neg = function (vector) {\n          return {\n            x: -vector.x,\n            y: -vector.y\n          };\n        };\n        /**\n         * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n         * @method angle\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The angle in radians\n         */\n\n\n        Vector.angle = function (vectorA, vectorB) {\n          return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n        };\n        /**\n         * Temporary vector pool (not thread-safe).\n         * @property _temp\n         * @type {vector[]}\n         * @private\n         */\n\n\n        Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n      })();\n    }, {}],\n    29: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n      * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n      * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vertices\n      */\n      var Vertices = {};\n      module.exports = Vertices;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new set of `Matter.Body` compatible vertices.\n         * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n         * but with some additional references required for efficient collision detection routines.\n         *\n         * Vertices must be specified in clockwise order.\n         *\n         * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n         *\n         * @method create\n         * @param {vector[]} points\n         * @param {body} body\n         */\n        Vertices.create = function (points, body) {\n          var vertices = [];\n\n          for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n            vertices.push(vertex);\n          }\n\n          return vertices;\n        };\n        /**\n         * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n         * into a `Matter.Vertices` object for the given `Matter.Body`.\n         * For parsing SVG paths, see `Svg.pathToVertices`.\n         * @method fromPath\n         * @param {string} path\n         * @param {body} body\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.fromPath = function (path, body) {\n          var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n              points = [];\n          path.replace(pathPattern, function (match, x, y) {\n            points.push({\n              x: parseFloat(x),\n              y: parseFloat(y)\n            });\n          });\n          return Vertices.create(points, body);\n        };\n        /**\n         * Returns the centre (centroid) of the set of vertices.\n         * @method centre\n         * @param {vertices} vertices\n         * @return {vector} The centre point\n         */\n\n\n        Vertices.centre = function (vertices) {\n          var area = Vertices.area(vertices, true),\n              centre = {\n            x: 0,\n            y: 0\n          },\n              cross,\n              temp,\n              j;\n\n          for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n          }\n\n          return Vector.div(centre, 6 * area);\n        };\n        /**\n         * Returns the average (mean) of the set of vertices.\n         * @method mean\n         * @param {vertices} vertices\n         * @return {vector} The average point\n         */\n\n\n        Vertices.mean = function (vertices) {\n          var average = {\n            x: 0,\n            y: 0\n          };\n\n          for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n          }\n\n          return Vector.div(average, vertices.length);\n        };\n        /**\n         * Returns the area of the set of vertices.\n         * @method area\n         * @param {vertices} vertices\n         * @param {bool} signed\n         * @return {number} The area\n         */\n\n\n        Vertices.area = function (vertices, signed) {\n          var area = 0,\n              j = vertices.length - 1;\n\n          for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n          }\n\n          if (signed) return area / 2;\n          return Math.abs(area) / 2;\n        };\n        /**\n         * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n         * @method inertia\n         * @param {vertices} vertices\n         * @param {number} mass\n         * @return {number} The polygon's moment of inertia\n         */\n\n\n        Vertices.inertia = function (vertices, mass) {\n          var numerator = 0,\n              denominator = 0,\n              v = vertices,\n              cross,\n              j; // find the polygon's moment of inertia, using second moment of area\n          // from equations at http://www.physicsforums.com/showthread.php?t=25293\n\n          for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n          }\n\n          return mass / 6 * (numerator / denominator);\n        };\n        /**\n         * Translates the set of vertices in-place.\n         * @method translate\n         * @param {vertices} vertices\n         * @param {vector} vector\n         * @param {number} scalar\n         */\n\n\n        Vertices.translate = function (vertices, vector, scalar) {\n          var i;\n\n          if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x * scalar;\n              vertices[i].y += vector.y * scalar;\n            }\n          } else {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x;\n              vertices[i].y += vector.y;\n            }\n          }\n\n          return vertices;\n        };\n        /**\n         * Rotates the set of vertices in-place.\n         * @method rotate\n         * @param {vertices} vertices\n         * @param {number} angle\n         * @param {vector} point\n         */\n\n\n        Vertices.rotate = function (vertices, angle, point) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n          }\n\n          return vertices;\n        };\n        /**\n         * Returns `true` if the `point` is inside the set of `vertices`.\n         * @method contains\n         * @param {vertices} vertices\n         * @param {vector} point\n         * @return {boolean} True if the vertices contains point, otherwise false\n         */\n\n\n        Vertices.contains = function (vertices, point) {\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n        /**\n         * Scales the vertices from a point (default is centre) in-place.\n         * @method scale\n         * @param {vertices} vertices\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         */\n\n\n        Vertices.scale = function (vertices, scaleX, scaleY, point) {\n          if (scaleX === 1 && scaleY === 1) return vertices;\n          point = point || Vertices.centre(vertices);\n          var vertex, delta;\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n         * The radius parameter is a single number or an array to specify the radius for each vertex.\n         * @method chamfer\n         * @param {vertices} vertices\n         * @param {number[]} radius\n         * @param {number} quality\n         * @param {number} qualityMin\n         * @param {number} qualityMax\n         */\n\n\n        Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n          if (typeof radius === 'number') {\n            radius = [radius];\n          } else {\n            radius = radius || [8];\n          } // quality defaults to -1, which is auto\n\n\n          quality = typeof quality !== 'undefined' ? quality : -1;\n          qualityMin = qualityMin || 2;\n          qualityMax = qualityMax || 14;\n          var newVertices = [];\n\n          for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n              newVertices.push(vertex);\n              continue;\n            }\n\n            var prevNormal = Vector.normalise({\n              x: vertex.y - prevVertex.y,\n              y: prevVertex.x - vertex.x\n            });\n            var nextNormal = Vector.normalise({\n              x: nextVertex.y - vertex.y,\n              y: vertex.x - nextVertex.x\n            });\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n            var precision = quality;\n\n            if (quality === -1) {\n              // automatically decide precision\n              precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax); // use an even value for precision, more likely to reduce axes by using symmetry\n\n            if (precision % 2 === 1) precision += 1;\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n              newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n          }\n\n          return newVertices;\n        };\n        /**\n         * Sorts the input vertices into clockwise order in place.\n         * @method clockwiseSort\n         * @param {vertices} vertices\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.clockwiseSort = function (vertices) {\n          var centre = Vertices.mean(vertices);\n          vertices.sort(function (vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n          });\n          return vertices;\n        };\n        /**\n         * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n         * @method isConvex\n         * @param {vertices} vertices\n         * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n         */\n\n\n        Vertices.isConvex = function (vertices) {\n          // http://paulbourke.net/geometry/polygonmesh/\n          // Copyright (c) Paul Bourke (use permitted)\n          var flag = 0,\n              n = vertices.length,\n              i,\n              j,\n              k,\n              z;\n          if (n < 3) return null;\n\n          for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n              flag |= 1;\n            } else if (z > 0) {\n              flag |= 2;\n            }\n\n            if (flag === 3) {\n              return false;\n            }\n          }\n\n          if (flag !== 0) {\n            return true;\n          } else {\n            return null;\n          }\n        };\n        /**\n         * Returns the convex hull of the input vertices as a new array of points.\n         * @method hull\n         * @param {vertices} vertices\n         * @return [vertex] vertices\n         */\n\n\n        Vertices.hull = function (vertices) {\n          // http://geomalgorithms.com/a10-_hull-1.html\n          var upper = [],\n              lower = [],\n              vertex,\n              i; // sort vertices on x-axis (y-axis for ties)\n\n          vertices = vertices.slice(0);\n          vertices.sort(function (vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n          }); // build lower hull\n\n          for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n              lower.pop();\n            }\n\n            lower.push(vertex);\n          } // build upper hull\n\n\n          for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n              upper.pop();\n            }\n\n            upper.push(vertex);\n          } // concatenation of the lower and upper hulls gives the convex hull\n          // omit last points because they are repeated at the beginning of the other list\n\n\n          upper.pop();\n          lower.pop();\n          return upper.concat(lower);\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    30: [function (_dereq_, module, exports) {\n      var Matter = module.exports = _dereq_('../core/Matter');\n\n      Matter.Body = _dereq_('../body/Body');\n      Matter.Composite = _dereq_('../body/Composite');\n      Matter.World = _dereq_('../body/World');\n      Matter.Contact = _dereq_('../collision/Contact');\n      Matter.Detector = _dereq_('../collision/Detector');\n      Matter.Grid = _dereq_('../collision/Grid');\n      Matter.Pairs = _dereq_('../collision/Pairs');\n      Matter.Pair = _dereq_('../collision/Pair');\n      Matter.Query = _dereq_('../collision/Query');\n      Matter.Resolver = _dereq_('../collision/Resolver');\n      Matter.SAT = _dereq_('../collision/SAT');\n      Matter.Constraint = _dereq_('../constraint/Constraint');\n      Matter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n      Matter.Common = _dereq_('../core/Common');\n      Matter.Engine = _dereq_('../core/Engine');\n      Matter.Events = _dereq_('../core/Events');\n      Matter.Mouse = _dereq_('../core/Mouse');\n      Matter.Runner = _dereq_('../core/Runner');\n      Matter.Sleeping = _dereq_('../core/Sleeping');\n      Matter.Plugin = _dereq_('../core/Plugin');\n      Matter.Bodies = _dereq_('../factory/Bodies');\n      Matter.Composites = _dereq_('../factory/Composites');\n      Matter.Axes = _dereq_('../geometry/Axes');\n      Matter.Bounds = _dereq_('../geometry/Bounds');\n      Matter.Svg = _dereq_('../geometry/Svg');\n      Matter.Vector = _dereq_('../geometry/Vector');\n      Matter.Vertices = _dereq_('../geometry/Vertices');\n      Matter.Render = _dereq_('../render/Render');\n      Matter.RenderPixi = _dereq_('../render/RenderPixi'); // aliases\n\n      Matter.World.add = Matter.Composite.add;\n      Matter.World.remove = Matter.Composite.remove;\n      Matter.World.addComposite = Matter.Composite.addComposite;\n      Matter.World.addBody = Matter.Composite.addBody;\n      Matter.World.addConstraint = Matter.Composite.addConstraint;\n      Matter.World.clear = Matter.Composite.clear;\n      Matter.Engine.run = Matter.Runner.run;\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Contact\": 4,\n      \"../collision/Detector\": 5,\n      \"../collision/Grid\": 6,\n      \"../collision/Pair\": 7,\n      \"../collision/Pairs\": 8,\n      \"../collision/Query\": 9,\n      \"../collision/Resolver\": 10,\n      \"../collision/SAT\": 11,\n      \"../constraint/Constraint\": 12,\n      \"../constraint/MouseConstraint\": 13,\n      \"../core/Common\": 14,\n      \"../core/Engine\": 15,\n      \"../core/Events\": 16,\n      \"../core/Matter\": 17,\n      \"../core/Metrics\": 18,\n      \"../core/Mouse\": 19,\n      \"../core/Plugin\": 20,\n      \"../core/Runner\": 21,\n      \"../core/Sleeping\": 22,\n      \"../factory/Bodies\": 23,\n      \"../factory/Composites\": 24,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Svg\": 27,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31,\n      \"../render/RenderPixi\": 32\n    }],\n    31: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n      *\n      * @class Render\n      */\n      var Render = {};\n      module.exports = Render;\n\n      var Common = _dereq_('../core/Common');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Events = _dereq_('../core/Events');\n\n      var Grid = _dereq_('../collision/Grid');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Mouse = _dereq_('../core/Mouse');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {render} A new renderer\n         */\n\n\n        Render.create = function (options) {\n          var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n              width: 800,\n              height: 600,\n              pixelRatio: 1,\n              background: '#18181d',\n              wireframeBackground: '#0f0f13',\n              hasBounds: !!options.bounds,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showSeparations: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false,\n              showVertexNumbers: false,\n              showConvexHulls: false,\n              showInternalEdges: false,\n              showMousePosition: false\n            }\n          };\n          var render = Common.extend(defaults, options);\n\n          if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n          }\n\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n          render.context = render.canvas.getContext('2d');\n          render.textures = {};\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.canvas.width,\n              y: render.canvas.height\n            }\n          };\n\n          if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n          }\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n          }\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         */\n\n\n        Render.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         */\n\n\n        Render.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Sets the pixel ratio of the renderer and updates the canvas.\n         * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n         * @method setPixelRatio\n         * @param {render} render\n         * @param {number} pixelRatio\n         */\n\n\n        Render.setPixelRatio = function (render, pixelRatio) {\n          var options = render.options,\n              canvas = render.canvas;\n\n          if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n          }\n\n          options.pixelRatio = pixelRatio;\n          canvas.setAttribute('data-pixel-ratio', pixelRatio);\n          canvas.width = options.width * pixelRatio;\n          canvas.height = options.height * pixelRatio;\n          canvas.style.width = options.width + 'px';\n          canvas.style.height = options.height + 'px';\n          render.context.scale(pixelRatio, pixelRatio);\n        };\n        /**\n         * Positions and sizes the viewport around the given object bounds.\n         * Objects must have at least one of the following properties:\n         * - `object.bounds`\n         * - `object.position`\n         * - `object.min` and `object.max`\n         * - `object.x` and `object.y`\n         * @method lookAt\n         * @param {render} render\n         * @param {object[]} objects\n         * @param {vector} [padding]\n         * @param {bool} [center=true]\n         */\n\n\n        Render.lookAt = function (render, objects, padding, center) {\n          center = typeof center !== 'undefined' ? center : true;\n          objects = Common.isArray(objects) ? objects : [objects];\n          padding = padding || {\n            x: 0,\n            y: 0\n          }; // find bounds of all objects\n\n          var bounds = {\n            min: {\n              x: Infinity,\n              y: Infinity\n            },\n            max: {\n              x: -Infinity,\n              y: -Infinity\n            }\n          };\n\n          for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : object.min || object.position || object,\n                max = object.bounds ? object.bounds.max : object.max || object.position || object;\n\n            if (min && max) {\n              if (min.x < bounds.min.x) bounds.min.x = min.x;\n              if (max.x > bounds.max.x) bounds.max.x = max.x;\n              if (min.y < bounds.min.y) bounds.min.y = min.y;\n              if (max.y > bounds.max.y) bounds.max.y = max.y;\n            }\n          } // find ratios\n\n\n          var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n              height = bounds.max.y - bounds.min.y + 2 * padding.y,\n              viewHeight = render.canvas.height,\n              viewWidth = render.canvas.width,\n              outerRatio = viewWidth / viewHeight,\n              innerRatio = width / height,\n              scaleX = 1,\n              scaleY = 1; // find scale factor\n\n          if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n          } else {\n            scaleX = outerRatio / innerRatio;\n          } // enable bounds\n\n\n          render.options.hasBounds = true; // position and size\n\n          render.bounds.min.x = bounds.min.x;\n          render.bounds.max.x = bounds.min.x + width * scaleX;\n          render.bounds.min.y = bounds.min.y;\n          render.bounds.max.y = bounds.min.y + height * scaleY; // center\n\n          if (center) {\n            render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n            render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n          } // padding\n\n\n          render.bounds.min.x -= padding.x;\n          render.bounds.max.x -= padding.x;\n          render.bounds.min.y -= padding.y;\n          render.bounds.max.y -= padding.y; // update mouse\n\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        };\n        /**\n         * Applies viewport transforms based on `render.bounds` to a render context.\n         * @method startViewTransform\n         * @param {render} render\n         */\n\n\n        Render.startViewTransform = function (render) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n          render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n          render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        };\n        /**\n         * Resets all transforms on the render context.\n         * @method endViewTransform\n         * @param {render} render\n         */\n\n\n        Render.endViewTransform = function (render) {\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n        };\n        /**\n         * Renders the given `engine`'s `Matter.World` object.\n         * This is the entry point for all rendering and should be called every time the scene changes.\n         * @method world\n         * @param {render} render\n         */\n\n\n        Render.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              canvas = render.canvas,\n              context = render.context,\n              options = render.options,\n              allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              background = options.wireframes ? options.wireframeBackground : options.background,\n              bodies = [],\n              constraints = [],\n              i;\n          var event = {\n            timestamp: engine.timing.timestamp\n          };\n          Events.trigger(render, 'beforeRender', event); // apply background if it has changed\n\n          if (render.currentBackground !== background) _applyBackground(render, background); // clear the canvas with a transparent fill, to allow the canvas background to show\n\n          context.globalCompositeOperation = 'source-in';\n          context.fillStyle = \"transparent\";\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.globalCompositeOperation = 'source-over'; // handle bounds\n\n          if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n              var body = allBodies[i];\n              if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            Render.startViewTransform(render); // update mouse\n\n            if (render.mouse) {\n              Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n              });\n              Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n          } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n          }\n\n          if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n          } else {\n            if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context); // optimised method for wireframes only\n\n            Render.bodyWireframes(render, bodies, context);\n          }\n\n          if (options.showBounds) Render.bodyBounds(render, bodies, context);\n          if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n          if (options.showPositions) Render.bodyPositions(render, bodies, context);\n          if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n          if (options.showIds) Render.bodyIds(render, bodies, context);\n          if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n          if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n          if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n          if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n          Render.constraints(constraints, context);\n          if (options.showBroadphase && engine.broadphase.controller === Grid) Render.grid(render, engine.broadphase, context);\n          if (options.showDebug) Render.debug(render, context);\n\n          if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n          }\n\n          Events.trigger(render, 'afterRender', event);\n        };\n        /**\n         * Description\n         * @private\n         * @method debug\n         * @param {render} render\n         * @param {RenderingContext} context\n         */\n\n\n        Render.debug = function (render, context) {\n          var c = context,\n              engine = render.engine,\n              world = engine.world,\n              metrics = engine.metrics,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              space = \"    \";\n\n          if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n              text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n          }\n\n          if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n              c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n              c.fillText(split[i], 50, 50 + i * 18);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method constraints\n         * @param {constraint[]} constraints\n         * @param {RenderingContext} context\n         */\n\n\n        Render.constraints = function (constraints, context) {\n          var c = context;\n\n          for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n              start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n              start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              if (bodyB) {\n                end = Vector.add(bodyB.position, constraint.pointB);\n              } else {\n                end = constraint.pointB;\n              }\n\n              c.beginPath();\n              c.moveTo(start.x, start.y);\n\n              if (constraint.render.type === 'spring') {\n                var delta = Vector.sub(end, start),\n                    normal = Vector.perp(Vector.normalise(delta)),\n                    coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                    offset;\n\n                for (var j = 1; j < coils; j += 1) {\n                  offset = j % 2 === 0 ? 1 : -1;\n                  c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                }\n              }\n\n              c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n              c.lineWidth = constraint.render.lineWidth;\n              c.strokeStyle = constraint.render.strokeStyle;\n              c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n              c.fillStyle = constraint.render.strokeStyle;\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n              c.fill();\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodyShadows\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyShadows = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n\n            if (body.circleRadius) {\n              c.beginPath();\n              c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              c.beginPath();\n              c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n              for (var j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n              }\n\n              c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n            c.fill();\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodies\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodies = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              showInternalEdges = options.showInternalEdges || !options.wireframes,\n              body,\n              part,\n              i,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              if (!part.render.visible) continue;\n\n              if (options.showSleeping && body.isSleeping) {\n                c.globalAlpha = 0.5 * part.render.opacity;\n              } else if (part.render.opacity !== 1) {\n                c.globalAlpha = part.render.opacity;\n              }\n\n              if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                // part sprite\n                var sprite = part.render.sprite,\n                    texture = _getTexture(render, sprite.texture);\n\n                c.translate(part.position.x, part.position.y);\n                c.rotate(part.angle);\n                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale); // revert translation, hopefully faster than save / restore\n\n                c.rotate(-part.angle);\n                c.translate(-part.position.x, -part.position.y);\n              } else {\n                // part polygon\n                if (part.circleRadius) {\n                  c.beginPath();\n                  c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                } else {\n                  c.beginPath();\n                  c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                  for (var j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                      c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                      c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                      c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                  }\n\n                  c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                  c.closePath();\n                }\n\n                if (!options.wireframes) {\n                  c.fillStyle = part.render.fillStyle;\n\n                  if (part.render.lineWidth) {\n                    c.lineWidth = part.render.lineWidth;\n                    c.strokeStyle = part.render.strokeStyle;\n                    c.stroke();\n                  }\n\n                  c.fill();\n                } else {\n                  c.lineWidth = 1;\n                  c.strokeStyle = '#bbb';\n                  c.stroke();\n                }\n              }\n\n              c.globalAlpha = 1;\n            }\n          }\n        };\n        /**\n         * Optimised method for drawing body wireframes in one pass\n         * @private\n         * @method bodyWireframes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyWireframes = function (render, bodies, context) {\n          var c = context,\n              showInternalEdges = render.options.showInternalEdges,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render all bodies\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n              for (j = 1; j < part.vertices.length; j++) {\n                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                  c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                } else {\n                  c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                }\n\n                if (part.vertices[j].isInternal && !showInternalEdges) {\n                  c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                }\n              }\n\n              c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = '#bbb';\n          c.stroke();\n        };\n        /**\n         * Optimised method for drawing body convex hull wireframes in one pass\n         * @private\n         * @method bodyConvexHulls\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyConvexHulls = function (render, bodies, context) {\n          var c = context,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render convex hulls\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible || body.parts.length === 1) continue;\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n              c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = 'rgba(255,255,255,0.2)';\n          c.stroke();\n        };\n        /**\n         * Renders body vertex numbers.\n         * @private\n         * @method vertexNumbers\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.vertexNumbers = function (render, bodies, context) {\n          var c = context,\n              i,\n              j,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n              var part = parts[k];\n\n              for (j = 0; j < part.vertices.length; j++) {\n                c.fillStyle = 'rgba(255,255,255,0.2)';\n                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n              }\n            }\n          }\n        };\n        /**\n         * Renders mouse position.\n         * @private\n         * @method mousePosition\n         * @param {render} render\n         * @param {mouse} mouse\n         * @param {RenderingContext} context\n         */\n\n\n        Render.mousePosition = function (render, mouse, context) {\n          var c = context;\n          c.fillStyle = 'rgba(255,255,255,0.8)';\n          c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n        };\n        /**\n         * Draws body bounds\n         * @private\n         * @method bodyBounds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyBounds = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n              var parts = bodies[i].parts;\n\n              for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n          } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Draws body angle indicators and axes\n         * @private\n         * @method bodyAxes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyAxes = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath();\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n            if (!body.render.visible) continue;\n\n            if (options.showAxes) {\n              // render all axes\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  var axis = part.axes[k];\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                }\n              }\n            } else {\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  // render a single axis indicator\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                }\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n          } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n          }\n\n          c.stroke();\n          c.globalCompositeOperation = 'source-over';\n        };\n        /**\n         * Draws body positions\n         * @private\n         * @method bodyPositions\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyPositions = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              body,\n              part,\n              i,\n              k;\n          c.beginPath(); // render current positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'indianred';\n          } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n          }\n\n          c.fill();\n          c.beginPath(); // render previous positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (body.render.visible) {\n              c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          c.fillStyle = 'rgba(255,165,0,0.8)';\n          c.fill();\n        };\n        /**\n         * Draws body velocity\n         * @private\n         * @method bodyVelocity\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyVelocity = function (render, bodies, context) {\n          var c = context;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n          }\n\n          c.lineWidth = 3;\n          c.strokeStyle = 'cornflowerblue';\n          c.stroke();\n        };\n        /**\n         * Draws body ids\n         * @private\n         * @method bodyIds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyIds = function (render, bodies, context) {\n          var c = context,\n              i,\n              j;\n\n          for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible) continue;\n            var parts = bodies[i].parts;\n\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.font = \"12px Arial\";\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n              c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method collisions\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.collisions = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render collision positions\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            for (j = 0; j < pair.activeContacts.length; j++) {\n              var contact = pair.activeContacts[j],\n                  vertex = contact.vertex;\n              c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n          } else {\n            c.fillStyle = 'orange';\n          }\n\n          c.fill();\n          c.beginPath(); // render collision normals\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n              var normalPosX = pair.activeContacts[0].vertex.x,\n                  normalPosY = pair.activeContacts[0].vertex.y;\n\n              if (pair.activeContacts.length === 2) {\n                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n              }\n\n              if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n              } else {\n                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n              }\n\n              c.lineTo(normalPosX, normalPosY);\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method separations\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.separations = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render separations\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n            var k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n            k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method grid\n         * @param {render} render\n         * @param {grid} grid\n         * @param {RenderingContext} context\n         */\n\n\n        Render.grid = function (render, grid, context) {\n          var c = context,\n              options = render.options;\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n          } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n          }\n\n          c.beginPath();\n          var bucketKeys = Common.keys(grid.buckets);\n\n          for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n            if (grid.buckets[bucketId].length < 2) continue;\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth, 0.5 + parseInt(region[2], 10) * grid.bucketHeight, grid.bucketWidth, grid.bucketHeight);\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method inspector\n         * @param {inspector} inspector\n         * @param {RenderingContext} context\n         */\n\n\n        Render.inspector = function (inspector, context) {\n          var engine = inspector.engine,\n              selected = inspector.selected,\n              render = inspector.render,\n              options = render.options,\n              bounds;\n\n          if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n          }\n\n          for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1, 2]);\n\n            switch (item.type) {\n              case 'body':\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n                break;\n\n              case 'constraint':\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA) point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n                break;\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n          } // render selection region\n\n\n          if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n          }\n\n          if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n        };\n        /**\n         * Description\n         * @method _createCanvas\n         * @private\n         * @param {} width\n         * @param {} height\n         * @return canvas\n         */\n\n\n        var _createCanvas = function _createCanvas(width, height) {\n          var canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n\n          canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          canvas.onselectstart = function () {\n            return false;\n          };\n\n          return canvas;\n        };\n        /**\n         * Gets the pixel ratio of the canvas.\n         * @method _getPixelRatio\n         * @private\n         * @param {HTMLElement} canvas\n         * @return {Number} pixel ratio\n         */\n\n\n        var _getPixelRatio = function _getPixelRatio(canvas) {\n          var context = canvas.getContext('2d'),\n              devicePixelRatio = window.devicePixelRatio || 1,\n              backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          return devicePixelRatio / backingStorePixelRatio;\n        };\n        /**\n         * Gets the requested texture (an Image) via its path\n         * @method _getTexture\n         * @private\n         * @param {render} render\n         * @param {string} imagePath\n         * @return {Image} texture\n         */\n\n\n        var _getTexture = function _getTexture(render, imagePath) {\n          var image = render.textures[imagePath];\n          if (image) return image;\n          image = render.textures[imagePath] = new Image();\n          image.src = imagePath;\n          return image;\n        };\n        /**\n         * Applies the background to the canvas using CSS.\n         * @method applyBackground\n         * @private\n         * @param {render} render\n         * @param {string} background\n         */\n\n\n        var _applyBackground = function _applyBackground(render, background) {\n          var cssBackground = background;\n          if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n          render.canvas.style.background = cssBackground;\n          render.canvas.style.backgroundSize = \"contain\";\n          render.currentBackground = background;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A back-reference to the `Matter.Render` module.\n         *\n         * @property controller\n         * @type render\n         */\n\n        /**\n         * A reference to the `Matter.Engine` instance to be used.\n         *\n         * @property engine\n         * @type engine\n         */\n\n        /**\n         * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n         *\n         * @property element\n         * @type HTMLElement\n         * @default null\n         */\n\n        /**\n         * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n         *\n         * @property canvas\n         * @type HTMLCanvasElement\n         * @default null\n         */\n\n        /**\n         * The configuration options of the renderer.\n         *\n         * @property options\n         * @type {}\n         */\n\n        /**\n         * The target width in pixels of the `render.canvas` to be created.\n         *\n         * @property options.width\n         * @type number\n         * @default 800\n         */\n\n        /**\n         * The target height in pixels of the `render.canvas` to be created.\n         *\n         * @property options.height\n         * @type number\n         * @default 600\n         */\n\n        /**\n         * A flag that specifies if `render.bounds` should be used when rendering.\n         *\n         * @property options.hasBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Bounds` object that specifies the drawing view region.\n         * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n         * This allows for creating views that can pan or zoom around the scene.\n         * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n        /**\n         * The 2d rendering context from the `render.canvas` element.\n         *\n         * @property context\n         * @type CanvasRenderingContext2D\n         */\n\n        /**\n         * The sprite texture cache.\n         *\n         * @property textures\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Grid\": 6,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }],\n    32: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.RenderPixi` module is an example renderer using pixi.js.\n      * See also `Matter.Render` for a canvas based renderer.\n      *\n      * @class RenderPixi\n      * @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n      * It will likely be moved to its own repository (but maintenance will be limited).\n      */\n      var RenderPixi = {};\n      module.exports = RenderPixi;\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Common = _dereq_('../core/Common');\n\n      var Events = _dereq_('../core/Events');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new Pixi.js WebGL renderer\n         * @method create\n         * @param {object} options\n         * @return {RenderPixi} A new renderer\n         * @deprecated\n         */\n\n\n        RenderPixi.create = function (options) {\n          Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n          var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n              width: 800,\n              height: 600,\n              background: '#fafafa',\n              wireframeBackground: '#222',\n              hasBounds: false,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false\n            }\n          };\n          var render = Common.extend(defaults, options),\n              transparent = !render.options.wireframes && render.options.background === 'transparent'; // init pixi\n\n          render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n          };\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n          render.container = render.container || new PIXI.Container();\n          render.spriteContainer = render.spriteContainer || new PIXI.Container();\n          render.canvas = render.canvas || render.renderer.view;\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.options.width,\n              y: render.options.height\n            }\n          }; // event listeners\n\n          Events.on(render.engine, 'beforeUpdate', function () {\n            RenderPixi.clear(render);\n          }); // caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // use a sprite batch for performance\n\n          render.container.addChild(render.spriteContainer); // insert canvas\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n          } // prevent menus on canvas\n\n\n          render.canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          render.canvas.onselectstart = function () {\n            return false;\n          };\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Clears the scene graph\n         * @method clear\n         * @param {RenderPixi} render\n         * @deprecated\n         */\n\n\n        RenderPixi.clear = function (render) {\n          var container = render.container,\n              spriteContainer = render.spriteContainer; // clear stage container\n\n          while (container.children[0]) {\n            container.removeChild(container.children[0]);\n          } // clear sprite batch\n\n\n          while (spriteContainer.children[0]) {\n            spriteContainer.removeChild(spriteContainer.children[0]);\n          }\n\n          var bgSprite = render.sprites['bg-0']; // clear caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // set background sprite\n\n          render.sprites['bg-0'] = bgSprite;\n          if (bgSprite) container.addChildAt(bgSprite, 0); // add sprite batch back into container\n\n          render.container.addChild(render.spriteContainer); // reset background state\n\n          render.currentBackground = null; // reset bounds transforms\n\n          container.scale.set(1, 1);\n          container.position.set(0, 0);\n        };\n        /**\n         * Sets the background of the canvas \n         * @method setBackground\n         * @param {RenderPixi} render\n         * @param {string} background\n         * @deprecated\n         */\n\n\n        RenderPixi.setBackground = function (render, background) {\n          if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n              // if solid background color\n              var color = Common.colorToNumber(background);\n              render.renderer.backgroundColor = color; // remove background sprite if existing\n\n              if (bgSprite) render.container.removeChild(bgSprite);\n            } else {\n              // initialise background sprite if needed\n              if (!bgSprite) {\n                var texture = _getTexture(render, background);\n\n                bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                bgSprite.position.x = 0;\n                bgSprite.position.y = 0;\n                render.container.addChildAt(bgSprite, 0);\n              }\n            }\n\n            render.currentBackground = background;\n          }\n        };\n        /**\n         * Description\n         * @method world\n         * @param {engine} engine\n         * @deprecated\n         */\n\n\n        RenderPixi.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              renderer = render.renderer,\n              container = render.container,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              constraints = [],\n              i;\n\n          if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n          } else {\n            RenderPixi.setBackground(render, options.background);\n          } // handle bounds\n\n\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n\n          if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n          } else {\n            constraints = allConstraints;\n          }\n\n          for (i = 0; i < bodies.length; i++) {\n            RenderPixi.body(render, bodies[i]);\n          }\n\n          for (i = 0; i < constraints.length; i++) {\n            RenderPixi.constraint(render, constraints[i]);\n          }\n\n          renderer.render(container);\n        };\n        /**\n         * Description\n         * @method constraint\n         * @param {engine} engine\n         * @param {constraint} constraint\n         * @deprecated\n         */\n\n\n        RenderPixi.constraint = function (render, constraint) {\n          var engine = render.engine,\n              bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB,\n              container = render.container,\n              constraintRender = constraint.render,\n              primitiveId = 'c-' + constraint.id,\n              primitive = render.primitives[primitiveId]; // initialise constraint primitive if not existing\n\n          if (!primitive) primitive = render.primitives[primitiveId] = new PIXI.Graphics(); // don't render if constraint does not have two end points\n\n          if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n          } // add to scene graph if not already there\n\n\n          if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // render the constraint on every update, since they can change dynamically\n\n          primitive.clear();\n          primitive.beginFill(0, 0);\n          primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n\n          if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n          } else {\n            primitive.moveTo(pointA.x, pointA.y);\n          }\n\n          if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n          } else {\n            primitive.lineTo(pointB.x, pointB.y);\n          }\n\n          primitive.endFill();\n        };\n        /**\n         * Description\n         * @method body\n         * @param {engine} engine\n         * @param {body} body\n         * @deprecated\n         */\n\n\n        RenderPixi.body = function (render, body) {\n          var engine = render.engine,\n              bodyRender = body.render;\n          if (!bodyRender.visible) return;\n\n          if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer; // initialise body sprite if not existing\n\n            if (!sprite) sprite = render.sprites[spriteId] = _createBodySprite(render, body); // add to scene graph if not already there\n\n            if (Common.indexOf(spriteContainer.children, sprite) === -1) spriteContainer.addChild(sprite); // update body sprite\n\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n          } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container; // initialise body primitive if not existing\n\n            if (!primitive) {\n              primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n              primitive.initialAngle = body.angle;\n            } // add to scene graph if not already there\n\n\n            if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // update body primitive\n\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n          }\n        };\n        /**\n         * Creates a body sprite\n         * @method _createBodySprite\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Sprite} sprite\n         * @deprecated\n         */\n\n\n        var _createBodySprite = function _createBodySprite(render, body) {\n          var bodyRender = body.render,\n              texturePath = bodyRender.sprite.texture,\n              texture = _getTexture(render, texturePath),\n              sprite = new PIXI.Sprite(texture);\n\n          sprite.anchor.x = body.render.sprite.xOffset;\n          sprite.anchor.y = body.render.sprite.yOffset;\n          return sprite;\n        };\n        /**\n         * Creates a body primitive\n         * @method _createBodyPrimitive\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Graphics} graphics\n         * @deprecated\n         */\n\n\n        var _createBodyPrimitive = function _createBodyPrimitive(render, body) {\n          var bodyRender = body.render,\n              options = render.options,\n              primitive = new PIXI.Graphics(),\n              fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n              strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleWireframe = Common.colorToNumber('#bbb'),\n              strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n              part;\n          primitive.clear(); // handle compound parts\n\n          for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n              primitive.beginFill(fillStyle, 1);\n              primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n              primitive.beginFill(0, 0);\n              primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n              primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n            primitive.endFill(); // angle indicator\n\n            if (options.showAngleIndicator || options.showAxes) {\n              primitive.beginFill(0, 0);\n\n              if (options.wireframes) {\n                primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n              } else {\n                primitive.lineStyle(1, strokeStyleIndicator);\n              }\n\n              primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n              primitive.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2 - body.position.x, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2 - body.position.y);\n              primitive.endFill();\n            }\n          }\n\n          return primitive;\n        };\n        /**\n         * Gets the requested texture (a PIXI.Texture) via its path\n         * @method _getTexture\n         * @private\n         * @param {RenderPixi} render\n         * @param {string} imagePath\n         * @return {PIXI.Texture} texture\n         * @deprecated\n         */\n\n\n        var _getTexture = function _getTexture(render, imagePath) {\n          var texture = render.textures[imagePath];\n          if (!texture) texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n          return texture;\n        };\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }]\n  }, {}, [30])(30);\n});","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\nexport default freeGlobal;","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","require(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nmodule.exports = {\n  decomp: polygonDecomp,\n  quickDecomp: polygonQuickDecomp,\n  isSimple: polygonIsSimple,\n  removeCollinearPoints: polygonRemoveCollinearPoints,\n  removeDuplicatePoints: polygonRemoveDuplicatePoints,\n  makeCCW: polygonMakeCCW\n};\n/**\n * Compute the intersection between two lines.\n * @static\n * @method lineInt\n * @param  {Array}  l1          Line vector 1\n * @param  {Array}  l2          Line vector 2\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\n * @return {Array}              The intersection point.\n */\n\nfunction lineInt(l1, l2, precision) {\n  precision = precision || 0;\n  var i = [0, 0]; // point\n\n  var a1, b1, c1, a2, b2, c2, det; // scalars\n\n  a1 = l1[1][1] - l1[0][1];\n  b1 = l1[0][0] - l1[1][0];\n  c1 = a1 * l1[0][0] + b1 * l1[0][1];\n  a2 = l2[1][1] - l2[0][1];\n  b2 = l2[0][0] - l2[1][0];\n  c2 = a2 * l2[0][0] + b2 * l2[0][1];\n  det = a1 * b2 - a2 * b1;\n\n  if (!scalar_eq(det, 0, precision)) {\n    // lines are not parallel\n    i[0] = (b2 * c1 - b1 * c2) / det;\n    i[1] = (a1 * c2 - a2 * c1) / det;\n  }\n\n  return i;\n}\n/**\n * Checks if two line segments intersects.\n * @method segmentsIntersect\n * @param {Array} p1 The start vertex of the first line segment.\n * @param {Array} p2 The end vertex of the first line segment.\n * @param {Array} q1 The start vertex of the second line segment.\n * @param {Array} q2 The end vertex of the second line segment.\n * @return {Boolean} True if the two line segments intersect\n */\n\n\nfunction lineSegmentsIntersect(p1, p2, q1, q2) {\n  var dx = p2[0] - p1[0];\n  var dy = p2[1] - p1[1];\n  var da = q2[0] - q1[0];\n  var db = q2[1] - q1[1]; // segments are parallel\n\n  if (da * dy - db * dx === 0) {\n    return false;\n  }\n\n  var s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\n  var t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\n  return s >= 0 && s <= 1 && t >= 0 && t <= 1;\n}\n/**\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\n * @static\n * @method area\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @return {Number}\n */\n\n\nfunction triangleArea(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);\n}\n\nfunction isLeft(a, b, c) {\n  return triangleArea(a, b, c) > 0;\n}\n\nfunction isLeftOn(a, b, c) {\n  return triangleArea(a, b, c) >= 0;\n}\n\nfunction isRight(a, b, c) {\n  return triangleArea(a, b, c) < 0;\n}\n\nfunction isRightOn(a, b, c) {\n  return triangleArea(a, b, c) <= 0;\n}\n\nvar tmpPoint1 = [],\n    tmpPoint2 = [];\n/**\n * Check if three points are collinear\n * @method collinear\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\n * @return {Boolean}\n */\n\nfunction collinear(a, b, c, thresholdAngle) {\n  if (!thresholdAngle) {\n    return triangleArea(a, b, c) === 0;\n  } else {\n    var ab = tmpPoint1,\n        bc = tmpPoint2;\n    ab[0] = b[0] - a[0];\n    ab[1] = b[1] - a[1];\n    bc[0] = c[0] - b[0];\n    bc[1] = c[1] - b[1];\n    var dot = ab[0] * bc[0] + ab[1] * bc[1],\n        magA = Math.sqrt(ab[0] * ab[0] + ab[1] * ab[1]),\n        magB = Math.sqrt(bc[0] * bc[0] + bc[1] * bc[1]),\n        angle = Math.acos(dot / (magA * magB));\n    return angle < thresholdAngle;\n  }\n}\n\nfunction sqdist(a, b) {\n  var dx = b[0] - a[0];\n  var dy = b[1] - a[1];\n  return dx * dx + dy * dy;\n}\n/**\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\n * @method at\n * @param  {Number} i\n * @return {Array}\n */\n\n\nfunction polygonAt(polygon, i) {\n  var s = polygon.length;\n  return polygon[i < 0 ? i % s + s : i % s];\n}\n/**\n * Clear the polygon data\n * @method clear\n * @return {Array}\n */\n\n\nfunction polygonClear(polygon) {\n  polygon.length = 0;\n}\n/**\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\n * @method append\n * @param {Polygon} poly The polygon to get points from.\n * @param {Number}  from The vertex index in \"poly\".\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\n * @return {Array}\n */\n\n\nfunction polygonAppend(polygon, poly, from, to) {\n  for (var i = from; i < to; i++) {\n    polygon.push(poly[i]);\n  }\n}\n/**\n * Make sure that the polygon vertices are ordered counter-clockwise.\n * @method makeCCW\n */\n\n\nfunction polygonMakeCCW(polygon) {\n  var br = 0,\n      v = polygon; // find bottom right point\n\n  for (var i = 1; i < polygon.length; ++i) {\n    if (v[i][1] < v[br][1] || v[i][1] === v[br][1] && v[i][0] > v[br][0]) {\n      br = i;\n    }\n  } // reverse poly if clockwise\n\n\n  if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\n    polygonReverse(polygon);\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\n * Reverse the vertices in the polygon\n * @method reverse\n */\n\n\nfunction polygonReverse(polygon) {\n  var tmp = [];\n  var N = polygon.length;\n\n  for (var i = 0; i !== N; i++) {\n    tmp.push(polygon.pop());\n  }\n\n  for (var i = 0; i !== N; i++) {\n    polygon[i] = tmp[i];\n  }\n}\n/**\n * Check if a point in the polygon is a reflex point\n * @method isReflex\n * @param  {Number}  i\n * @return {Boolean}\n */\n\n\nfunction polygonIsReflex(polygon, i) {\n  return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\n}\n\nvar tmpLine1 = [],\n    tmpLine2 = [];\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\n\nfunction polygonCanSee(polygon, a, b) {\n  var p,\n      dist,\n      l1 = tmpLine1,\n      l2 = tmpLine2;\n\n  if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\n    return false;\n  }\n\n  dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\n\n  for (var i = 0; i !== polygon.length; ++i) {\n    // for each edge\n    if ((i + 1) % polygon.length === a || i === a) {\n      // ignore incident edges\n      continue;\n    }\n\n    if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) {\n      // if diag intersects an edge\n      l1[0] = polygonAt(polygon, a);\n      l1[1] = polygonAt(polygon, b);\n      l2[0] = polygonAt(polygon, i);\n      l2[1] = polygonAt(polygon, i + 1);\n      p = lineInt(l1, l2);\n\n      if (sqdist(polygonAt(polygon, a), p) < dist) {\n        // if edge is blocking visibility to b\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee2\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\n\n\nfunction polygonCanSee2(polygon, a, b) {\n  // for each edge\n  for (var i = 0; i !== polygon.length; ++i) {\n    // ignore incident edges\n    if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b) {\n      continue;\n    }\n\n    if (lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i + 1))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Copy the polygon from vertex i to vertex j.\n * @method copy\n * @param  {Number} i\n * @param  {Number} j\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\n * @return {Polygon}                The resulting copy.\n */\n\n\nfunction polygonCopy(polygon, i, j, targetPoly) {\n  var p = targetPoly || [];\n  polygonClear(p);\n\n  if (i < j) {\n    // Insert all vertices from i to j\n    for (var k = i; k <= j; k++) {\n      p.push(polygon[k]);\n    }\n  } else {\n    // Insert vertices 0 to j\n    for (var k = 0; k <= j; k++) {\n      p.push(polygon[k]);\n    } // Insert vertices i to end\n\n\n    for (var k = i; k < polygon.length; k++) {\n      p.push(polygon[k]);\n    }\n  }\n\n  return p;\n}\n/**\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\n * @method getCutEdges\n * @return {Array}\n */\n\n\nfunction polygonGetCutEdges(polygon) {\n  var min = [],\n      tmp1 = [],\n      tmp2 = [],\n      tmpPoly = [];\n  var nDiags = Number.MAX_VALUE;\n\n  for (var i = 0; i < polygon.length; ++i) {\n    if (polygonIsReflex(polygon, i)) {\n      for (var j = 0; j < polygon.length; ++j) {\n        if (polygonCanSee(polygon, i, j)) {\n          tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\n          tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\n\n          for (var k = 0; k < tmp2.length; k++) {\n            tmp1.push(tmp2[k]);\n          }\n\n          if (tmp1.length < nDiags) {\n            min = tmp1;\n            nDiags = tmp1.length;\n            min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\n          }\n        }\n      }\n    }\n  }\n\n  return min;\n}\n/**\n * Decomposes the polygon into one or more convex sub-Polygons.\n * @method decomp\n * @return {Array} An array or Polygon objects.\n */\n\n\nfunction polygonDecomp(polygon) {\n  var edges = polygonGetCutEdges(polygon);\n\n  if (edges.length > 0) {\n    return polygonSlice(polygon, edges);\n  } else {\n    return [polygon];\n  }\n}\n/**\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\n * @method slice\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\n * @return {Array}\n */\n\n\nfunction polygonSlice(polygon, cutEdges) {\n  if (cutEdges.length === 0) {\n    return [polygon];\n  }\n\n  if (cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length === 2 && cutEdges[0][0] instanceof Array) {\n    var polys = [polygon];\n\n    for (var i = 0; i < cutEdges.length; i++) {\n      var cutEdge = cutEdges[i]; // Cut all polys\n\n      for (var j = 0; j < polys.length; j++) {\n        var poly = polys[j];\n        var result = polygonSlice(poly, cutEdge);\n\n        if (result) {\n          // Found poly! Cut and quit\n          polys.splice(j, 1);\n          polys.push(result[0], result[1]);\n          break;\n        }\n      }\n    }\n\n    return polys;\n  } else {\n    // Was given one edge\n    var cutEdge = cutEdges;\n    var i = polygon.indexOf(cutEdge[0]);\n    var j = polygon.indexOf(cutEdge[1]);\n\n    if (i !== -1 && j !== -1) {\n      return [polygonCopy(polygon, i, j), polygonCopy(polygon, j, i)];\n    } else {\n      return false;\n    }\n  }\n}\n/**\n * Checks that the line segments of this polygon do not intersect each other.\n * @method isSimple\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\n * @return {Boolean}\n * @todo Should it check all segments with all others?\n */\n\n\nfunction polygonIsSimple(polygon) {\n  var path = polygon,\n      i; // Check\n\n  for (i = 0; i < path.length - 1; i++) {\n    for (var j = 0; j < i - 1; j++) {\n      if (lineSegmentsIntersect(path[i], path[i + 1], path[j], path[j + 1])) {\n        return false;\n      }\n    }\n  } // Check the segment between the last and the first point to all others\n\n\n  for (i = 1; i < path.length - 2; i++) {\n    if (lineSegmentsIntersect(path[0], path[path.length - 1], path[i], path[i + 1])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getIntersectionPoint(p1, p2, q1, q2, delta) {\n  delta = delta || 0;\n  var a1 = p2[1] - p1[1];\n  var b1 = p1[0] - p2[0];\n  var c1 = a1 * p1[0] + b1 * p1[1];\n  var a2 = q2[1] - q1[1];\n  var b2 = q1[0] - q2[0];\n  var c2 = a2 * q1[0] + b2 * q1[1];\n  var det = a1 * b2 - a2 * b1;\n\n  if (!scalar_eq(det, 0, delta)) {\n    return [(b2 * c1 - b1 * c2) / det, (a1 * c2 - a2 * c1) / det];\n  } else {\n    return [0, 0];\n  }\n}\n/**\n * Quickly decompose the Polygon into convex sub-polygons.\n * @method quickDecomp\n * @param  {Array} result\n * @param  {Array} [reflexVertices]\n * @param  {Array} [steinerPoints]\n * @param  {Number} [delta]\n * @param  {Number} [maxlevel]\n * @param  {Number} [level]\n * @return {Array}\n */\n\n\nfunction polygonQuickDecomp(polygon, result, reflexVertices, steinerPoints, delta, maxlevel, level) {\n  maxlevel = maxlevel || 100;\n  level = level || 0;\n  delta = delta || 25;\n  result = typeof result !== \"undefined\" ? result : [];\n  reflexVertices = reflexVertices || [];\n  steinerPoints = steinerPoints || [];\n  var upperInt = [0, 0],\n      lowerInt = [0, 0],\n      p = [0, 0]; // Points\n\n  var upperDist = 0,\n      lowerDist = 0,\n      d = 0,\n      closestDist = 0; // scalars\n\n  var upperIndex = 0,\n      lowerIndex = 0,\n      closestIndex = 0; // Integers\n\n  var lowerPoly = [],\n      upperPoly = []; // polygons\n\n  var poly = polygon,\n      v = polygon;\n\n  if (v.length < 3) {\n    return result;\n  }\n\n  level++;\n\n  if (level > maxlevel) {\n    console.warn(\"quickDecomp: max level (\" + maxlevel + \") reached.\");\n    return result;\n  }\n\n  for (var i = 0; i < polygon.length; ++i) {\n    if (polygonIsReflex(poly, i)) {\n      reflexVertices.push(poly[i]);\n      upperDist = lowerDist = Number.MAX_VALUE;\n\n      for (var j = 0; j < polygon.length; ++j) {\n        if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) {\n          // if line intersects with an edge\n          p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\n\n          if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) {\n            // make sure it's inside the poly\n            d = sqdist(poly[i], p);\n\n            if (d < lowerDist) {\n              // keep only the closest intersection\n              lowerDist = d;\n              lowerInt = p;\n              lowerIndex = j;\n            }\n          }\n        }\n\n        if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\n          p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\n\n          if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\n            d = sqdist(poly[i], p);\n\n            if (d < upperDist) {\n              upperDist = d;\n              upperInt = p;\n              upperIndex = j;\n            }\n          }\n        }\n      } // if there are no vertices to connect to, choose a point in the middle\n\n\n      if (lowerIndex === (upperIndex + 1) % polygon.length) {\n        //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\n        p[0] = (lowerInt[0] + upperInt[0]) / 2;\n        p[1] = (lowerInt[1] + upperInt[1]) / 2;\n        steinerPoints.push(p);\n\n        if (i < upperIndex) {\n          //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\n          polygonAppend(lowerPoly, poly, i, upperIndex + 1);\n          lowerPoly.push(p);\n          upperPoly.push(p);\n\n          if (lowerIndex !== 0) {\n            //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\n            polygonAppend(upperPoly, poly, lowerIndex, poly.length);\n          } //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\n\n\n          polygonAppend(upperPoly, poly, 0, i + 1);\n        } else {\n          if (i !== 0) {\n            //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\n            polygonAppend(lowerPoly, poly, i, poly.length);\n          } //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\n\n\n          polygonAppend(lowerPoly, poly, 0, upperIndex + 1);\n          lowerPoly.push(p);\n          upperPoly.push(p); //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\n\n          polygonAppend(upperPoly, poly, lowerIndex, i + 1);\n        }\n      } else {\n        // connect to the closest point within the triangle\n        //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\n        if (lowerIndex > upperIndex) {\n          upperIndex += polygon.length;\n        }\n\n        closestDist = Number.MAX_VALUE;\n\n        if (upperIndex < lowerIndex) {\n          return result;\n        }\n\n        for (var j = lowerIndex; j <= upperIndex; ++j) {\n          if (isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\n            d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\n\n            if (d < closestDist && polygonCanSee2(poly, i, j)) {\n              closestDist = d;\n              closestIndex = j % polygon.length;\n            }\n          }\n        }\n\n        if (i < closestIndex) {\n          polygonAppend(lowerPoly, poly, i, closestIndex + 1);\n\n          if (closestIndex !== 0) {\n            polygonAppend(upperPoly, poly, closestIndex, v.length);\n          }\n\n          polygonAppend(upperPoly, poly, 0, i + 1);\n        } else {\n          if (i !== 0) {\n            polygonAppend(lowerPoly, poly, i, v.length);\n          }\n\n          polygonAppend(lowerPoly, poly, 0, closestIndex + 1);\n          polygonAppend(upperPoly, poly, closestIndex, i + 1);\n        }\n      } // solve smallest poly first\n\n\n      if (lowerPoly.length < upperPoly.length) {\n        polygonQuickDecomp(lowerPoly, result, reflexVertices, steinerPoints, delta, maxlevel, level);\n        polygonQuickDecomp(upperPoly, result, reflexVertices, steinerPoints, delta, maxlevel, level);\n      } else {\n        polygonQuickDecomp(upperPoly, result, reflexVertices, steinerPoints, delta, maxlevel, level);\n        polygonQuickDecomp(lowerPoly, result, reflexVertices, steinerPoints, delta, maxlevel, level);\n      }\n\n      return result;\n    }\n  }\n\n  result.push(polygon);\n  return result;\n}\n/**\n * Remove collinear points in the polygon.\n * @method removeCollinearPoints\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\n * @return {Number}           The number of points removed\n */\n\n\nfunction polygonRemoveCollinearPoints(polygon, precision) {\n  var num = 0;\n\n  for (var i = polygon.length - 1; polygon.length > 3 && i >= 0; --i) {\n    if (collinear(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1), precision)) {\n      // Remove the middle point\n      polygon.splice(i % polygon.length, 1);\n      num++;\n    }\n  }\n\n  return num;\n}\n/**\n * Remove duplicate points in the polygon.\n * @method removeDuplicatePoints\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\n */\n\n\nfunction polygonRemoveDuplicatePoints(polygon, precision) {\n  for (var i = polygon.length - 1; i >= 1; --i) {\n    var pi = polygon[i];\n\n    for (var j = i - 1; j >= 0; --j) {\n      if (points_eq(pi, polygon[j], precision)) {\n        polygon.splice(i, 1);\n        continue;\n      }\n    }\n  }\n}\n/**\n * Check if two scalars are equal\n * @static\n * @method eq\n * @param  {Number} a\n * @param  {Number} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\n\n\nfunction scalar_eq(a, b, precision) {\n  precision = precision || 0;\n  return Math.abs(a - b) <= precision;\n}\n/**\n * Check if two points are equal\n * @static\n * @method points_eq\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\n\n\nfunction points_eq(a, b, precision) {\n  return scalar_eq(a[0], b[0], precision) && scalar_eq(a[1], b[1], precision);\n}"],"sourceRoot":""}