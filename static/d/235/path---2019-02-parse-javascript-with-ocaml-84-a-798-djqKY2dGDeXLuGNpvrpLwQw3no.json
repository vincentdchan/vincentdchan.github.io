{"data":{"markdownRemark":{"html":"<h1>起因</h1>\n<p>最近在写一个关于 JavaScript 的静态分析器，作为我的毕业设计。我写静态分析主要是为了 js 做更好的 DCE(Dead Code Elimination)，做更多关于 ES6 层面的优化。</p>\n<h1>为什么选择 OCaml</h1>\n<p>在和导师讨论题目的时候，我跟导师说用 Java 来写，但是其实我更想用的是 Scala，原因是：</p>\n<ul>\n<li>Scala 里面的很多语言特性非常有 FP 风格，也很适合用来写编译器和静态分析工具。</li>\n<li>运行在 JVM 上面更容易做多线程，有了多线程可以使静态分析过程有较大的提升。</li>\n<li>如果有需要，Scala 可以编译成 js，或者 JVM 上面有很多可以和 js 联动的方案，方便和其他 node.js 的工具联动。</li>\n</ul>\n<p>但是开始使用 Scala 的时候却发现了许多问题：</p>\n<ul>\n<li>我使用的 Parser 和 AST 结构都是 Java 写的（使用了 Graal.js 来进行 parse），无法使用 Scala 的 case class 风格，也就是我要在 Scala 里面写 Java Style 的代码，我表示很拒绝。除非写一层转换成，把 java class implicit 转换成 case class，但是我觉得这样很蛋疼，所以放弃。</li>\n<li>我要进行的静态分析是基于图（Graph）的，似乎没办法进行并行计算，即使可以，也会有超级多 overhead，还不如使用单线程。</li>\n</ul>\n<p>之前用过 OCaml 来写过编译器，感觉代数形式的数据结构天生对编译器和静态分析非常友好。而且有两个项目非常启发到我：</p>\n<ul>\n<li><strong><a href=\"https://flow.org/\">flow</a></strong>：静态分析工具，但是已经演化到类似 TypeScript 那样，变成一门语言了。我个人用过 flow，但是感觉非常慢，比 TypeScript 慢很多，但是我觉得不是 OCaml 慢，而是 flow 本身设计的问题。设计 TypeScript 的 Ander 毕竟是编译器领域的大牛，很多坑都踩过，像 TypeScript 和 VSCode 联动体验这么好肯定是经过优良设计的。</li>\n<li><strong><a href=\"https://bucklescript.github.io\">BuckleScript</a></strong>：把 OCaml 编译到 JS 的编译器（其实也算一门语言？）。作者号称编译速度最快的语言，编译速度比 TypeScript 还快，并附上了 benchmark。这点也可以理解。毕竟 OCaml 这门语言比 TypeScript 简单太多了。但是这也让我看到了一线生机，OCaml 写出来的编译器也可以很快啊。</li>\n</ul>\n<p>现在 OCaml 依然没有办法实现真正意义上的多线程（有 thread，但是却有 GIL），但是这不是痛点。但是 OCaml 的冷启动速度却可以秒杀 Scala。想象一下编译几个文件的项目，Scala 还要等 JVM 预热，其实很蛋疼。</p>","frontmatter":{"date":"2019-02-20","path":"/2019/02/parse-javascript-with-ocaml","title":"使用 OCaml 解析 JavaScript","permalink":null,"headerImage":null}}},"pageContext":{"title":"使用 OCaml 解析 JavaScript"}}